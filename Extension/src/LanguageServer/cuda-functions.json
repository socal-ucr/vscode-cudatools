{
	"cudaChooseDevice":{
		"id": "cudaChooseDevice",
		"value": "<p><b><code>__host__cudaError_t cudaChooseDevice ( int* device, const cudaDeviceProp* prop )</code></b></p>",
		"description": "<p>Select compute-device which best matches criteria.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Device with best match<br><code>prop</code><br>&emsp;- Desired device properties<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gf61f9ae0fe2d93b5b968756684a49460\">Full Description</a>"
	},
	"cudaDeviceFlushGPUDirectRDMAWrites":{
		"id": "cudaDeviceFlushGPUDirectRDMAWrites",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceFlushGPUDirectRDMAWrites ( cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope )</code></b></p>",
		"description": "<p>Blocks until remote writes are visible to the specified scope.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>target</code><br>&emsp;- The target of the operation, see cudaFlushGPUDirectRDMAWritesTarget<br><code>scope</code><br>&emsp;- The scope of the operation, see cudaFlushGPUDirectRDMAWritesScope<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNotSupported,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g3fc2853f4f30ce29019a8db822354d12\">Full Description</a>"
	},
	"cudaDeviceGetAttribute":{
		"id": "cudaDeviceGetAttribute",
		"value": "<p><b><code>__host____device__cudaError_t cudaDeviceGetAttribute ( int* value, cudaDeviceAttr attr, int device )</code></b></p>",
		"description": "<p>Returns information about the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>value</code><br>&emsp;- Returned device attribute value<br><code>attr</code><br>&emsp;- Device attribute to query<br><code>device</code><br>&emsp;- Device number to query<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gb22e8256592b836df9a9cc36c9db7151\">Full Description</a>"
	},
	"cudaDeviceGetByPCIBusId":{
		"id": "cudaDeviceGetByPCIBusId",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGetByPCIBusId ( int* device, const char* pciBusId )</code></b></p>",
		"description": "<p>Returns a handle to a compute device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Returned device ordinal<br><code>pciBusId</code><br>&emsp;- String in one of the following forms: [domain]:[bus]:[device].[function] [domain]:[bus]:[device] [bus]:[device].[function] where domain, bus, device, and function are all hexadecimal values<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g65f57fb8d0981ca03f6f9b20031c3e5d\">Full Description</a>"
	},
	"cudaDeviceGetCacheConfig":{
		"id": "cudaDeviceGetCacheConfig",
		"value": "<p><b><code>__host____device__cudaError_t cudaDeviceGetCacheConfig ( cudaFuncCache ** pCacheConfig )</code></b></p>",
		"description": "<p>Returns the preferred cache configuration for the current device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCacheConfig</code><br>&emsp;- Returned cache configuration<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gd9bf5eae6d464de05aa3840df9f5deeb\">Full Description</a>"
	},
	"cudaDeviceGetDefaultMemPool":{
		"id": "cudaDeviceGetDefaultMemPool",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGetDefaultMemPool ( cudaMemPool_t* memPool, int device )</code></b></p>",
		"description": "<p>Returns the default mempool of a device.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValuecudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g69aee77b793f13fa79c5bc0b566845b7\">Full Description</a>"
	},
	"cudaDeviceGetLimit":{
		"id": "cudaDeviceGetLimit",
		"value": "<p><b><code>__host____device__cudaError_t cudaDeviceGetLimit ( size_t* pValue, cudaLimit limit )</code></b></p>",
		"description": "<p>Return resource limits.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pValue</code><br>&emsp;- Returned size of the limit<br><code>limit</code><br>&emsp;- Limit to query<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorUnsupportedLimit, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g720e159aeb125910c22aa20fe9611ec2\">Full Description</a>"
	},
	"cudaDeviceGetMemPool":{
		"id": "cudaDeviceGetMemPool",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGetMemPool ( cudaMemPool_t* memPool, int device )</code></b></p>",
		"description": "<p>Gets the current mempool for a device.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValuecudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g9001cd1b2301101e81508f4b7714c97e\">Full Description</a>"
	},
	"cudaDeviceGetNvSciSyncAttributes":{
		"id": "cudaDeviceGetNvSciSyncAttributes",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGetNvSciSyncAttributes ( void* nvSciSyncAttrList, int device, int flags )</code></b></p>",
		"description": "<p>Return NvSciSync attributes that this device can support.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>nvSciSyncAttrList</code><br>&emsp;- Return NvSciSync attributes supported.<br><code>device</code><br>&emsp;- Valid Cuda Device to get NvSciSync attributes for.<br><code>flags</code><br>&emsp;- flags describing NvSciSync usage.<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gf70468b1bb3a7483d1cc393eb7301f2f\">Full Description</a>"
	},
	"cudaDeviceGetP2PAttribute":{
		"id": "cudaDeviceGetP2PAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGetP2PAttribute ( int* value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice )</code></b></p>",
		"description": "<p>Queries attributes of the link between two devices.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>value</code><br>&emsp;- Returned value of the requested attribute<br><code>attr</code><br><code>srcDevice</code><br>&emsp;- The source device of the target link.<br><code>dstDevice</code><br>&emsp;- The destination device of the target link.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gc63e5bf168e53b2daf71904eab048fa9\">Full Description</a>"
	},
	"cudaDeviceGetPCIBusId":{
		"id": "cudaDeviceGetPCIBusId",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGetPCIBusId ( char* pciBusId, int len, int device )</code></b></p>",
		"description": "<p>Returns a PCI Bus Id string for the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pciBusId</code><br>&emsp;- Returned identifier string for the device in the following format [domain]:[bus]:[device].[function] where domain, bus, device, and function are all hexadecimal values. pciBusId should be large enough to store 13 characters including the NULL-terminator.<br><code>len</code><br>&emsp;- Maximum length of string to store in name<br><code>device</code><br>&emsp;- Device to get identifier string for<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gea264dad3d8c4898e0b82213c0253def\">Full Description</a>"
	},
	"cudaDeviceGetSharedMemConfig":{
		"id": "cudaDeviceGetSharedMemConfig",
		"value": "<p><b><code>__host____device__cudaError_t cudaDeviceGetSharedMemConfig ( cudaSharedMemConfig ** pConfig )</code></b></p>",
		"description": "<p>Returns the shared memory configuration for the current device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pConfig</code><br>&emsp;- Returned cache configuration<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g318e21528985458de8613d87da832b42\">Full Description</a>"
	},
	"cudaDeviceGetStreamPriorityRange":{
		"id": "cudaDeviceGetStreamPriorityRange",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGetStreamPriorityRange ( int* leastPriority, int* greatestPriority )</code></b></p>",
		"description": "<p>Returns numerical values that correspond to the least and greatest stream priorities.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>leastPriority</code><br>&emsp;- Pointer to an int in which the numerical value for least stream priority is returned<br><code>greatestPriority</code><br>&emsp;- Pointer to an int in which the numerical value for greatest stream priority is returned<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gfdb79818f7c0ee7bc585648c91770275\">Full Description</a>"
	},
	"cudaDeviceGetTexture1DLinearMaxWidth":{
		"id": "cudaDeviceGetTexture1DLinearMaxWidth",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGetTexture1DLinearMaxWidth ( size_t* maxWidthInElements, const cudaChannelFormatDesc* fmtDesc, int device )</code></b></p>",
		"description": "<p>Returns the maximum number of elements allocatable in a 1D linear texture for a given element size.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>maxWidthInElements</code><br>&emsp;- Returns maximum number of texture elements allocatable for given fmtDesc.<br><code>fmtDesc</code><br>&emsp;- Texture format description.<br><code>device</code><br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorUnsupportedLimit, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g45f0345fd7a3697d0766596593920f61\">Full Description</a>"
	},
	"cudaDeviceReset":{
		"id": "cudaDeviceReset",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceReset ( void )</code></b></p>",
		"description": "<p>Destroy all allocations and reset all state on the current device in the current process.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gef69dd5c6d0206c2b8d099abac61f217\">Full Description</a>"
	},
	"cudaDeviceSetCacheConfig":{
		"id": "cudaDeviceSetCacheConfig",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceSetCacheConfig ( cudaFuncCache cacheConfig )</code></b></p>",
		"description": "<p>Sets the preferred cache configuration for the current device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>cacheConfig</code><br>&emsp;- Requested cache configuration<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g6c9cc78ca80490386cf593b4baa35a15\">Full Description</a>"
	},
	"cudaDeviceSetLimit":{
		"id": "cudaDeviceSetLimit",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceSetLimit ( cudaLimit limit, size_t value )</code></b></p>",
		"description": "<p>Set resource limits.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>limit</code><br>&emsp;- Limit to set<br><code>value</code><br>&emsp;- Size of limit<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorUnsupportedLimit, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g05956f16eaa47ef3a4efee84563ccb7d\">Full Description</a>"
	},
	"cudaDeviceSetMemPool":{
		"id": "cudaDeviceSetMemPool",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceSetMemPool ( int device, cudaMemPool_t memPool )</code></b></p>",
		"description": "<p>Sets the current memory pool of a device.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValuecudaErrorInvalidDevicecudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g02bb50d2e2af83e5f24d0b2ab9dadc82\">Full Description</a>"
	},
	"cudaDeviceSetSharedMemConfig":{
		"id": "cudaDeviceSetSharedMemConfig",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceSetSharedMemConfig ( cudaSharedMemConfig config )</code></b></p>",
		"description": "<p>Sets the shared memory configuration for the current device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>config</code><br>&emsp;- Requested cache configuration<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1ga4f3f8a422968f9524012f43ba852058\">Full Description</a>"
	},
	"cudaDeviceSynchronize":{
		"id": "cudaDeviceSynchronize",
		"value": "<p><b><code>__host____device__cudaError_t cudaDeviceSynchronize ( void )</code></b></p>",
		"description": "<p>Wait for compute device to finish.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g10e20b05a95f638a4071a655503df25d\">Full Description</a>"
	},
	"cudaGetDevice":{
		"id": "cudaGetDevice",
		"value": "<p><b><code>__host____device__cudaError_t cudaGetDevice ( int* device )</code></b></p>",
		"description": "<p>Returns which device is currently being used.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Returns the device on which the active host thread executes the device code.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorDeviceUnavailable,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g80861db2ce7c29b6e8055af8ae01bc78\">Full Description</a>"
	},
	"cudaGetDeviceCount":{
		"id": "cudaGetDeviceCount",
		"value": "<p><b><code>__host____device__cudaError_t cudaGetDeviceCount ( int* count )</code></b></p>",
		"description": "<p>Returns the number of compute-capable devices.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Returns the number of devices with compute capability greater or equal to 2.0<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g18808e54893cfcaafefeab31a73cc55f\">Full Description</a>"
	},
	"cudaGetDeviceFlags":{
		"id": "cudaGetDeviceFlags",
		"value": "<p><b><code>__host__cudaError_t cudaGetDeviceFlags ( unsigned int* flags )</code></b></p>",
		"description": "<p>Gets the flags for the current device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>flags</code><br>&emsp;- Pointer to store the device flags<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gf830794caf068b71638c6182bba8f77a\">Full Description</a>"
	},
	"cudaGetDeviceProperties":{
		"id": "cudaGetDeviceProperties",
		"value": "<p><b><code>__host__cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int device )</code></b></p>",
		"description": "<p>Returns information about the compute-device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>prop</code><br>&emsp;- Properties for the specified device<br><code>device</code><br>&emsp;- Device number to get properties for<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g1bf9d625a931d657e08db2b4391170f0\">Full Description</a>"
	},
	"cudaInitDevice":{
		"id": "cudaInitDevice",
		"value": "<p><b><code>__host__cudaError_t cudaInitDevice ( int device, unsigned int deviceFlags, unsigned int flags )</code></b></p>",
		"description": "<p>Initialize device to be used for GPU executions.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Device on which the runtime will initialize itself.<br><code>deviceFlags</code><br>&emsp;- Parameters for device operation.<br><code>flags</code><br>&emsp;- Flags for controlling the device initialization.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1gac04a5d82168676b20121ca870919419\">Full Description</a>"
	},
	"cudaIpcCloseMemHandle":{
		"id": "cudaIpcCloseMemHandle",
		"value": "<p><b><code>__host__cudaError_t cudaIpcCloseMemHandle ( void* devPtr )</code></b></p>",
		"description": "<p>Attempts to close memory mapped with cudaIpcOpenMemHandle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Device pointer returned by cudaIpcOpenMemHandle<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorMapBufferObjectFailed, cudaErrorNotSupported, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g02bb3632b5d223db6acae5f8744e2c91\">Full Description</a>"
	},
	"cudaIpcGetEventHandle":{
		"id": "cudaIpcGetEventHandle",
		"value": "<p><b><code>__host__cudaError_t cudaIpcGetEventHandle ( cudaIpcEventHandle_t* handle, cudaEvent_t event )</code></b></p>",
		"description": "<p>Gets an interprocess handle for a previously allocated event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>handle</code><br>&emsp;- Pointer to a user allocated cudaIpcEventHandle in which to return the opaque event handle<br><code>event</code><br>&emsp;- Event allocated with cudaEventInterprocess and cudaEventDisableTiming flags.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorMemoryAllocation, cudaErrorMapBufferObjectFailed, cudaErrorNotSupported, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g89a3abe1e9a11d08c665176669109784\">Full Description</a>"
	},
	"cudaIpcGetMemHandle":{
		"id": "cudaIpcGetMemHandle",
		"value": "<p><b><code>__host__cudaError_t cudaIpcGetMemHandle ( cudaIpcMemHandle_t* handle, void* devPtr )</code></b></p>",
		"description": "<p>Gets an interprocess memory handle for an existing device memory allocation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>handle</code><br>&emsp;- Pointer to user allocated cudaIpcMemHandle to return the handle in.<br><code>devPtr</code><br>&emsp;- Base pointer to previously allocated device memory<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorMemoryAllocation, cudaErrorMapBufferObjectFailed, cudaErrorNotSupported, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g8a37f7dfafaca652391d0758b3667539\">Full Description</a>"
	},
	"cudaIpcOpenEventHandle":{
		"id": "cudaIpcOpenEventHandle",
		"value": "<p><b><code>__host__cudaError_t cudaIpcOpenEventHandle ( cudaEvent_t* event, cudaIpcEventHandle_t handle )</code></b></p>",
		"description": "<p>Opens an interprocess event handle for use in the current process.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>event</code><br>&emsp;- Returns the imported event<br><code>handle</code><br>&emsp;- Interprocess handle to open<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorMapBufferObjectFailed, cudaErrorNotSupported, cudaErrorInvalidValue, cudaErrorDeviceUninitialized<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g9691446ab0aec1d6e528357387ed87b2\">Full Description</a>"
	},
	"cudaIpcOpenMemHandle":{
		"id": "cudaIpcOpenMemHandle",
		"value": "<p><b><code>__host__cudaError_t cudaIpcOpenMemHandle ( void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags )</code></b></p>",
		"description": "<p>Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Returned device pointer<br><code>handle</code><br>&emsp;- cudaIpcMemHandle to open<br><code>flags</code><br>&emsp;- Flags for this operation. Must be specified as cudaIpcMemLazyEnablePeerAccess<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorMapBufferObjectFailed, cudaErrorInvalidResourceHandle, cudaErrorDeviceUninitialized, cudaErrorTooManyPeers, cudaErrorNotSupported, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g01050a29fefde385b1042081ada4cde9\">Full Description</a>"
	},
	"cudaSetDevice":{
		"id": "cudaSetDevice",
		"value": "<p><b><code>__host__cudaError_t cudaSetDevice ( int device )</code></b></p>",
		"description": "<p>Set device to be used for GPU executions.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Device on which the active host thread should execute the device code.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorDeviceUnavailable,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g159587909ffa0791bbe4b40187a4c6bb\">Full Description</a>"
	},
	"cudaSetDeviceFlags":{
		"id": "cudaSetDeviceFlags",
		"value": "<p><b><code>__host__cudaError_t cudaSetDeviceFlags ( unsigned int flags )</code></b></p>",
		"description": "<p>Sets flags to be used for device executions.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>flags</code><br>&emsp;- Parameters for device operation<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g69e73c7dda3fc05306ae7c811a690fac\">Full Description</a>"
	},
	"cudaSetValidDevices":{
		"id": "cudaSetValidDevices",
		"value": "<p><b><code>__host__cudaError_t cudaSetValidDevices ( int* device_arr, int len )</code></b></p>",
		"description": "<p>Set a list of devices that can be used for CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device_arr</code><br>&emsp;- List of devices to try<br><code>len</code><br>&emsp;- Number of devices in specified list<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DEVICE.html#group__CUDART__DEVICE_1g1b9336c70f2299405f67a4f8496d7cfe\">Full Description</a>"
	},
	"cudaThreadExit":{
		"id": "cudaThreadExit",
		"value": "<p><b><code>__host__cudaError_t cudaThreadExit ( void )</code></b></p>",
		"description": "<p>Exit and clean up from CUDA launches.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__THREAD__DEPRECATED.html#group__CUDART__THREAD__DEPRECATED_1g4c6ed00b3df5828ac4c8fa707d7378b5\">Full Description</a>"
	},
	"cudaThreadGetCacheConfig":{
		"id": "cudaThreadGetCacheConfig",
		"value": "<p><b><code>__host__cudaError_t cudaThreadGetCacheConfig ( cudaFuncCache ** pCacheConfig )</code></b></p>",
		"description": "<p>Returns the preferred cache configuration for the current device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCacheConfig</code><br>&emsp;- Returned cache configuration<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__THREAD__DEPRECATED.html#group__CUDART__THREAD__DEPRECATED_1g6c0354cf06af1854f3d267e142bc6629\">Full Description</a>"
	},
	"cudaThreadGetLimit":{
		"id": "cudaThreadGetLimit",
		"value": "<p><b><code>__host__cudaError_t cudaThreadGetLimit ( size_t* pValue, cudaLimit limit )</code></b></p>",
		"description": "<p>Returns resource limits.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pValue</code><br>&emsp;- Returned size in bytes of limit<br><code>limit</code><br>&emsp;- Limit to query<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorUnsupportedLimit, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__THREAD__DEPRECATED.html#group__CUDART__THREAD__DEPRECATED_1ga9e5d4114a4934ceae22f095b2a516dc\">Full Description</a>"
	},
	"cudaThreadSetCacheConfig":{
		"id": "cudaThreadSetCacheConfig",
		"value": "<p><b><code>__host__cudaError_t cudaThreadSetCacheConfig ( cudaFuncCache cacheConfig )</code></b></p>",
		"description": "<p>Sets the preferred cache configuration for the current device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>cacheConfig</code><br>&emsp;- Requested cache configuration<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__THREAD__DEPRECATED.html#group__CUDART__THREAD__DEPRECATED_1g4350b189303ae990ba42009f15fbf6e9\">Full Description</a>"
	},
	"cudaThreadSetLimit":{
		"id": "cudaThreadSetLimit",
		"value": "<p><b><code>__host__cudaError_t cudaThreadSetLimit ( cudaLimit limit, size_t value )</code></b></p>",
		"description": "<p>Set resource limits.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>limit</code><br>&emsp;- Limit to set<br><code>value</code><br>&emsp;- Size in bytes of limit<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorUnsupportedLimit, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__THREAD__DEPRECATED.html#group__CUDART__THREAD__DEPRECATED_1g4cfef9e7d4045d8d682ed464f0e1c2da\">Full Description</a>"
	},
	"cudaThreadSynchronize":{
		"id": "cudaThreadSynchronize",
		"value": "<p><b><code>__host__cudaError_t cudaThreadSynchronize ( void )</code></b></p>",
		"description": "<p>Wait for compute device to finish.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__THREAD__DEPRECATED.html#group__CUDART__THREAD__DEPRECATED_1g86ba4d3d51221f18a9a13663e6105fc1\">Full Description</a>"
	},
	"cudaGetErrorName":{
		"id": "cudaGetErrorName",
		"value": "<p><b><code>__host____device__constchar* cudaGetErrorName ( cudaError_t error )</code></b></p>",
		"description": "<p>Returns the string representation of an error code enum name.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>error</code><br>&emsp;- Error code to convert to string<br></p><p><b>Returns</b><br>char* pointer to a NULL-terminated string<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__ERROR.html#group__CUDART__ERROR_1gb3de7da2f23736878270026dcfc70075\">Full Description</a>"
	},
	"cudaGetErrorString":{
		"id": "cudaGetErrorString",
		"value": "<p><b><code>__host____device__constchar* cudaGetErrorString ( cudaError_t error )</code></b></p>",
		"description": "<p>Returns the description string for an error code.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>error</code><br>&emsp;- Error code to convert to string<br></p><p><b>Returns</b><br>char* pointer to a NULL-terminated string<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__ERROR.html#group__CUDART__ERROR_1g4bc9e35a618dfd0877c29c8ee45148f1\">Full Description</a>"
	},
	"cudaGetLastError":{
		"id": "cudaGetLastError",
		"value": "<p><b><code>__host____device__cudaError_t cudaGetLastError ( void )</code></b></p>",
		"description": "<p>Returns the last error from a runtime call.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorMissingConfiguration, cudaErrorMemoryAllocation, cudaErrorInitializationError, cudaErrorLaunchFailure, cudaErrorLaunchTimeout, cudaErrorLaunchOutOfResources, cudaErrorInvalidDeviceFunction, cudaErrorInvalidConfiguration, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidSymbol, cudaErrorUnmapBufferObjectFailed, cudaErrorInvalidDevicePointer, cudaErrorInvalidTexture, cudaErrorInvalidTextureBinding, cudaErrorInvalidChannelDescriptor, cudaErrorInvalidMemcpyDirection, cudaErrorInvalidFilterSetting, cudaErrorInvalidNormSetting, cudaErrorUnknown, cudaErrorInvalidResourceHandle, cudaErrorInsufficientDriver, cudaErrorNoDevice, cudaErrorSetOnActiveProcess, cudaErrorStartupFailure, cudaErrorInvalidPtx, cudaErrorUnsupportedPtxVersion, cudaErrorNoKernelImageForDevice, cudaErrorJitCompilerNotFound, cudaErrorJitCompilationDisabled<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__ERROR.html#group__CUDART__ERROR_1g3529f94cb530a83a76613616782bd233\">Full Description</a>"
	},
	"cudaPeekAtLastError":{
		"id": "cudaPeekAtLastError",
		"value": "<p><b><code>__host____device__cudaError_t cudaPeekAtLastError ( void )</code></b></p>",
		"description": "<p>Returns the last error from a runtime call.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorMissingConfiguration, cudaErrorMemoryAllocation, cudaErrorInitializationError, cudaErrorLaunchFailure, cudaErrorLaunchTimeout, cudaErrorLaunchOutOfResources, cudaErrorInvalidDeviceFunction, cudaErrorInvalidConfiguration, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidSymbol, cudaErrorUnmapBufferObjectFailed, cudaErrorInvalidDevicePointer, cudaErrorInvalidTexture, cudaErrorInvalidTextureBinding, cudaErrorInvalidChannelDescriptor, cudaErrorInvalidMemcpyDirection, cudaErrorInvalidFilterSetting, cudaErrorInvalidNormSetting, cudaErrorUnknown, cudaErrorInvalidResourceHandle, cudaErrorInsufficientDriver, cudaErrorNoDevice, cudaErrorSetOnActiveProcess, cudaErrorStartupFailure, cudaErrorInvalidPtx, cudaErrorUnsupportedPtxVersion, cudaErrorNoKernelImageForDevice, cudaErrorJitCompilerNotFound, cudaErrorJitCompilationDisabled<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__ERROR.html#group__CUDART__ERROR_1ge9f0596369c32aa43875c17c78a8fe41\">Full Description</a>"
	},
	"cudaStreamCallback_t":{
		"id": "cudaStreamCallback_t",
		"value": "<p><b><code>typedefvoid(CUDART_CB* cudaStreamCallback_t )( cudaStream_t stream, cudaError_t status, void* userData )</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g11c9452045db759adb77a40d7c98f648\">Full Description</a>"
	},
	"cudaCtxResetPersistingL2Cache":{
		"id": "cudaCtxResetPersistingL2Cache",
		"value": "<p><b><code>__host__cudaError_t cudaCtxResetPersistingL2Cache ( void )</code></b></p>",
		"description": "<p>Resets all persisting lines in cache to normal status.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g37ef93f921871331188f90fb2eb20e5e\">Full Description</a>"
	},
	"cudaStreamAddCallback":{
		"id": "cudaStreamAddCallback",
		"value": "<p><b><code>__host__cudaError_t cudaStreamAddCallback ( cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int flags )</code></b></p>",
		"description": "<p>Add a callback to a compute stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- Stream to add callback to<br><code>callback</code><br>&emsp;- The function to call once preceding stream operations are complete<br><code>userData</code><br>&emsp;- User specified data to be passed to the callback function<br><code>flags</code><br>&emsp;- Reserved for future use, must be 0<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorInvalidValue, cudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g74aa9f4b1c2f12d994bf13876a5a2498\">Full Description</a>"
	},
	"cudaStreamAttachMemAsync":{
		"id": "cudaStreamAttachMemAsync",
		"value": "<p><b><code>__host__cudaError_t cudaStreamAttachMemAsync ( cudaStream_t stream, void* devPtr, size_t length = 0, unsigned int flags = cudaMemAttachSingle )</code></b></p>",
		"description": "<p>Attach memory to a stream asynchronously.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- Stream in which to enqueue the attach operation<br><code>devPtr</code><br>&emsp;- Pointer to memory (must be a pointer to managed memory or to a valid host-accessible region of system-allocated memory)<br><code>length</code><br>&emsp;- Length of memory (defaults to zero)<br><code>flags</code><br>&emsp;- Must be one of cudaMemAttachGlobal, cudaMemAttachHost or cudaMemAttachSingle (defaults to cudaMemAttachSingle)<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNotReady, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1gc3bb7ccb325219073183a629d7c2756a\">Full Description</a>"
	},
	"cudaStreamBeginCapture":{
		"id": "cudaStreamBeginCapture",
		"value": "<p><b><code>__host__cudaError_t cudaStreamBeginCapture ( cudaStream_t stream, cudaStreamCaptureMode mode )</code></b></p>",
		"description": "<p>Begins graph capture on a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- Stream in which to initiate capture<br><code>mode</code><br>&emsp;- Controls the interaction of this capture sequence with other API calls that are potentially unsafe. For more details see cudaThreadExchangeStreamCaptureMode.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g793d7d4e474388ddfda531603dc34aa3\">Full Description</a>"
	},
	"cudaStreamCopyAttributes":{
		"id": "cudaStreamCopyAttributes",
		"value": "<p><b><code>__host__cudaError_t cudaStreamCopyAttributes ( cudaStream_t dst, cudaStream_t src )</code></b></p>",
		"description": "<p>Copies attributes from source stream to destination stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;Destination stream<br><code>src</code><br>&emsp;Source stream For attributes see cudaStreamAttrID<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g3bc9fe4af9b3eef5ad453c92e237da1c\">Full Description</a>"
	},
	"cudaStreamCreate":{
		"id": "cudaStreamCreate",
		"value": "<p><b><code>__host__cudaError_t cudaStreamCreate ( cudaStream_t* pStream )</code></b></p>",
		"description": "<p>Create an asynchronous stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pStream</code><br>&emsp;- Pointer to new stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g6a3c4b819e6a994c26d0c4824a4c80da\">Full Description</a>"
	},
	"cudaStreamCreateWithFlags":{
		"id": "cudaStreamCreateWithFlags",
		"value": "<p><b><code>__host____device__cudaError_t cudaStreamCreateWithFlags ( cudaStream_t* pStream, unsigned int flags )</code></b></p>",
		"description": "<p>Create an asynchronous stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pStream</code><br>&emsp;- Pointer to new stream identifier<br><code>flags</code><br>&emsp;- Parameters for stream creation<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1gb1e32aff9f59119e4d0a9858991c4ad3\">Full Description</a>"
	},
	"cudaStreamCreateWithPriority":{
		"id": "cudaStreamCreateWithPriority",
		"value": "<p><b><code>__host__cudaError_t cudaStreamCreateWithPriority ( cudaStream_t* pStream, unsigned int flags, int priority )</code></b></p>",
		"description": "<p>Create an asynchronous stream with the specified priority.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pStream</code><br>&emsp;- Pointer to new stream identifier<br><code>flags</code><br>&emsp;- Flags for stream creation. See cudaStreamCreateWithFlags for a list of valid flags that can be passed<br><code>priority</code><br>&emsp;- Priority of the stream. Lower numbers represent higher priorities. See cudaDeviceGetStreamPriorityRange for more information about the meaningful stream priorities that can be passed.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1ge2be9e9858849bf62ba4a8b66d1c3540\">Full Description</a>"
	},
	"cudaStreamDestroy":{
		"id": "cudaStreamDestroy",
		"value": "<p><b><code>__host____device__cudaError_t cudaStreamDestroy ( cudaStream_t stream )</code></b></p>",
		"description": "<p>Destroys and cleans up an asynchronous stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1gfda584f1788ca983cb21c5f4d2033a62\">Full Description</a>"
	},
	"cudaStreamEndCapture":{
		"id": "cudaStreamEndCapture",
		"value": "<p><b><code>__host__cudaError_t cudaStreamEndCapture ( cudaStream_t stream, cudaGraph_t* pGraph )</code></b></p>",
		"description": "<p>Ends capture on a stream, returning the captured graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- Stream to query<br><code>pGraph</code><br>&emsp;- The captured graph<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorStreamCaptureWrongThread<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1gf5a0efebc818054ceecd1e3e5e76d93e\">Full Description</a>"
	},
	"cudaStreamGetAttribute":{
		"id": "cudaStreamGetAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaStreamGetAttribute ( cudaStream_t hStream, cudaStreamAttrID attr, cudaStreamAttrValue* value_out )</code></b></p>",
		"description": "<p>Queries stream attribute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br><code>attr</code><br><code>value_out</code><br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g0842be3b57a279a9c20ddcfb7c5419b9\">Full Description</a>"
	},
	"cudaStreamGetCaptureInfo":{
		"id": "cudaStreamGetCaptureInfo",
		"value": "<p><b><code>__host__cudaError_t cudaStreamGetCaptureInfo ( cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 )</code></b></p>",
		"description": "<p>Query a stream's capture state.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- The stream to query<br><code>captureStatus_out</code><br>&emsp;- Location to return the capture status of the stream; required<br><code>id_out</code><br>&emsp;- Optional location to return an id for the capture sequence, which is unique over the lifetime of the process<br><code>graph_out</code><br>&emsp;- Optional location to return the graph being captured into. All operations other than destroy and node removal are permitted on the graph while the capture sequence is in progress. This API does not transfer ownership of the graph, which is transferred or destroyed at cudaStreamEndCapture. Note that the graph handle may be invalidated before end of capture for certain errors. Nodes that are or become unreachable from the original stream at cudaStreamEndCapture due to direct actions on the graph do not trigger cudaErrorStreamCaptureUnjoined.<br><code>dependencies_out</code><br>&emsp;- Optional location to store a pointer to an array of nodes. The next node to be captured in the stream will depend on this set of nodes, absent operations such as event wait which modify this set. The array pointer is valid until the next API call which operates on the stream or until end of capture. The node handles may be copied out and are valid until they or the graph is destroyed. The driver-owned array may also be passed directly to APIs that operate on the graph (not the stream) without copying.<br><code>numDependencies_out</code><br>&emsp;- Optional location to store the size of the array returned in dependencies_out.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorStreamCaptureImplicit<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g150be2211d73d782bc34c497ddb06f2f\">Full Description</a>"
	},
	"cudaStreamGetFlags":{
		"id": "cudaStreamGetFlags",
		"value": "<p><b><code>__host__cudaError_t cudaStreamGetFlags ( cudaStream_t hStream, unsigned int* flags )</code></b></p>",
		"description": "<p>Query the flags of a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Handle to the stream to be queried<br><code>flags</code><br>&emsp;- Pointer to an unsigned integer in which the stream's flags are returned<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1ga7f311f88126d751b9a7d3302ad6d0f8\">Full Description</a>"
	},
	"cudaStreamGetId":{
		"id": "cudaStreamGetId",
		"value": "<p><b><code>__host__cudaError_t cudaStreamGetId ( cudaStream_t hStream, unsigned long long* streamId )</code></b></p>",
		"description": "<p>Query the Id of a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Handle to the stream to be queried<br><code>streamId</code><br>&emsp;- Pointer to an unsigned long long in which the stream Id is returned<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g5799ae8dd744e561dfdeda02c53e82df\">Full Description</a>"
	},
	"cudaStreamGetPriority":{
		"id": "cudaStreamGetPriority",
		"value": "<p><b><code>__host__cudaError_t cudaStreamGetPriority ( cudaStream_t hStream, int* priority )</code></b></p>",
		"description": "<p>Query the priority of a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Handle to the stream to be queried<br><code>priority</code><br>&emsp;- Pointer to a signed integer in which the stream's priority is returned<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g192bb727d15c4407c119747de7d198a6\">Full Description</a>"
	},
	"cudaStreamIsCapturing":{
		"id": "cudaStreamIsCapturing",
		"value": "<p><b><code>__host__cudaError_t cudaStreamIsCapturing ( cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus )</code></b></p>",
		"description": "<p>Returns a stream's capture status.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- Stream to query<br><code>pCaptureStatus</code><br>&emsp;- Returns the stream's capture status<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorStreamCaptureImplicit<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1ge564e8434c67d716367931c4bc7db1cc\">Full Description</a>"
	},
	"cudaStreamQuery":{
		"id": "cudaStreamQuery",
		"value": "<p><b><code>__host__cudaError_t cudaStreamQuery ( cudaStream_t stream )</code></b></p>",
		"description": "<p>Queries an asynchronous stream for completion status.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNotReady, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g2021adeb17905c7ec2a3c1bf125c5435\">Full Description</a>"
	},
	"cudaStreamSetAttribute":{
		"id": "cudaStreamSetAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaStreamSetAttribute ( cudaStream_t hStream, cudaStreamAttrID attr, const cudaStreamAttrValue* value )</code></b></p>",
		"description": "<p>Sets stream attribute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br><code>attr</code><br><code>value</code><br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g0d4f304ced0c3d4786c77d313bebef80\">Full Description</a>"
	},
	"cudaStreamSynchronize":{
		"id": "cudaStreamSynchronize",
		"value": "<p><b><code>__host__cudaError_t cudaStreamSynchronize ( cudaStream_t stream )</code></b></p>",
		"description": "<p>Waits for stream tasks to complete.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g82b5784f674c17c6df64affe618bf45e\">Full Description</a>"
	},
	"cudaStreamUpdateCaptureDependencies":{
		"id": "cudaStreamUpdateCaptureDependencies",
		"value": "<p><b><code>__host__cudaError_t cudaStreamUpdateCaptureDependencies ( cudaStream_t stream, cudaGraphNode_t* dependencies, size_t numDependencies, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Update the set of dependencies in a capturing stream (11.3+).</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorIllegalState<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g6b482516fc73a65f0496088f3f39dc47\">Full Description</a>"
	},
	"cudaStreamWaitEvent":{
		"id": "cudaStreamWaitEvent",
		"value": "<p><b><code>__host____device__cudaError_t cudaStreamWaitEvent ( cudaStream_t stream, cudaEvent_t event, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Make a compute stream wait on an event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;- Stream to wait<br><code>event</code><br>&emsp;- Event to wait on<br><code>flags</code><br>&emsp;- Parameters for the operation(See above)<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g7840e3984799941a61839de40413d1d9\">Full Description</a>"
	},
	"cudaThreadExchangeStreamCaptureMode":{
		"id": "cudaThreadExchangeStreamCaptureMode",
		"value": "<p><b><code>__host__cudaError_t cudaThreadExchangeStreamCaptureMode ( cudaStreamCaptureMode ** mode )</code></b></p>",
		"description": "<p>Swaps the stream capture interaction mode for a thread.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>mode</code><br>&emsp;- Pointer to mode value to swap with the current mode<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__STREAM.html#group__CUDART__STREAM_1g9d0535d93a214cbf126835257b16ba85\">Full Description</a>"
	},
	"cudaEventCreate":{
		"id": "cudaEventCreate",
		"value": "<p><b><code>__host__cudaError_t cudaEventCreate ( cudaEvent_t* event )</code></b></p>",
		"description": "<p>Creates an event object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>event</code><br>&emsp;- Newly created event<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorLaunchFailure, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EVENT.html#group__CUDART__EVENT_1g7c581e3613a2110ba4d4e7fd5c7da418\">Full Description</a>"
	},
	"cudaEventCreateWithFlags":{
		"id": "cudaEventCreateWithFlags",
		"value": "<p><b><code>__host____device__cudaError_t cudaEventCreateWithFlags ( cudaEvent_t* event, unsigned int flags )</code></b></p>",
		"description": "<p>Creates an event object with the specified flags.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>event</code><br>&emsp;- Newly created event<br><code>flags</code><br>&emsp;- Flags for new event<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorLaunchFailure, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EVENT.html#group__CUDART__EVENT_1g7b317e07ff385d85aa656204b971a042\">Full Description</a>"
	},
	"cudaEventDestroy":{
		"id": "cudaEventDestroy",
		"value": "<p><b><code>__host____device__cudaError_t cudaEventDestroy ( cudaEvent_t event )</code></b></p>",
		"description": "<p>Destroys an event object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>event</code><br>&emsp;- Event to destroy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorLaunchFailure<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EVENT.html#group__CUDART__EVENT_1g2cb6baa0830a1cd0bd957bfd8705045b\">Full Description</a>"
	},
	"cudaEventElapsedTime":{
		"id": "cudaEventElapsedTime",
		"value": "<p><b><code>__host__cudaError_t cudaEventElapsedTime ( float* ms, cudaEvent_t start, cudaEvent_t end )</code></b></p>",
		"description": "<p>Computes the elapsed time between events.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ms</code><br>&emsp;- Time between start and end in ms<br><code>start</code><br>&emsp;- Starting event<br><code>end</code><br>&emsp;- Ending event<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNotReady, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorLaunchFailure, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EVENT.html#group__CUDART__EVENT_1g40159125411db92c835edb46a0989cd6\">Full Description</a>"
	},
	"cudaEventQuery":{
		"id": "cudaEventQuery",
		"value": "<p><b><code>__host__cudaError_t cudaEventQuery ( cudaEvent_t event )</code></b></p>",
		"description": "<p>Queries an event's status.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>event</code><br>&emsp;- Event to query<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNotReady, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorLaunchFailure<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EVENT.html#group__CUDART__EVENT_1g2bf738909b4a059023537eaa29d8a5b7\">Full Description</a>"
	},
	"cudaEventRecord":{
		"id": "cudaEventRecord",
		"value": "<p><b><code>__host____device__cudaError_t cudaEventRecord ( cudaEvent_t event, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Records an event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>event</code><br>&emsp;- Event to record<br><code>stream</code><br>&emsp;- Stream in which to record event<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorLaunchFailure<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EVENT.html#group__CUDART__EVENT_1gf4fcb74343aa689f4159791967868446\">Full Description</a>"
	},
	"cudaEventRecordWithFlags":{
		"id": "cudaEventRecordWithFlags",
		"value": "<p><b><code>__host__cudaError_t cudaEventRecordWithFlags ( cudaEvent_t event, cudaStream_t stream = 0, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Records an event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>event</code><br>&emsp;- Event to record<br><code>stream</code><br>&emsp;- Stream in which to record event<br><code>flags</code><br>&emsp;- Parameters for the operation(See above)<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorLaunchFailure<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EVENT.html#group__CUDART__EVENT_1g186dc8db3fea7d354a0aa708aa04f62f\">Full Description</a>"
	},
	"cudaEventSynchronize":{
		"id": "cudaEventSynchronize",
		"value": "<p><b><code>__host__cudaError_t cudaEventSynchronize ( cudaEvent_t event )</code></b></p>",
		"description": "<p>Waits for an event to complete.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>event</code><br>&emsp;- Event to wait for<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorLaunchFailure<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EVENT.html#group__CUDART__EVENT_1g949aa42b30ae9e622f6ba0787129ff22\">Full Description</a>"
	},
	"cudaDestroyExternalMemory":{
		"id": "cudaDestroyExternalMemory",
		"value": "<p><b><code>__host__cudaError_t cudaDestroyExternalMemory ( cudaExternalMemory_t extMem )</code></b></p>",
		"description": "<p>Destroys an external memory object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extMem</code><br>&emsp;- External memory object to be destroyed<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXTRES__INTEROP.html#group__CUDART__EXTRES__INTEROP_1g819b1377357312acb3135eb9393a0bee\">Full Description</a>"
	},
	"cudaDestroyExternalSemaphore":{
		"id": "cudaDestroyExternalSemaphore",
		"value": "<p><b><code>__host__cudaError_t cudaDestroyExternalSemaphore ( cudaExternalSemaphore_t extSem )</code></b></p>",
		"description": "<p>Destroys an external semaphore.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extSem</code><br>&emsp;- External semaphore to be destroyed<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXTRES__INTEROP.html#group__CUDART__EXTRES__INTEROP_1gd596384c606982e5e5a8b9a1e4dcec15\">Full Description</a>"
	},
	"cudaExternalMemoryGetMappedBuffer":{
		"id": "cudaExternalMemoryGetMappedBuffer",
		"value": "<p><b><code>__host__cudaError_t cudaExternalMemoryGetMappedBuffer ( void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc )</code></b></p>",
		"description": "<p>Maps a buffer onto an imported memory object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Returned device pointer to buffer<br><code>extMem</code><br>&emsp;- Handle to external memory object<br><code>bufferDesc</code><br>&emsp;- Buffer descriptor<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXTRES__INTEROP.html#group__CUDART__EXTRES__INTEROP_1g6f1cd4a939374a83267bb580a0ea07ae\">Full Description</a>"
	},
	"cudaExternalMemoryGetMappedMipmappedArray":{
		"id": "cudaExternalMemoryGetMappedMipmappedArray",
		"value": "<p><b><code>__host__cudaError_t cudaExternalMemoryGetMappedMipmappedArray ( cudaMipmappedArray_t* mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc )</code></b></p>",
		"description": "<p>Maps a CUDA mipmapped array onto an external memory object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>mipmap</code><br>&emsp;- Returned CUDA mipmapped array<br><code>extMem</code><br>&emsp;- Handle to external memory object<br><code>mipmapDesc</code><br>&emsp;- CUDA array descriptor<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXTRES__INTEROP.html#group__CUDART__EXTRES__INTEROP_1g091a4383a816eb7127aa5c7a7c32cef7\">Full Description</a>"
	},
	"cudaImportExternalMemory":{
		"id": "cudaImportExternalMemory",
		"value": "<p><b><code>__host__cudaError_t cudaImportExternalMemory ( cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc )</code></b></p>",
		"description": "<p>Imports an external memory object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extMem_out</code><br>&emsp;- Returned handle to an external memory object<br><code>memHandleDesc</code><br>&emsp;- Memory import handle descriptor<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorOperatingSystem<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXTRES__INTEROP.html#group__CUDART__EXTRES__INTEROP_1g0012448b208196bc60c2307eaeaa3ff7\">Full Description</a>"
	},
	"cudaImportExternalSemaphore":{
		"id": "cudaImportExternalSemaphore",
		"value": "<p><b><code>__host__cudaError_t cudaImportExternalSemaphore ( cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc )</code></b></p>",
		"description": "<p>Imports an external semaphore.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extSem_out</code><br>&emsp;- Returned handle to an external semaphore<br><code>semHandleDesc</code><br>&emsp;- Semaphore import handle descriptor<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorOperatingSystem<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXTRES__INTEROP.html#group__CUDART__EXTRES__INTEROP_1g64f7155c1fc4459a746db31b4aae263b\">Full Description</a>"
	},
	"cudaSignalExternalSemaphoresAsync":{
		"id": "cudaSignalExternalSemaphoresAsync",
		"value": "<p><b><code>__host__cudaError_t cudaSignalExternalSemaphoresAsync ( const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Signals a set of external semaphore objects.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extSemArray</code><br>&emsp;- Set of external semaphores to be signaled<br><code>paramsArray</code><br>&emsp;- Array of semaphore parameters<br><code>numExtSems</code><br>&emsp;- Number of semaphores to signal<br><code>stream</code><br>&emsp;- Stream to enqueue the signal operations in<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXTRES__INTEROP.html#group__CUDART__EXTRES__INTEROP_1gb0806d36d4bc72b82afcf9315f11330c\">Full Description</a>"
	},
	"cudaWaitExternalSemaphoresAsync":{
		"id": "cudaWaitExternalSemaphoresAsync",
		"value": "<p><b><code>__host__cudaError_t cudaWaitExternalSemaphoresAsync ( const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int numExtSems, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Waits on a set of external semaphore objects.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extSemArray</code><br>&emsp;- External semaphores to be waited on<br><code>paramsArray</code><br>&emsp;- Array of semaphore parameters<br><code>numExtSems</code><br>&emsp;- Number of semaphores to wait on<br><code>stream</code><br>&emsp;- Stream to enqueue the wait operations in<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandlecudaErrorTimeout<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXTRES__INTEROP.html#group__CUDART__EXTRES__INTEROP_1g52ecbdf57e75f0fde9fa44a2f9532c2d\">Full Description</a>"
	},
	"cudaFuncGetAttributes":{
		"id": "cudaFuncGetAttributes",
		"value": "<p><b><code>__host____device__cudaError_t cudaFuncGetAttributes ( cudaFuncAttributes* attr, const void* func )</code></b></p>",
		"description": "<p>Find out attributes for a given function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>attr</code><br>&emsp;- Return pointer to function's attributes<br><code>func</code><br>&emsp;- Device function symbol<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g19b1696533069c03f646e2ce2beacc00\">Full Description</a>"
	},
	"cudaFuncSetAttribute":{
		"id": "cudaFuncSetAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaFuncSetAttribute ( const void* func, cudaFuncAttribute attr, int value )</code></b></p>",
		"description": "<p>Set attributes for a given function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>func</code><br>&emsp;- Function to get attributes of<br><code>attr</code><br>&emsp;- Attribute to set<br><code>value</code><br>&emsp;- Value to set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g317e77d2657abf915fd9ed03e75f3eb0\">Full Description</a>"
	},
	"cudaFuncSetCacheConfig":{
		"id": "cudaFuncSetCacheConfig",
		"value": "<p><b><code>__host__cudaError_t cudaFuncSetCacheConfig ( const void* func, cudaFuncCache cacheConfig )</code></b></p>",
		"description": "<p>Sets the preferred cache configuration for a device function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>func</code><br>&emsp;- Device function symbol<br><code>cacheConfig</code><br>&emsp;- Requested cache configuration<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g6699ca1943ac2655effa0d571b2f4f15\">Full Description</a>"
	},
	"cudaFuncSetSharedMemConfig":{
		"id": "cudaFuncSetSharedMemConfig",
		"value": "<p><b><code>__host__cudaError_t cudaFuncSetSharedMemConfig ( const void* func, cudaSharedMemConfig config )</code></b></p>",
		"description": "<p>Sets the shared memory configuration for a device function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>func</code><br>&emsp;- Device function symbol<br><code>config</code><br>&emsp;- Requested shared memory configuration<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g3ef735b45b7549e936a60cb084740754\">Full Description</a>"
	},
	"cudaGetParameterBuffer":{
		"id": "cudaGetParameterBuffer",
		"value": "<p><b><code>__device__void* cudaGetParameterBuffer ( size_t alignment, size_t size )</code></b></p>",
		"description": "<p>Obtains a parameter buffer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>alignment</code><br>&emsp;- Specifies alignment requirement of the parameter buffer<br><code>size</code><br>&emsp;- Specifies size requirement in bytes<br></p><p><b>Returns</b><br>Returns pointer to the allocated parameterBuffer<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1ge401490a88262d4e8ecd99ee08a88c43\">Full Description</a>"
	},
	"cudaGetParameterBufferV2":{
		"id": "cudaGetParameterBufferV2",
		"value": "<p><b><code>__device__void* cudaGetParameterBufferV2 ( void* func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize )</code></b></p>",
		"description": "<p>Launches a specified kernel.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>func</code><br>&emsp;- Pointer to the kernel to be launched<br><code>gridDimension</code><br>&emsp;- Specifies grid dimensions<br><code>blockDimension</code><br>&emsp;- Specifies block dimensions<br><code>sharedMemSize</code><br>&emsp;- Specifies size of shared memory<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorLaunchMaxDepthExceeded, cudaErrorInvalidConfiguration, cudaErrorStartupFailure, cudaErrorLaunchPendingCountExceeded, cudaErrorLaunchOutOfResources<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g4061af886cac9643d2354888e22d506a\">Full Description</a>"
	},
	"cudaGridDependencySynchronize":{
		"id": "cudaGridDependencySynchronize",
		"value": "<p><b><code>__device__void cudaGridDependencySynchronize ( void )</code></b></p>",
		"description": "<p>Programmatic grid dependency synchronization.</p>",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g9057f99234a8311c4c5d426cd501d99d\">Full Description</a>"
	},
	"cudaLaunchCooperativeKernel":{
		"id": "cudaLaunchCooperativeKernel",
		"value": "<p><b><code>__host__cudaError_t cudaLaunchCooperativeKernel ( const void* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem, cudaStream_t stream )</code></b></p>",
		"description": "<p>Launches a device function where thread blocks can cooperate and synchronize as they execute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>func</code><br>&emsp;- Device function symbol<br><code>gridDim</code><br>&emsp;- Grid dimentions<br><code>blockDim</code><br>&emsp;- Block dimentions<br><code>args</code><br>&emsp;- Arguments<br><code>sharedMem</code><br>&emsp;- Shared memory<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction, cudaErrorInvalidConfiguration, cudaErrorLaunchFailure, cudaErrorLaunchTimeout, cudaErrorLaunchOutOfResources, cudaErrorCooperativeLaunchTooLarge, cudaErrorSharedObjectInitFailed<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g504b94170f83285c71031be6d5d15f73\">Full Description</a>"
	},
	"cudaLaunchCooperativeKernelMultiDevice":{
		"id": "cudaLaunchCooperativeKernelMultiDevice",
		"value": "<p><b><code>__host__cudaError_t cudaLaunchCooperativeKernelMultiDevice ( cudaLaunchParams* launchParamsList, unsigned int numDevices, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Launches device functions on multiple devices where thread blocks can cooperate and synchronize as they execute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>launchParamsList</code><br>&emsp;- List of launch parameters, one per device<br><code>numDevices</code><br>&emsp;- Size of the launchParamsList array<br><code>flags</code><br>&emsp;- Flags to control launch behavior<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction, cudaErrorInvalidConfiguration, cudaErrorLaunchFailure, cudaErrorLaunchTimeout, cudaErrorLaunchOutOfResources, cudaErrorCooperativeLaunchTooLarge, cudaErrorSharedObjectInitFailed<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g63685d849da7565b5774f5321a342f05\">Full Description</a>"
	},
	"cudaLaunchHostFunc":{
		"id": "cudaLaunchHostFunc",
		"value": "<p><b><code>__host__cudaError_t cudaLaunchHostFunc ( cudaStream_t stream, cudaHostFn_t fn, void* userData )</code></b></p>",
		"description": "<p>Enqueues a host function call in a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br><code>fn</code><br>&emsp;- The function to call once preceding stream operations are complete<br><code>userData</code><br>&emsp;- User-specified data to be passed to the function<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorInvalidValue, cudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g05841eaa5f90f27124241baafb3e856f\">Full Description</a>"
	},
	"cudaLaunchKernel":{
		"id": "cudaLaunchKernel",
		"value": "<p><b><code>__host__cudaError_t cudaLaunchKernel ( const void* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem, cudaStream_t stream )</code></b></p>",
		"description": "<p>Launches a device function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>func</code><br>&emsp;- Device function symbol<br><code>gridDim</code><br>&emsp;- Grid dimentions<br><code>blockDim</code><br>&emsp;- Block dimentions<br><code>args</code><br>&emsp;- Arguments<br><code>sharedMem</code><br>&emsp;- Shared memory<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction, cudaErrorInvalidConfiguration, cudaErrorLaunchFailure, cudaErrorLaunchTimeout, cudaErrorLaunchOutOfResources, cudaErrorSharedObjectInitFailed, cudaErrorInvalidPtx, cudaErrorUnsupportedPtxVersion, cudaErrorNoKernelImageForDevice, cudaErrorJitCompilerNotFound, cudaErrorJitCompilationDisabled<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g5064cdf5d8e6741ace56fd8be951783c\">Full Description</a>"
	},
	"cudaLaunchKernelExC":{
		"id": "cudaLaunchKernelExC",
		"value": "<p><b><code>__host__cudaError_t cudaLaunchKernelExC ( const cudaLaunchConfig_t* config, const void* func, void** args )</code></b></p>",
		"description": "<p>Launches a CUDA function with launch-time configuration.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>config</code><br>&emsp;- Launch configuration<br><code>func</code><br>&emsp;- Kernel to launch<br><code>args</code><br>&emsp;- Array of pointers to kernel parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction, cudaErrorInvalidConfiguration, cudaErrorLaunchFailure, cudaErrorLaunchTimeout, cudaErrorLaunchOutOfResources, cudaErrorSharedObjectInitFailed, cudaErrorInvalidPtx, cudaErrorUnsupportedPtxVersion, cudaErrorNoKernelImageForDevice, cudaErrorJitCompilerNotFound, cudaErrorJitCompilationDisabled<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1ge236ecdbbaf7cf47a806bba71c1d03c4\">Full Description</a>"
	},
	"cudaSetDoubleForDevice":{
		"id": "cudaSetDoubleForDevice",
		"value": "<p><b><code>__host__cudaError_t cudaSetDoubleForDevice ( double* d )</code></b></p>",
		"description": "<p>Converts a double argument to be executed on a device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>d</code><br>&emsp;- Double to convert<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1ga7893ac813a0a901d533852f568f9c8e\">Full Description</a>"
	},
	"cudaSetDoubleForHost":{
		"id": "cudaSetDoubleForHost",
		"value": "<p><b><code>__host__cudaError_t cudaSetDoubleForHost ( double* d )</code></b></p>",
		"description": "<p>Converts a double argument after execution on a device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>d</code><br>&emsp;- Double to convert<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1g63b08bc08466ff7e53962da9098c216a\">Full Description</a>"
	},
	"cudaTriggerProgrammaticLaunchCompletion":{
		"id": "cudaTriggerProgrammaticLaunchCompletion",
		"value": "<p><b><code>__device__void cudaTriggerProgrammaticLaunchCompletion ( void )</code></b></p>",
		"description": "<p>Programmatic dependency trigger.</p>",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EXECUTION.html#group__CUDART__EXECUTION_1ge194af462d927583bed3acf60d450218\">Full Description</a>"
	},
	"cudaOccupancyAvailableDynamicSMemPerBlock":{
		"id": "cudaOccupancyAvailableDynamicSMemPerBlock",
		"value": "<p><b><code>__host__cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock ( size_t* dynamicSmemSize, const void* func, int numBlocks, int blockSize )</code></b></p>",
		"description": "<p>Returns dynamic shared memory available per block when launching numBlocks blocks on SM.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dynamicSmemSize</code><br>&emsp;- Returned maximum dynamic shared memory<br><code>func</code><br>&emsp;- Kernel function for which occupancy is calculated<br><code>numBlocks</code><br>&emsp;- Number of blocks to fit on SM<br><code>blockSize</code><br>&emsp;- Size of the block<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OCCUPANCY.html#group__CUDART__OCCUPANCY_1g3017bec8ddb4951e89f6ba4c259bb091\">Full Description</a>"
	},
	"cudaOccupancyMaxActiveBlocksPerMultiprocessor":{
		"id": "cudaOccupancyMaxActiveBlocksPerMultiprocessor",
		"value": "<p><b><code>__host____device__cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor ( int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize )</code></b></p>",
		"description": "<p>Returns occupancy for a device function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>numBlocks</code><br>&emsp;- Returned occupancy<br><code>func</code><br>&emsp;- Kernel function for which occupancy is calculated<br><code>blockSize</code><br>&emsp;- Block size the kernel is intended to be launched with<br><code>dynamicSMemSize</code><br>&emsp;- Per-block dynamic shared memory usage intended, in bytes<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OCCUPANCY.html#group__CUDART__OCCUPANCY_1ge99bee88c427b3f8ffa8ec3e43fd877d\">Full Description</a>"
	},
	"cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags":{
		"id": "cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags",
		"value": "<p><b><code>__host__cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags ( int* numBlocks, const void* func, int blockSize, size_t dynamicSMemSize, unsigned int flags )</code></b></p>",
		"description": "<p>Returns occupancy for a device function with the specified flags.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>numBlocks</code><br>&emsp;- Returned occupancy<br><code>func</code><br>&emsp;- Kernel function for which occupancy is calculated<br><code>blockSize</code><br>&emsp;- Block size the kernel is intended to be launched with<br><code>dynamicSMemSize</code><br>&emsp;- Per-block dynamic shared memory usage intended, in bytes<br><code>flags</code><br>&emsp;- Requested behavior for the occupancy calculator<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OCCUPANCY.html#group__CUDART__OCCUPANCY_1ge2255f3637784624ea99a6d3c7885ca0\">Full Description</a>"
	},
	"cudaOccupancyMaxActiveClusters":{
		"id": "cudaOccupancyMaxActiveClusters",
		"value": "<p><b><code>__host__cudaError_t cudaOccupancyMaxActiveClusters ( int* numClusters, const void* func, const cudaLaunchConfig_t* launchConfig )</code></b></p>",
		"description": "<p>Given the kernel function (func) and launch configuration (config), return the maximum number of clusters that could co-exist on the target device in *numClusters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>numClusters</code><br>&emsp;- Returned maximum number of clusters that could co-exist on the target device<br><code>func</code><br>&emsp;- Kernel function for which maximum number of clusters are calculated<br><code>launchConfig</code><br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue, cudaErrorInvalidClusterSize, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OCCUPANCY.html#group__CUDART__OCCUPANCY_1gd4322b730e5b2c5a9a93f0a22c93ab03\">Full Description</a>"
	},
	"cudaOccupancyMaxPotentialClusterSize":{
		"id": "cudaOccupancyMaxPotentialClusterSize",
		"value": "<p><b><code>__host__cudaError_t cudaOccupancyMaxPotentialClusterSize ( int* clusterSize, const void* func, const cudaLaunchConfig_t* launchConfig )</code></b></p>",
		"description": "<p>Given the kernel function (func) and launch configuration (config), return the maximum cluster size in *clusterSize.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>clusterSize</code><br>&emsp;- Returned maximum cluster size that can be launched for the given kernel function and launch configuration<br><code>func</code><br>&emsp;- Kernel function for which maximum cluster size is calculated<br><code>launchConfig</code><br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OCCUPANCY.html#group__CUDART__OCCUPANCY_1g6d65e4932b9ab03d6544e37f111d7ec9\">Full Description</a>"
	},
	"cudaArrayGetInfo":{
		"id": "cudaArrayGetInfo",
		"value": "<p><b><code>__host__cudaError_t cudaArrayGetInfo ( cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array )</code></b></p>",
		"description": "<p>Gets info about the specified cudaArray.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>desc</code><br>&emsp;- Returned array type<br><code>extent</code><br>&emsp;- Returned array shape. 2D arrays will have depth of zero<br><code>flags</code><br>&emsp;- Returned array flags<br><code>array</code><br>&emsp;- The cudaArray to get info for<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g373dacf191566b0bf5e5b807517b6bf9\">Full Description</a>"
	},
	"cudaArrayGetMemoryRequirements":{
		"id": "cudaArrayGetMemoryRequirements",
		"value": "<p><b><code>__host__cudaError_t cudaArrayGetMemoryRequirements ( cudaArrayMemoryRequirements* memoryRequirements, cudaArray_t array, int device )</code></b></p>",
		"description": "<p>Returns the memory requirements of a CUDA array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>memoryRequirements</code><br>&emsp;- Pointer to cudaArrayMemoryRequirements<br><code>array</code><br>&emsp;- CUDA array to get the memory requirements of<br><code>device</code><br>&emsp;- Device to get the memory requirements for<br></p><p><b>Returns</b><br>cudaSuccesscudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g809cc7ad6dbb23f84121f28136c6eace\">Full Description</a>"
	},
	"cudaArrayGetPlane":{
		"id": "cudaArrayGetPlane",
		"value": "<p><b><code>__host__cudaError_t cudaArrayGetPlane ( cudaArray_t* pPlaneArray, cudaArray_t hArray, unsigned int planeIdx )</code></b></p>",
		"description": "<p>Gets a CUDA array plane from a CUDA array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pPlaneArray</code><br>&emsp;- Returned CUDA array referenced by the planeIdx<br><code>hArray</code><br>&emsp;- CUDA array<br><code>planeIdx</code><br>&emsp;- Plane index<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValuecudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g9a851663a2b9f222b549c727adc0e079\">Full Description</a>"
	},
	"cudaArrayGetSparseProperties":{
		"id": "cudaArrayGetSparseProperties",
		"value": "<p><b><code>__host__cudaError_t cudaArrayGetSparseProperties ( cudaArraySparseProperties* sparseProperties, cudaArray_t array )</code></b></p>",
		"description": "<p>Returns the layout properties of a sparse CUDA array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>sparseProperties</code><br>&emsp;- Pointer to return the cudaArraySparseProperties<br><code>array</code><br>&emsp;- The CUDA array to get the sparse properties of<br></p><p><b>Returns</b><br>cudaSuccesscudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g0bfd1422d4647443bab85ebcf2157185\">Full Description</a>"
	},
	"cudaFree":{
		"id": "cudaFree",
		"value": "<p><b><code>__host____device__cudaError_t cudaFree ( void* devPtr )</code></b></p>",
		"description": "<p>Frees memory on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Device pointer to memory to free<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1ga042655cbbf3408f01061652a075e094\">Full Description</a>"
	},
	"cudaFreeArray":{
		"id": "cudaFreeArray",
		"value": "<p><b><code>__host__cudaError_t cudaFreeArray ( cudaArray_t array )</code></b></p>",
		"description": "<p>Frees an array on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>array</code><br>&emsp;- Pointer to array to free<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g1b553f5f4806d67525230ac305d50900\">Full Description</a>"
	},
	"cudaFreeHost":{
		"id": "cudaFreeHost",
		"value": "<p><b><code>__host__cudaError_t cudaFreeHost ( void* ptr )</code></b></p>",
		"description": "<p>Frees page-locked memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Pointer to memory to free<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g71c078689c17627566b2a91989184969\">Full Description</a>"
	},
	"cudaFreeMipmappedArray":{
		"id": "cudaFreeMipmappedArray",
		"value": "<p><b><code>__host__cudaError_t cudaFreeMipmappedArray ( cudaMipmappedArray_t mipmappedArray )</code></b></p>",
		"description": "<p>Frees a mipmapped array on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>mipmappedArray</code><br>&emsp;- Pointer to mipmapped array to free<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g904669241eac5bdbfb410eb4124e4924\">Full Description</a>"
	},
	"cudaGetMipmappedArrayLevel":{
		"id": "cudaGetMipmappedArrayLevel",
		"value": "<p><b><code>__host__cudaError_t cudaGetMipmappedArrayLevel ( cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level )</code></b></p>",
		"description": "<p>Gets a mipmap level of a CUDA mipmapped array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>levelArray</code><br>&emsp;- Returned mipmap level CUDA array<br><code>mipmappedArray</code><br>&emsp;- CUDA mipmapped array<br><code>level</code><br>&emsp;- Mipmap level<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValuecudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g7086e6f81e6dda1ddf4cdb6c1764094a\">Full Description</a>"
	},
	"cudaGetSymbolAddress":{
		"id": "cudaGetSymbolAddress",
		"value": "<p><b><code>__host__cudaError_t cudaGetSymbolAddress ( void** devPtr, const void* symbol )</code></b></p>",
		"description": "<p>Finds the address associated with a CUDA symbol.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Return device pointer associated with symbol<br><code>symbol</code><br>&emsp;- Device symbol address<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidSymbol, cudaErrorNoKernelImageForDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g4f513be54d3794667c2017146b3d6a2b\">Full Description</a>"
	},
	"cudaGetSymbolSize":{
		"id": "cudaGetSymbolSize",
		"value": "<p><b><code>__host__cudaError_t cudaGetSymbolSize ( size_t* size, const void* symbol )</code></b></p>",
		"description": "<p>Finds the size of the object associated with a CUDA symbol.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>size</code><br>&emsp;- Size of object associated with symbol<br><code>symbol</code><br>&emsp;- Device symbol address<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidSymbol, cudaErrorNoKernelImageForDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g1d150bde14df4e291b520226fe475466\">Full Description</a>"
	},
	"cudaHostAlloc":{
		"id": "cudaHostAlloc",
		"value": "<p><b><code>__host__cudaError_t cudaHostAlloc ( void** pHost, size_t size, unsigned int flags )</code></b></p>",
		"description": "<p>Allocates page-locked memory on the host.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pHost</code><br>&emsp;- Device pointer to allocated memory<br><code>size</code><br>&emsp;- Requested allocation size in bytes<br><code>flags</code><br>&emsp;- Requested properties of allocated memory<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gb65da58f444e7230d3322b6126bb4902\">Full Description</a>"
	},
	"cudaHostGetDevicePointer":{
		"id": "cudaHostGetDevicePointer",
		"value": "<p><b><code>__host__cudaError_t cudaHostGetDevicePointer ( void** pDevice, void* pHost, unsigned int flags )</code></b></p>",
		"description": "<p>Passes back device pointer of mapped host memory allocated by cudaHostAlloc or registered by cudaHostRegister.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pDevice</code><br>&emsp;- Returned device pointer for mapped memory<br><code>pHost</code><br>&emsp;- Requested host pointer mapping<br><code>flags</code><br>&emsp;- Flags for extensions (must be 0 for now)<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gc00502b44e5f1bdc0b424487ebb08db0\">Full Description</a>"
	},
	"cudaHostGetFlags":{
		"id": "cudaHostGetFlags",
		"value": "<p><b><code>__host__cudaError_t cudaHostGetFlags ( unsigned int* pFlags, void* pHost )</code></b></p>",
		"description": "<p>Passes back flags used to allocate pinned host memory allocated by cudaHostAlloc.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pFlags</code><br>&emsp;- Returned flags word<br><code>pHost</code><br>&emsp;- Host pointer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gc470e9220559109f5088d9a01c0aeeda\">Full Description</a>"
	},
	"cudaHostRegister":{
		"id": "cudaHostRegister",
		"value": "<p><b><code>__host__cudaError_t cudaHostRegister ( void* ptr, size_t size, unsigned int flags )</code></b></p>",
		"description": "<p>Registers an existing host memory range for use by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Host pointer to memory to page-lock<br><code>size</code><br>&emsp;- Size in bytes of the address range to page-lock in bytes<br><code>flags</code><br>&emsp;- Flags for allocation request<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation, cudaErrorHostMemoryAlreadyRegistered, cudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1ge8d5c17670f16ac4fc8fcb4181cb490c\">Full Description</a>"
	},
	"cudaHostUnregister":{
		"id": "cudaHostUnregister",
		"value": "<p><b><code>__host__cudaError_t cudaHostUnregister ( void* ptr )</code></b></p>",
		"description": "<p>Unregisters a memory range that was registered with cudaHostRegister.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Host pointer to memory to unregister<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorHostMemoryNotRegistered<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g81fd4101862bbefdb42a62d60e515eea\">Full Description</a>"
	},
	"cudaMalloc":{
		"id": "cudaMalloc",
		"value": "<p><b><code>__host____device__cudaError_t cudaMalloc ( void** devPtr, size_t size )</code></b></p>",
		"description": "<p>Allocate memory on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to allocated device memory<br><code>size</code><br>&emsp;- Requested allocation size in bytes<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g37d37965bfb4803b6d4e59ff26856356\">Full Description</a>"
	},
	"cudaMalloc3D":{
		"id": "cudaMalloc3D",
		"value": "<p><b><code>__host__cudaError_t cudaMalloc3D ( cudaPitchedPtr* pitchedDevPtr, cudaExtent extent )</code></b></p>",
		"description": "<p>Allocates logical 1D, 2D, or 3D memory objects on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pitchedDevPtr</code><br>&emsp;- Pointer to allocated pitched device memory<br><code>extent</code><br>&emsp;- Requested allocation size (width field in bytes)<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g188300e599ded65c925e79eab2a57347\">Full Description</a>"
	},
	"cudaMalloc3DArray":{
		"id": "cudaMalloc3DArray",
		"value": "<p><b><code>__host__cudaError_t cudaMalloc3DArray ( cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Allocate an array on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>array</code><br>&emsp;- Pointer to allocated array in device memory<br><code>desc</code><br>&emsp;- Requested channel format<br><code>extent</code><br>&emsp;- Requested allocation size (width field in elements)<br><code>flags</code><br>&emsp;- Flags for extensions<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g948143cf2423a072ac6a31fb635efd88\">Full Description</a>"
	},
	"cudaMallocArray":{
		"id": "cudaMallocArray",
		"value": "<p><b><code>__host__cudaError_t cudaMallocArray ( cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height = 0, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Allocate an array on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>array</code><br>&emsp;- Pointer to allocated array in device memory<br><code>desc</code><br>&emsp;- Requested channel format<br><code>width</code><br>&emsp;- Requested array allocation width<br><code>height</code><br>&emsp;- Requested array allocation height<br><code>flags</code><br>&emsp;- Requested properties of allocated array<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g6728eb7dc25f332f50bdb16a19620d3d\">Full Description</a>"
	},
	"cudaMallocHost":{
		"id": "cudaMallocHost",
		"value": "<p><b><code>__host__cudaError_t cudaMallocHost ( void** ptr, size_t size )</code></b></p>",
		"description": "<p>Allocates page-locked memory on the host.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Pointer to allocated host memory<br><code>size</code><br>&emsp;- Requested allocation size in bytes<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gab84100ae1fa1b12eaca660207ef585b\">Full Description</a>"
	},
	"cudaMallocManaged":{
		"id": "cudaMallocManaged",
		"value": "<p><b><code>__host__cudaError_t cudaMallocManaged ( void** devPtr, size_t size, unsigned int flags = cudaMemAttachGlobal )</code></b></p>",
		"description": "<p>Allocates memory that will be automatically managed by the Unified Memory system.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to allocated device memory<br><code>size</code><br>&emsp;- Requested allocation size in bytes<br><code>flags</code><br>&emsp;- Must be either cudaMemAttachGlobal or cudaMemAttachHost (defaults to cudaMemAttachGlobal)<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorMemoryAllocation, cudaErrorNotSupported, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gd228014f19cc0975ebe3e0dd2af6dd1b\">Full Description</a>"
	},
	"cudaMallocMipmappedArray":{
		"id": "cudaMallocMipmappedArray",
		"value": "<p><b><code>__host__cudaError_t cudaMallocMipmappedArray ( cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int numLevels, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Allocate a mipmapped array on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>mipmappedArray</code><br>&emsp;- Pointer to allocated mipmapped array in device memory<br><code>desc</code><br>&emsp;- Requested channel format<br><code>extent</code><br>&emsp;- Requested allocation size (width field in elements)<br><code>numLevels</code><br>&emsp;- Number of mipmap levels to allocate<br><code>flags</code><br>&emsp;- Flags for extensions<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g9abd550dd3f655473d2640dc85be9774\">Full Description</a>"
	},
	"cudaMallocPitch":{
		"id": "cudaMallocPitch",
		"value": "<p><b><code>__host__cudaError_t cudaMallocPitch ( void** devPtr, size_t* pitch, size_t width, size_t height )</code></b></p>",
		"description": "<p>Allocates pitched memory on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to allocated pitched device memory<br><code>pitch</code><br>&emsp;- Pitch for allocation<br><code>width</code><br>&emsp;- Requested pitched allocation width (in bytes)<br><code>height</code><br>&emsp;- Requested pitched allocation height<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g32bd7a39135594788a542ae72217775c\">Full Description</a>"
	},
	"cudaMemAdvise":{
		"id": "cudaMemAdvise",
		"value": "<p><b><code>__host__cudaError_t cudaMemAdvise ( const void* devPtr, size_t count, cudaMemoryAdvise advice, int device )</code></b></p>",
		"description": "<p>Advise about the usage of a given memory range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to memory to set the advice for<br><code>count</code><br>&emsp;- Size in bytes of the memory range<br><code>advice</code><br>&emsp;- Advice to be applied for the specified memory range<br><code>device</code><br>&emsp;- Device to apply the advice for<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1ge37112fc1ac88d0f6bab7a945e48760a\">Full Description</a>"
	},
	"cudaMemGetInfo":{
		"id": "cudaMemGetInfo",
		"value": "<p><b><code>__host__cudaError_t cudaMemGetInfo ( size_t* free, size_t* total )</code></b></p>",
		"description": "<p>Gets free and total device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>free</code><br>&emsp;- Returned free memory in bytes<br><code>total</code><br>&emsp;- Returned total memory in bytes<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorLaunchFailure<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g376b97f5ab20321ca46f7cfa9511b978\">Full Description</a>"
	},
	"cudaMemPrefetchAsync":{
		"id": "cudaMemPrefetchAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMemPrefetchAsync ( const void* devPtr, size_t count, int dstDevice, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Prefetches memory to the specified destination device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to be prefetched<br><code>count</code><br>&emsp;- Size in bytes<br><code>dstDevice</code><br>&emsp;- Destination device to prefetch to<br><code>stream</code><br>&emsp;- Stream to enqueue prefetch operation<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1ge8dc9199943d421bc8bc7f473df12e42\">Full Description</a>"
	},
	"cudaMemRangeGetAttribute":{
		"id": "cudaMemRangeGetAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaMemRangeGetAttribute ( void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count )</code></b></p>",
		"description": "<p>Query an attribute of a given memory range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>data</code><br>&emsp;- A pointers to a memory location where the result of each attribute query will be written to.<br><code>dataSize</code><br>&emsp;- Array containing the size of data<br><code>attribute</code><br>&emsp;- The attribute to query<br><code>devPtr</code><br>&emsp;- Start of the range to query<br><code>count</code><br>&emsp;- Size of the range to query<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g8048f6ea5ad77917444567656c140c5a\">Full Description</a>"
	},
	"cudaMemRangeGetAttributes":{
		"id": "cudaMemRangeGetAttributes",
		"value": "<p><b><code>__host__cudaError_t cudaMemRangeGetAttributes ( void** data, size_t* dataSizes, cudaMemRangeAttribute ** attributes, size_t numAttributes, const void* devPtr, size_t count )</code></b></p>",
		"description": "<p>Query attributes of a given memory range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>data</code><br>&emsp;- A two-dimensional array containing pointers to memory locations where the result of each attribute query will be written to.<br><code>dataSizes</code><br>&emsp;- Array containing the sizes of each result<br><code>attributes</code><br>&emsp;- An array of attributes to query (numAttributes and the number of attributes in this array should match)<br><code>numAttributes</code><br>&emsp;- Number of attributes to query<br><code>devPtr</code><br>&emsp;- Start of the range to query<br><code>count</code><br>&emsp;- Size of the range to query<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g1a9199e7709c7817d1c715cfbe174d05\">Full Description</a>"
	},
	"cudaMemcpy":{
		"id": "cudaMemcpy",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gc263dbe6574220cc776b45438fc351e8\">Full Description</a>"
	},
	"cudaMemcpy2D":{
		"id": "cudaMemcpy2D",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy2D ( void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>dpitch</code><br>&emsp;- Pitch of destination memory<br><code>src</code><br>&emsp;- Source memory address<br><code>spitch</code><br>&emsp;- Pitch of source memory<br><code>width</code><br>&emsp;- Width of matrix transfer (columns in bytes)<br><code>height</code><br>&emsp;- Height of matrix transfer (rows)<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g3a58270f6775efe56c65ac47843e7cee\">Full Description</a>"
	},
	"cudaMemcpy2DArrayToArray":{
		"id": "cudaMemcpy2DArrayToArray",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy2DArrayToArray ( cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>wOffsetDst</code><br>&emsp;- Destination starting X offset (columns in bytes)<br><code>hOffsetDst</code><br>&emsp;- Destination starting Y offset (rows)<br><code>src</code><br>&emsp;- Source memory address<br><code>wOffsetSrc</code><br>&emsp;- Source starting X offset (columns in bytes)<br><code>hOffsetSrc</code><br>&emsp;- Source starting Y offset (rows)<br><code>width</code><br>&emsp;- Width of matrix transfer (columns in bytes)<br><code>height</code><br>&emsp;- Height of matrix transfer (rows)<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gf111724f090f2a73d5302e03d6f82488\">Full Description</a>"
	},
	"cudaMemcpy2DAsync":{
		"id": "cudaMemcpy2DAsync",
		"value": "<p><b><code>__host____device__cudaError_t cudaMemcpy2DAsync ( void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>dpitch</code><br>&emsp;- Pitch of destination memory<br><code>src</code><br>&emsp;- Source memory address<br><code>spitch</code><br>&emsp;- Pitch of source memory<br><code>width</code><br>&emsp;- Width of matrix transfer (columns in bytes)<br><code>height</code><br>&emsp;- Height of matrix transfer (rows)<br><code>kind</code><br>&emsp;- Type of transfer<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1ge529b926e8fb574c2666a9a1d58b0dc1\">Full Description</a>"
	},
	"cudaMemcpy2DFromArray":{
		"id": "cudaMemcpy2DFromArray",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy2DFromArray ( void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>dpitch</code><br>&emsp;- Pitch of destination memory<br><code>src</code><br>&emsp;- Source memory address<br><code>wOffset</code><br>&emsp;- Source starting X offset (columns in bytes)<br><code>hOffset</code><br>&emsp;- Source starting Y offset (rows)<br><code>width</code><br>&emsp;- Width of matrix transfer (columns in bytes)<br><code>height</code><br>&emsp;- Height of matrix transfer (rows)<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g0f944b3fd3c81edad0a352cf22de24f0\">Full Description</a>"
	},
	"cudaMemcpy2DFromArrayAsync":{
		"id": "cudaMemcpy2DFromArrayAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy2DFromArrayAsync ( void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>dpitch</code><br>&emsp;- Pitch of destination memory<br><code>src</code><br>&emsp;- Source memory address<br><code>wOffset</code><br>&emsp;- Source starting X offset (columns in bytes)<br><code>hOffset</code><br>&emsp;- Source starting Y offset (rows)<br><code>width</code><br>&emsp;- Width of matrix transfer (columns in bytes)<br><code>height</code><br>&emsp;- Height of matrix transfer (rows)<br><code>kind</code><br>&emsp;- Type of transfer<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g1c81de45e9ed5e72008a8f28e706b599\">Full Description</a>"
	},
	"cudaMemcpy2DToArray":{
		"id": "cudaMemcpy2DToArray",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy2DToArray ( cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>wOffset</code><br>&emsp;- Destination starting X offset (columns in bytes)<br><code>hOffset</code><br>&emsp;- Destination starting Y offset (rows)<br><code>src</code><br>&emsp;- Source memory address<br><code>spitch</code><br>&emsp;- Pitch of source memory<br><code>width</code><br>&emsp;- Width of matrix transfer (columns in bytes)<br><code>height</code><br>&emsp;- Height of matrix transfer (rows)<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g9509226164aaa58baf0c5b8ed165df58\">Full Description</a>"
	},
	"cudaMemcpy2DToArrayAsync":{
		"id": "cudaMemcpy2DToArrayAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy2DToArrayAsync ( cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>wOffset</code><br>&emsp;- Destination starting X offset (columns in bytes)<br><code>hOffset</code><br>&emsp;- Destination starting Y offset (rows)<br><code>src</code><br>&emsp;- Source memory address<br><code>spitch</code><br>&emsp;- Pitch of source memory<br><code>width</code><br>&emsp;- Width of matrix transfer (columns in bytes)<br><code>height</code><br>&emsp;- Height of matrix transfer (rows)<br><code>kind</code><br>&emsp;- Type of transfer<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g217af4b9e2de79d9252418fc661e6a6a\">Full Description</a>"
	},
	"cudaMemcpy3D":{
		"id": "cudaMemcpy3D",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy3D ( const cudaMemcpy3DParms* p )</code></b></p>",
		"description": "<p>Copies data between 3D objects.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>p</code><br>&emsp;- 3D memory copy parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gfec7ee5257d48c8528a709ffad48d208\">Full Description</a>"
	},
	"cudaMemcpy3DAsync":{
		"id": "cudaMemcpy3DAsync",
		"value": "<p><b><code>__host____device__cudaError_t cudaMemcpy3DAsync ( const cudaMemcpy3DParms* p, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies data between 3D objects.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>p</code><br>&emsp;- 3D memory copy parameters<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidPitchValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g785bd0963e476a740533382a67674641\">Full Description</a>"
	},
	"cudaMemcpy3DPeer":{
		"id": "cudaMemcpy3DPeer",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy3DPeer ( const cudaMemcpy3DPeerParms* p )</code></b></p>",
		"description": "<p>Copies memory between devices.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>p</code><br>&emsp;- Parameters for the memory copy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice, cudaErrorInvalidPitchValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1geeab4601354962a5968eefc8b79ec2dd\">Full Description</a>"
	},
	"cudaMemcpy3DPeerAsync":{
		"id": "cudaMemcpy3DPeerAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpy3DPeerAsync ( const cudaMemcpy3DPeerParms* p, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies memory between devices asynchronously.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>p</code><br>&emsp;- Parameters for the memory copy<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice, cudaErrorInvalidPitchValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g7386b2845149b48c87f82ea017690aa8\">Full Description</a>"
	},
	"cudaMemcpyAsync":{
		"id": "cudaMemcpyAsync",
		"value": "<p><b><code>__host____device__cudaError_t cudaMemcpyAsync ( void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g85073372f776b4c4d5f89f7124b7bf79\">Full Description</a>"
	},
	"cudaMemcpyFromSymbol":{
		"id": "cudaMemcpyFromSymbol",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyFromSymbol ( void* dst, const void* symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost )</code></b></p>",
		"description": "<p>Copies data from the given symbol on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>symbol</code><br>&emsp;- Device symbol address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidSymbol, cudaErrorInvalidMemcpyDirection, cudaErrorNoKernelImageForDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g17ce3365ef7b6687a7d16c5b29de1f82\">Full Description</a>"
	},
	"cudaMemcpyFromSymbolAsync":{
		"id": "cudaMemcpyFromSymbolAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyFromSymbolAsync ( void* dst, const void* symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies data from the given symbol on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>symbol</code><br>&emsp;- Device symbol address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidSymbol, cudaErrorInvalidMemcpyDirection, cudaErrorNoKernelImageForDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g9445b750013829f03d0bb5ad5fa7a0fb\">Full Description</a>"
	},
	"cudaMemcpyPeer":{
		"id": "cudaMemcpyPeer",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyPeer ( void* dst, int dstDevice, const void* src, int srcDevice, size_t count )</code></b></p>",
		"description": "<p>Copies memory between two devices.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination device pointer<br><code>dstDevice</code><br>&emsp;- Destination device<br><code>src</code><br>&emsp;- Source device pointer<br><code>srcDevice</code><br>&emsp;- Source device<br><code>count</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g88fd1245b2cb10d2d30c74900b7dfb9c\">Full Description</a>"
	},
	"cudaMemcpyPeerAsync":{
		"id": "cudaMemcpyPeerAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyPeerAsync ( void* dst, int dstDevice, const void* src, int srcDevice, size_t count, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies memory between two devices asynchronously.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination device pointer<br><code>dstDevice</code><br>&emsp;- Destination device<br><code>src</code><br>&emsp;- Source device pointer<br><code>srcDevice</code><br>&emsp;- Source device<br><code>count</code><br>&emsp;- Size of memory copy in bytes<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gbfde4ace9ff4823f4ac45e5c6bdcd2ee\">Full Description</a>"
	},
	"cudaMemcpyToSymbol":{
		"id": "cudaMemcpyToSymbol",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyToSymbol ( const void* symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice )</code></b></p>",
		"description": "<p>Copies data to the given symbol on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>symbol</code><br>&emsp;- Device symbol address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidSymbol, cudaErrorInvalidMemcpyDirection, cudaErrorNoKernelImageForDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g9bcf02b53644eee2bef9983d807084c7\">Full Description</a>"
	},
	"cudaMemcpyToSymbolAsync":{
		"id": "cudaMemcpyToSymbolAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyToSymbolAsync ( const void* symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies data to the given symbol on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>symbol</code><br>&emsp;- Device symbol address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidSymbol, cudaErrorInvalidMemcpyDirection, cudaErrorNoKernelImageForDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gc3551568f691baad5fb776b7656ecc05\">Full Description</a>"
	},
	"cudaMemset":{
		"id": "cudaMemset",
		"value": "<p><b><code>__host__cudaError_t cudaMemset ( void* devPtr, int value, size_t count )</code></b></p>",
		"description": "<p>Initializes or sets device memory to a value.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to device memory<br><code>value</code><br>&emsp;- Value to set for each byte of specified memory<br><code>count</code><br>&emsp;- Size in bytes to set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gf7338650f7683c51ee26aadc6973c63a\">Full Description</a>"
	},
	"cudaMemset2D":{
		"id": "cudaMemset2D",
		"value": "<p><b><code>__host__cudaError_t cudaMemset2D ( void* devPtr, size_t pitch, int value, size_t width, size_t height )</code></b></p>",
		"description": "<p>Initializes or sets device memory to a value.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to 2D device memory<br><code>pitch</code><br>&emsp;- Pitch in bytes of 2D device memory(Unused if height is 1)<br><code>value</code><br>&emsp;- Value to set for each byte of specified memory<br><code>width</code><br>&emsp;- Width of matrix set (columns in bytes)<br><code>height</code><br>&emsp;- Height of matrix set (rows)<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g120112b2bd627c7a896390efadc4d2c1\">Full Description</a>"
	},
	"cudaMemset2DAsync":{
		"id": "cudaMemset2DAsync",
		"value": "<p><b><code>__host____device__cudaError_t cudaMemset2DAsync ( void* devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Initializes or sets device memory to a value.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to 2D device memory<br><code>pitch</code><br>&emsp;- Pitch in bytes of 2D device memory(Unused if height is 1)<br><code>value</code><br>&emsp;- Value to set for each byte of specified memory<br><code>width</code><br>&emsp;- Width of matrix set (columns in bytes)<br><code>height</code><br>&emsp;- Height of matrix set (rows)<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g8fdcc53996ff49c570f4b5ead0256ef0\">Full Description</a>"
	},
	"cudaMemset3D":{
		"id": "cudaMemset3D",
		"value": "<p><b><code>__host__cudaError_t cudaMemset3D ( cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent )</code></b></p>",
		"description": "<p>Initializes or sets device memory to a value.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pitchedDevPtr</code><br>&emsp;- Pointer to pitched device memory<br><code>value</code><br>&emsp;- Value to set for each byte of specified memory<br><code>extent</code><br>&emsp;- Size parameters for where to set device memory (width field in bytes)<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g87688e6e9ce6a19c3405bb2bc8e49f93\">Full Description</a>"
	},
	"cudaMemset3DAsync":{
		"id": "cudaMemset3DAsync",
		"value": "<p><b><code>__host____device__cudaError_t cudaMemset3DAsync ( cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Initializes or sets device memory to a value.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pitchedDevPtr</code><br>&emsp;- Pointer to pitched device memory<br><code>value</code><br>&emsp;- Value to set for each byte of specified memory<br><code>extent</code><br>&emsp;- Size parameters for where to set device memory (width field in bytes)<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1ga0fe471e6538e11e6e8ad9895833cc71\">Full Description</a>"
	},
	"cudaMemsetAsync":{
		"id": "cudaMemsetAsync",
		"value": "<p><b><code>__host____device__cudaError_t cudaMemsetAsync ( void* devPtr, int value, size_t count, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Initializes or sets device memory to a value.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to device memory<br><code>value</code><br>&emsp;- Value to set for each byte of specified memory<br><code>count</code><br>&emsp;- Size in bytes to set<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g7c9761e21d9f0999fd136c51e7b9b2a0\">Full Description</a>"
	},
	"cudaMipmappedArrayGetMemoryRequirements":{
		"id": "cudaMipmappedArrayGetMemoryRequirements",
		"value": "<p><b><code>__host__cudaError_t cudaMipmappedArrayGetMemoryRequirements ( cudaArrayMemoryRequirements* memoryRequirements, cudaMipmappedArray_t mipmap, int device )</code></b></p>",
		"description": "<p>Returns the memory requirements of a CUDA mipmapped array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>memoryRequirements</code><br>&emsp;- Pointer to cudaArrayMemoryRequirements<br><code>mipmap</code><br>&emsp;- CUDA mipmapped array to get the memory requirements of<br><code>device</code><br>&emsp;- Device to get the memory requirements for<br></p><p><b>Returns</b><br>cudaSuccesscudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g5585c79ccabe9cd9f882810b0ae2f382\">Full Description</a>"
	},
	"cudaMipmappedArrayGetSparseProperties":{
		"id": "cudaMipmappedArrayGetSparseProperties",
		"value": "<p><b><code>__host__cudaError_t cudaMipmappedArrayGetSparseProperties ( cudaArraySparseProperties* sparseProperties, cudaMipmappedArray_t mipmap )</code></b></p>",
		"description": "<p>Returns the layout properties of a sparse CUDA mipmapped array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>sparseProperties</code><br>&emsp;- Pointer to return cudaArraySparseProperties<br><code>mipmap</code><br>&emsp;- The CUDA mipmapped array to get the sparse properties of<br></p><p><b>Returns</b><br>cudaSuccesscudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g96d65849f80adb87d239f68756ed5b14\">Full Description</a>"
	},
	"make_cudaExtent":{
		"id": "make_cudaExtent",
		"value": "<p><b><code>__host__cudaExtent make_cudaExtent ( size_t w, size_t h, size_t d )</code></b></p>",
		"description": "<p>Returns a cudaExtent based on input parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>w</code><br>&emsp;- Width in elements when referring to array memory, in bytes when referring to linear memory<br><code>h</code><br>&emsp;- Height in elements<br><code>d</code><br>&emsp;- Depth in elements<br></p><p><b>Returns</b><br>cudaExtent specified by w, h, and d<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1g66d2e640656aa155d4ed6650fc7a2a5e\">Full Description</a>"
	},
	"make_cudaPitchedPtr":{
		"id": "make_cudaPitchedPtr",
		"value": "<p><b><code>__host__cudaPitchedPtr make_cudaPitchedPtr ( void* d, size_t p, size_t xsz, size_t ysz )</code></b></p>",
		"description": "<p>Returns a cudaPitchedPtr based on input parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>d</code><br>&emsp;- Pointer to allocated memory<br><code>p</code><br>&emsp;- Pitch of allocated memory in bytes<br><code>xsz</code><br>&emsp;- Logical width of allocation in elements<br><code>ysz</code><br>&emsp;- Logical height of allocation in elements<br></p><p><b>Returns</b><br>cudaPitchedPtr specified by d, p, xsz, and ysz<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gc3f66f8f11f9949768ae8d10cad5a1a0\">Full Description</a>"
	},
	"make_cudaPos":{
		"id": "make_cudaPos",
		"value": "<p><b><code>__host__cudaPos make_cudaPos ( size_t x, size_t y, size_t z )</code></b></p>",
		"description": "<p>Returns a cudaPos based on input parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>x</code><br>&emsp;- X position<br><code>y</code><br>&emsp;- Y position<br><code>z</code><br>&emsp;- Z position<br></p><p><b>Returns</b><br>cudaPos specified by x, y, and z<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY.html#group__CUDART__MEMORY_1gfdde5695fcf95a6ec8899c3943f7dd8c\">Full Description</a>"
	},
	"cudaMemcpyArrayToArray":{
		"id": "cudaMemcpyArrayToArray",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyArrayToArray ( cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>wOffsetDst</code><br>&emsp;- Destination starting X offset (columns in bytes)<br><code>hOffsetDst</code><br>&emsp;- Destination starting Y offset (rows)<br><code>src</code><br>&emsp;- Source memory address<br><code>wOffsetSrc</code><br>&emsp;- Source starting X offset (columns in bytes)<br><code>hOffsetSrc</code><br>&emsp;- Source starting Y offset (rows)<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__DEPRECATED.html#group__CUDART__MEMORY__DEPRECATED_1g5daffa65811c6be7eba1ec3c6c19ddb0\">Full Description</a>"
	},
	"cudaMemcpyFromArray":{
		"id": "cudaMemcpyFromArray",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyFromArray ( void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>src</code><br>&emsp;- Source memory address<br><code>wOffset</code><br>&emsp;- Source starting X offset (columns in bytes)<br><code>hOffset</code><br>&emsp;- Source starting Y offset (rows)<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__DEPRECATED.html#group__CUDART__MEMORY__DEPRECATED_1g6fbe8ed786061afaeaf79dc17eef15e9\">Full Description</a>"
	},
	"cudaMemcpyFromArrayAsync":{
		"id": "cudaMemcpyFromArrayAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyFromArrayAsync ( void* dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>src</code><br>&emsp;- Source memory address<br><code>wOffset</code><br>&emsp;- Source starting X offset (columns in bytes)<br><code>hOffset</code><br>&emsp;- Source starting Y offset (rows)<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__DEPRECATED.html#group__CUDART__MEMORY__DEPRECATED_1gfa22cfe6148b4c82593ecf3582f1dc33\">Full Description</a>"
	},
	"cudaMemcpyToArray":{
		"id": "cudaMemcpyToArray",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyToArray ( cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>wOffset</code><br>&emsp;- Destination starting X offset (columns in bytes)<br><code>hOffset</code><br>&emsp;- Destination starting Y offset (rows)<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__DEPRECATED.html#group__CUDART__MEMORY__DEPRECATED_1g15b5d20cedf31dd13801c6015da0e828\">Full Description</a>"
	},
	"cudaMemcpyToArrayAsync":{
		"id": "cudaMemcpyToArrayAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMemcpyToArrayAsync ( cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Copies data between host and device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination memory address<br><code>wOffset</code><br>&emsp;- Destination starting X offset (columns in bytes)<br><code>hOffset</code><br>&emsp;- Destination starting Y offset (rows)<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br><code>stream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidMemcpyDirection<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__DEPRECATED.html#group__CUDART__MEMORY__DEPRECATED_1g92f0eaaaa772fd428dfc7c7ba699d272\">Full Description</a>"
	},
	"cudaFreeAsync":{
		"id": "cudaFreeAsync",
		"value": "<p><b><code>__host__cudaError_t cudaFreeAsync ( void* devPtr, cudaStream_t hStream )</code></b></p>",
		"description": "<p>Frees memory with stream ordered semantics.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br><code>hStream</code><br>&emsp;- The stream establishing the stream ordering promise<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g3398a689c75448c1bf99368e490ac878\">Full Description</a>"
	},
	"cudaMallocAsync":{
		"id": "cudaMallocAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMallocAsync ( void** devPtr, size_t size, cudaStream_t hStream )</code></b></p>",
		"description": "<p>Allocates memory with stream ordered semantics.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Returned device pointer<br><code>size</code><br>&emsp;- Number of bytes to allocate<br><code>hStream</code><br>&emsp;- The stream establishing the stream ordering contract and the memory pool to allocate from<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorNotSupported, cudaErrorOutOfMemory,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1gbbf70065888d61853c047513baa14081\">Full Description</a>"
	},
	"cudaMallocFromPoolAsync":{
		"id": "cudaMallocFromPoolAsync",
		"value": "<p><b><code>__host__cudaError_t cudaMallocFromPoolAsync ( void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream )</code></b></p>",
		"description": "<p>Allocates memory from a specified pool with stream ordered semantics.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Returned device pointer<br><code>size</code><br><code>memPool</code><br>&emsp;- The pool to allocate from<br><code>stream</code><br>&emsp;- The stream establishing the stream ordering semantic<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorNotSupported, cudaErrorOutOfMemory<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g871003f518e27ec92f7b331307fa32d4\">Full Description</a>"
	},
	"cudaMemPoolCreate":{
		"id": "cudaMemPoolCreate",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolCreate ( cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps )</code></b></p>",
		"description": "<p>Creates a memory pool.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g8158cc4b2c0d2c2c771f9d1af3cf386e\">Full Description</a>"
	},
	"cudaMemPoolDestroy":{
		"id": "cudaMemPoolDestroy",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolDestroy ( cudaMemPool_t memPool )</code></b></p>",
		"description": "<p>Destroys the specified memory pool.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g709113128c1c52c3bf170022dc7723dd\">Full Description</a>"
	},
	"cudaMemPoolExportPointer":{
		"id": "cudaMemPoolExportPointer",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolExportPointer ( cudaMemPoolPtrExportData* exportData, void* ptr )</code></b></p>",
		"description": "<p>Export data to share a memory pool allocation between processes.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>exportData</code><br><code>ptr</code><br>&emsp;- pointer to memory being exported<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorOutOfMemory<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1gb2f607ca635363ea7d1ecbf61b725168\">Full Description</a>"
	},
	"cudaMemPoolExportToShareableHandle":{
		"id": "cudaMemPoolExportToShareableHandle",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolExportToShareableHandle ( void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int flags )</code></b></p>",
		"description": "<p>Exports a memory pool to the requested handle type.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>shareableHandle</code><br><code>memPool</code><br><code>handleType</code><br>&emsp;- the type of handle to create<br><code>flags</code><br>&emsp;- must be 0<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorOutOfMemory<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1gd2d30535ebd78b44957ff76f3f3ea8dd\">Full Description</a>"
	},
	"cudaMemPoolGetAccess":{
		"id": "cudaMemPoolGetAccess",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolGetAccess ( cudaMemAccessFlags ** flags, cudaMemPool_t memPool, cudaMemLocation* location )</code></b></p>",
		"description": "<p>Returns the accessibility of a pool from a device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>flags</code><br>&emsp;- the accessibility of the pool from the specified location<br><code>memPool</code><br>&emsp;- the pool being queried<br><code>location</code><br>&emsp;- the location accessing the pool<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1gc75ce545e1052e9b13174c2c0892778b\">Full Description</a>"
	},
	"cudaMemPoolGetAttribute":{
		"id": "cudaMemPoolGetAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolGetAttribute ( cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value )</code></b></p>",
		"description": "<p>Gets attributes of a memory pool.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>memPool</code><br><code>attr</code><br>&emsp;- The attribute to get<br><code>value</code><br>&emsp;- Retrieved value<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g4ff47ef59413a4ed9d760c0841ce4a99\">Full Description</a>"
	},
	"cudaMemPoolImportFromShareableHandle":{
		"id": "cudaMemPoolImportFromShareableHandle",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolImportFromShareableHandle ( cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int flags )</code></b></p>",
		"description": "<p>imports a memory pool from a shared handle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>memPool</code><br><code>shareableHandle</code><br><code>handleType</code><br>&emsp;- The type of handle being imported<br><code>flags</code><br>&emsp;- must be 0<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorOutOfMemory<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g29c5389e957a281969fac357fc852c8e\">Full Description</a>"
	},
	"cudaMemPoolImportPointer":{
		"id": "cudaMemPoolImportPointer",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolImportPointer ( void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData )</code></b></p>",
		"description": "<p>Import a memory pool allocation from another process.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g07d753c8bb9b8b789b975777ff83d574\">Full Description</a>"
	},
	"cudaMemPoolSetAccess":{
		"id": "cudaMemPoolSetAccess",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolSetAccess ( cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count )</code></b></p>",
		"description": "<p>Controls visibility of pools between devices.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>memPool</code><br><code>descList</code><br><code>count</code><br>&emsp;- Number of descriptors in the map array.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g4210da54ee5a810945da586e00cb3019\">Full Description</a>"
	},
	"cudaMemPoolSetAttribute":{
		"id": "cudaMemPoolSetAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolSetAttribute ( cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value )</code></b></p>",
		"description": "<p>Sets attributes of a memory pool.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>memPool</code><br><code>attr</code><br>&emsp;- The attribute to modify<br><code>value</code><br>&emsp;- Pointer to the value to assign<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g0229135f7ef724b4f479a435ca300af5\">Full Description</a>"
	},
	"cudaMemPoolTrimTo":{
		"id": "cudaMemPoolTrimTo",
		"value": "<p><b><code>__host__cudaError_t cudaMemPoolTrimTo ( cudaMemPool_t memPool, size_t minBytesToKeep )</code></b></p>",
		"description": "<p>Tries to release memory back to the OS.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>memPool</code><br><code>minBytesToKeep</code><br>&emsp;- If the pool has less than minBytesToKeep reserved, the TrimTo operation is a no-op. Otherwise the pool will be guaranteed to have at least minBytesToKeep bytes reserved after the operation.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__MEMORY__POOLS.html#group__CUDART__MEMORY__POOLS_1g0faf526bcfffd835aa95a4514fb2f7d5\">Full Description</a>"
	},
	"cudaPointerGetAttributes":{
		"id": "cudaPointerGetAttributes",
		"value": "<p><b><code>__host__cudaError_t cudaPointerGetAttributes ( cudaPointerAttributes* attributes, const void* ptr )</code></b></p>",
		"description": "<p>Returns attributes about a specified pointer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>attributes</code><br>&emsp;- Attributes for the specified pointer<br><code>ptr</code><br>&emsp;- Pointer to get attributes for<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__UNIFIED.html#group__CUDART__UNIFIED_1gd89830e17d399c064a2f3c3fa8bb4390\">Full Description</a>"
	},
	"cudaDeviceCanAccessPeer":{
		"id": "cudaDeviceCanAccessPeer",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceCanAccessPeer ( int* canAccessPeer, int device, int peerDevice )</code></b></p>",
		"description": "<p>Queries if a device may directly access a peer device's memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>canAccessPeer</code><br>&emsp;- Returned access capability<br><code>device</code><br>&emsp;- Device from which allocations on peerDevice are to be directly accessed.<br><code>peerDevice</code><br>&emsp;- Device on which the allocations to be directly accessed by device reside.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__PEER.html#group__CUDART__PEER_1g4db0d04e44995d5c1c34be4ecc863f22\">Full Description</a>"
	},
	"cudaDeviceDisablePeerAccess":{
		"id": "cudaDeviceDisablePeerAccess",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceDisablePeerAccess ( int peerDevice )</code></b></p>",
		"description": "<p>Disables direct access to memory allocations on a peer device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>peerDevice</code><br>&emsp;- Peer device to disable direct access to<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorPeerAccessNotEnabled, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__PEER.html#group__CUDART__PEER_1g9663734ad02653207ad6836053bf572e\">Full Description</a>"
	},
	"cudaDeviceEnablePeerAccess":{
		"id": "cudaDeviceEnablePeerAccess",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceEnablePeerAccess ( int peerDevice, unsigned int flags )</code></b></p>",
		"description": "<p>Enables direct access to memory allocations on a peer device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>peerDevice</code><br>&emsp;- Peer device to enable direct access to from the current device<br><code>flags</code><br>&emsp;- Reserved for future use and must be set to 0<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorPeerAccessAlreadyEnabled, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__PEER.html#group__CUDART__PEER_1g2b0adabf90db37e5cfddc92cbb2589f3\">Full Description</a>"
	},
	"cudaGLDeviceList":{
		"id": "cudaGLDeviceList",
		"value": "<p><b><code>enum cudaGLDeviceList</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL.html#group__CUDART__OPENGL_1gb16c58ea3958e29c9b15cad8e5b03969\">Full Description</a>"
	},
	"cudaGLGetDevices":{
		"id": "cudaGLGetDevices",
		"value": "<p><b><code>__host__cudaError_t cudaGLGetDevices ( unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, cudaGLDeviceList deviceList )</code></b></p>",
		"description": "<p>Gets the CUDA devices associated with the current OpenGL context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDeviceCount</code><br>&emsp;- Returned number of CUDA devices corresponding to the current OpenGL context<br><code>pCudaDevices</code><br>&emsp;- Returned CUDA devices corresponding to the current OpenGL context<br><code>cudaDeviceCount</code><br>&emsp;- The size of the output device array pCudaDevices<br><code>deviceList</code><br>&emsp;- The set of devices to return. This set may be cudaGLDeviceListAll for all devices, cudaGLDeviceListCurrentFrame for the devices used to render the current frame (in SLI), or cudaGLDeviceListNextFrame for the devices used to render the next frame (in SLI).<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNoDevice, cudaErrorInvalidGraphicsContext, cudaErrorOperatingSystem, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL.html#group__CUDART__OPENGL_1g3471ecaa5b827c94f2c55ab51fde1751\">Full Description</a>"
	},
	"cudaGraphicsGLRegisterBuffer":{
		"id": "cudaGraphicsGLRegisterBuffer",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsGLRegisterBuffer ( cudaGraphicsResource** resource, GLuint buffer, unsigned int flags )</code></b></p>",
		"description": "<p>Registers an OpenGL buffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Pointer to the returned object handle<br><code>buffer</code><br>&emsp;- name of buffer object to be registered<br><code>flags</code><br>&emsp;- Register flags<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorOperatingSystem, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL.html#group__CUDART__OPENGL_1g0fd33bea77ca7b1e69d1619caf44214b\">Full Description</a>"
	},
	"cudaGraphicsGLRegisterImage":{
		"id": "cudaGraphicsGLRegisterImage",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsGLRegisterImage ( cudaGraphicsResource** resource, GLuint image, GLenum target, unsigned int flags )</code></b></p>",
		"description": "<p>Register an OpenGL texture or renderbuffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Pointer to the returned object handle<br><code>image</code><br>&emsp;- name of texture or renderbuffer object to be registered<br><code>target</code><br>&emsp;- Identifies the type of object specified by image<br><code>flags</code><br>&emsp;- Register flags<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorOperatingSystem, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL.html#group__CUDART__OPENGL_1g80d12187ae7590807c7676697d9fe03d\">Full Description</a>"
	},
	"cudaWGLGetDevice":{
		"id": "cudaWGLGetDevice",
		"value": "<p><b><code>__host__cudaError_t cudaWGLGetDevice ( int* device, HGPUNV hGpu )</code></b></p>",
		"description": "<p>Gets the CUDA device associated with hGpu.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Returns the device associated with hGpu, or -1 if hGpu is not a compute device.<br><code>hGpu</code><br>&emsp;- Handle to a GPU, as queried via WGL_NV_gpu_affinity<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL.html#group__CUDART__OPENGL_1gcbad4f3a7ed30ee479322f9923a05a2c\">Full Description</a>"
	},
	"cudaGLMapFlags":{
		"id": "cudaGLMapFlags",
		"value": "<p><b><code>enum cudaGLMapFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1g6bccefa8a35d845945a4db37ae83b2bc\">Full Description</a>"
	},
	"cudaGLMapBufferObject":{
		"id": "cudaGLMapBufferObject",
		"value": "<p><b><code>__host__cudaError_t cudaGLMapBufferObject ( void** devPtr, GLuint bufObj )</code></b></p>",
		"description": "<p>Maps a buffer object for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Returned device pointer to CUDA object<br><code>bufObj</code><br>&emsp;- Buffer object ID to map<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorMapBufferObjectFailed<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1gab71eaf2bf614b851e583ea27abb0ac1\">Full Description</a>"
	},
	"cudaGLMapBufferObjectAsync":{
		"id": "cudaGLMapBufferObjectAsync",
		"value": "<p><b><code>__host__cudaError_t cudaGLMapBufferObjectAsync ( void** devPtr, GLuint bufObj, cudaStream_t stream )</code></b></p>",
		"description": "<p>Maps a buffer object for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Returned device pointer to CUDA object<br><code>bufObj</code><br>&emsp;- Buffer object ID to map<br><code>stream</code><br>&emsp;- Stream to synchronize<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorMapBufferObjectFailed<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1g999ba03d95b2d0c512a26dee90e4e0ef\">Full Description</a>"
	},
	"cudaGLRegisterBufferObject":{
		"id": "cudaGLRegisterBufferObject",
		"value": "<p><b><code>__host__cudaError_t cudaGLRegisterBufferObject ( GLuint bufObj )</code></b></p>",
		"description": "<p>Registers a buffer object for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>bufObj</code><br>&emsp;- Buffer object ID to register<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInitializationError<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1g98c64a567146f6c6b253999e1b3e24f3\">Full Description</a>"
	},
	"cudaGLSetBufferObjectMapFlags":{
		"id": "cudaGLSetBufferObjectMapFlags",
		"value": "<p><b><code>__host__cudaError_t cudaGLSetBufferObjectMapFlags ( GLuint bufObj, unsigned int flags )</code></b></p>",
		"description": "<p>Set usage flags for mapping an OpenGL buffer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>bufObj</code><br>&emsp;- Registered buffer object to set flags for<br><code>flags</code><br>&emsp;- Parameters for buffer mapping<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1ge98cc0503f44e3aff52fd6bbde579365\">Full Description</a>"
	},
	"cudaGLSetGLDevice":{
		"id": "cudaGLSetGLDevice",
		"value": "<p><b><code>__host__cudaError_t cudaGLSetGLDevice ( int device )</code></b></p>",
		"description": "<p>Sets a CUDA device to use OpenGL interoperability.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Device to use for OpenGL interoperability<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorSetOnActiveProcess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1g88fddf479c2b597af49fd839bb42345e\">Full Description</a>"
	},
	"cudaGLUnmapBufferObject":{
		"id": "cudaGLUnmapBufferObject",
		"value": "<p><b><code>__host__cudaError_t cudaGLUnmapBufferObject ( GLuint bufObj )</code></b></p>",
		"description": "<p>Unmaps a buffer object for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>bufObj</code><br>&emsp;- Buffer object to unmap<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorUnmapBufferObjectFailed<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1gb14f8de8d7404066cbd08a0409dcf02b\">Full Description</a>"
	},
	"cudaGLUnmapBufferObjectAsync":{
		"id": "cudaGLUnmapBufferObjectAsync",
		"value": "<p><b><code>__host__cudaError_t cudaGLUnmapBufferObjectAsync ( GLuint bufObj, cudaStream_t stream )</code></b></p>",
		"description": "<p>Unmaps a buffer object for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>bufObj</code><br>&emsp;- Buffer object to unmap<br><code>stream</code><br>&emsp;- Stream to synchronize<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorUnmapBufferObjectFailed<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1g93b760a4a3cf00f09600d73c03bc8b47\">Full Description</a>"
	},
	"cudaGLUnregisterBufferObject":{
		"id": "cudaGLUnregisterBufferObject",
		"value": "<p><b><code>__host__cudaError_t cudaGLUnregisterBufferObject ( GLuint bufObj )</code></b></p>",
		"description": "<p>Unregisters a buffer object for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>bufObj</code><br>&emsp;- Buffer object to unregister<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__OPENGL__DEPRECATED.html#group__CUDART__OPENGL__DEPRECATED_1g348f274f267a35152dc09820bf276bac\">Full Description</a>"
	},
	"cudaD3D9DeviceList":{
		"id": "cudaD3D9DeviceList",
		"value": "<p><b><code>enum cudaD3D9DeviceList</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9.html#group__CUDART__D3D9_1g93e3d8aabc986f1799a2754135e31379\">Full Description</a>"
	},
	"cudaD3D9GetDevice":{
		"id": "cudaD3D9GetDevice",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9GetDevice ( int* device, const char* pszAdapterName )</code></b></p>",
		"description": "<p>Gets the device number for an adapter.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Returns the device corresponding to pszAdapterName<br><code>pszAdapterName</code><br>&emsp;- D3D9 adapter to get device for<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9.html#group__CUDART__D3D9_1gcd070306b3ce6540a3bc309d415f19b2\">Full Description</a>"
	},
	"cudaD3D9GetDevices":{
		"id": "cudaD3D9GetDevices",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9GetDevices ( unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, IDirect3DDevice9* pD3D9Device, cudaD3D9DeviceList deviceList )</code></b></p>",
		"description": "<p>Gets the CUDA devices corresponding to a Direct3D 9 device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDeviceCount</code><br>&emsp;- Returned number of CUDA devices corresponding to pD3D9Device<br><code>pCudaDevices</code><br>&emsp;- Returned CUDA devices corresponding to pD3D9Device<br><code>cudaDeviceCount</code><br>&emsp;- The size of the output device array pCudaDevices<br><code>pD3D9Device</code><br>&emsp;- Direct3D 9 device to query for CUDA devices<br><code>deviceList</code><br>&emsp;- The set of devices to return. This set may be cudaD3D9DeviceListAll for all devices, cudaD3D9DeviceListCurrentFrame for the devices used to render the current frame (in SLI), or cudaD3D9DeviceListNextFrame for the devices used to render the next frame (in SLI).<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNoDevice, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9.html#group__CUDART__D3D9_1g113d44c4c588818e27de685a58412736\">Full Description</a>"
	},
	"cudaD3D9GetDirect3DDevice":{
		"id": "cudaD3D9GetDirect3DDevice",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9GetDirect3DDevice ( IDirect3DDevice9** ppD3D9Device )</code></b></p>",
		"description": "<p>Gets the Direct3D device against which the current CUDA context was created.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ppD3D9Device</code><br>&emsp;- Returns the Direct3D device for this thread<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidGraphicsContext, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9.html#group__CUDART__D3D9_1g911fe6061c4e0015abf8124ac8e07582\">Full Description</a>"
	},
	"cudaD3D9SetDirect3DDevice":{
		"id": "cudaD3D9SetDirect3DDevice",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9SetDirect3DDevice ( IDirect3DDevice9* pD3D9Device, int device = -1 )</code></b></p>",
		"description": "<p>Sets the Direct3D 9 device to use for interoperability with a CUDA device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pD3D9Device</code><br>&emsp;- Direct3D device to use for this thread<br><code>device</code><br>&emsp;- The CUDA device to use. This device must be among the devices returned when querying cudaD3D9DeviceListAll from cudaD3D9GetDevices, may be set to -1 to automatically select an appropriate CUDA device.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInitializationError, cudaErrorInvalidValue, cudaErrorSetOnActiveProcess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9.html#group__CUDART__D3D9_1g0733a6f0bdc8aca6c6812da66c6d814a\">Full Description</a>"
	},
	"cudaGraphicsD3D9RegisterResource":{
		"id": "cudaGraphicsD3D9RegisterResource",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsD3D9RegisterResource ( cudaGraphicsResource** resource, IDirect3DResource9* pD3DResource, unsigned int flags )</code></b></p>",
		"description": "<p>Register a Direct3D 9 resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Pointer to returned resource handle<br><code>pD3DResource</code><br>&emsp;- Direct3D resource to register<br><code>flags</code><br>&emsp;- Parameters for resource registration<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9.html#group__CUDART__D3D9_1gab5efa8a8882a6e0ee99717a434730b0\">Full Description</a>"
	},
	"cudaD3D9MapFlags":{
		"id": "cudaD3D9MapFlags",
		"value": "<p><b><code>enum cudaD3D9MapFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1g77fb48ace0d2da465b6f4bcc00ef750b\">Full Description</a>"
	},
	"cudaD3D9RegisterFlags":{
		"id": "cudaD3D9RegisterFlags",
		"value": "<p><b><code>enum cudaD3D9RegisterFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1gcdebbc14eb83032da31bd75503cddfea\">Full Description</a>"
	},
	"cudaD3D9MapResources":{
		"id": "cudaD3D9MapResources",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9MapResources ( int count, IDirect3DResource9** ppResources )</code></b></p>",
		"description": "<p>Map Direct3D resources for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to map for CUDA<br><code>ppResources</code><br>&emsp;- Resources to map for CUDA<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1g37e568318e2f937fe06020a675497b1e\">Full Description</a>"
	},
	"cudaD3D9RegisterResource":{
		"id": "cudaD3D9RegisterResource",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9RegisterResource ( IDirect3DResource9* pResource, unsigned int flags )</code></b></p>",
		"description": "<p>Registers a Direct3D resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Resource to register<br><code>flags</code><br>&emsp;- Parameters for resource registration<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1g81b436ab21219ad7192f2d1d1331a365\">Full Description</a>"
	},
	"cudaD3D9ResourceGetMappedArray":{
		"id": "cudaD3D9ResourceGetMappedArray",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9ResourceGetMappedArray ( cudaArray** ppArray, IDirect3DResource9* pResource, unsigned int face, unsigned int level )</code></b></p>",
		"description": "<p>Get an array through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ppArray</code><br>&emsp;- Returned array corresponding to subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>face</code><br>&emsp;- Face of resource to access<br><code>level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1gbf66161e2462ff7ef17cbccef3d6b098\">Full Description</a>"
	},
	"cudaD3D9ResourceGetMappedPitch":{
		"id": "cudaD3D9ResourceGetMappedPitch",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9ResourceGetMappedPitch ( size_t* pPitch, size_t* pPitchSlice, IDirect3DResource9* pResource, unsigned int face, unsigned int level )</code></b></p>",
		"description": "<p>Get the pitch of a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pPitch</code><br>&emsp;- Returned pitch of subresource<br><code>pPitchSlice</code><br>&emsp;- Returned Z-slice pitch of subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>face</code><br>&emsp;- Face of resource to access<br><code>level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1g38876ed7e596f58ee0ec550dd168b4e8\">Full Description</a>"
	},
	"cudaD3D9ResourceGetMappedPointer":{
		"id": "cudaD3D9ResourceGetMappedPointer",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9ResourceGetMappedPointer ( void** pPointer, IDirect3DResource9* pResource, unsigned int face, unsigned int level )</code></b></p>",
		"description": "<p>Get a pointer through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pPointer</code><br>&emsp;- Returned pointer corresponding to subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>face</code><br>&emsp;- Face of resource to access<br><code>level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1g7d367e7ea6e0e3c8884ea2a473f75749\">Full Description</a>"
	},
	"cudaD3D9ResourceGetMappedSize":{
		"id": "cudaD3D9ResourceGetMappedSize",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9ResourceGetMappedSize ( size_t* pSize, IDirect3DResource9* pResource, unsigned int face, unsigned int level )</code></b></p>",
		"description": "<p>Get the size of a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pSize</code><br>&emsp;- Returned size of subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>face</code><br>&emsp;- Face of resource to access<br><code>level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1g80531533ff24e1c3a5201edf2d05f89f\">Full Description</a>"
	},
	"cudaD3D9ResourceGetSurfaceDimensions":{
		"id": "cudaD3D9ResourceGetSurfaceDimensions",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9ResourceGetSurfaceDimensions ( size_t* pWidth, size_t* pHeight, size_t* pDepth, IDirect3DResource9* pResource, unsigned int face, unsigned int level )</code></b></p>",
		"description": "<p>Get the dimensions of a registered Direct3D surface.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pWidth</code><br>&emsp;- Returned width of surface<br><code>pHeight</code><br>&emsp;- Returned height of surface<br><code>pDepth</code><br>&emsp;- Returned depth of surface<br><code>pResource</code><br>&emsp;- Registered resource to access<br><code>face</code><br>&emsp;- Face of resource to access<br><code>level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1g2963f7235b75594ca2947ff84d7000c1\">Full Description</a>"
	},
	"cudaD3D9ResourceSetMapFlags":{
		"id": "cudaD3D9ResourceSetMapFlags",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9ResourceSetMapFlags ( IDirect3DResource9* pResource, unsigned int flags )</code></b></p>",
		"description": "<p>Set usage flags for mapping a Direct3D resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Registered resource to set flags for<br><code>flags</code><br>&emsp;- Parameters for resource mapping<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1ge9a5aef299347c403cd8f96855d61fb4\">Full Description</a>"
	},
	"cudaD3D9UnmapResources":{
		"id": "cudaD3D9UnmapResources",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9UnmapResources ( int count, IDirect3DResource9** ppResources )</code></b></p>",
		"description": "<p>Unmap Direct3D resources for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to unmap for CUDA<br><code>ppResources</code><br>&emsp;- Resources to unmap for CUDA<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1g4597fa217d5e7e3f735f233882292fe7\">Full Description</a>"
	},
	"cudaD3D9UnregisterResource":{
		"id": "cudaD3D9UnregisterResource",
		"value": "<p><b><code>__host__cudaError_t cudaD3D9UnregisterResource ( IDirect3DResource9* pResource )</code></b></p>",
		"description": "<p>Unregisters a Direct3D resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Resource to unregister<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D9__DEPRECATED.html#group__CUDART__D3D9__DEPRECATED_1g81dd5ad8f5ec63e31a3d32f67dc1ca4c\">Full Description</a>"
	},
	"cudaD3D10DeviceList":{
		"id": "cudaD3D10DeviceList",
		"value": "<p><b><code>enum cudaD3D10DeviceList</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10.html#group__CUDART__D3D10_1g1e9ffdd1c631cab046c7d7b64e187f78\">Full Description</a>"
	},
	"cudaD3D10GetDevice":{
		"id": "cudaD3D10GetDevice",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10GetDevice ( int* device, IDXGIAdapter* pAdapter )</code></b></p>",
		"description": "<p>Gets the device number for an adapter.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Returns the device corresponding to pAdapter<br><code>pAdapter</code><br>&emsp;- D3D10 adapter to get device for<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10.html#group__CUDART__D3D10_1g9c053ca39e9c4a3dfcc65326db155fa6\">Full Description</a>"
	},
	"cudaD3D10GetDevices":{
		"id": "cudaD3D10GetDevices",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10GetDevices ( unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, ID3D10Device* pD3D10Device, cudaD3D10DeviceList deviceList )</code></b></p>",
		"description": "<p>Gets the CUDA devices corresponding to a Direct3D 10 device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDeviceCount</code><br>&emsp;- Returned number of CUDA devices corresponding to pD3D10Device<br><code>pCudaDevices</code><br>&emsp;- Returned CUDA devices corresponding to pD3D10Device<br><code>cudaDeviceCount</code><br>&emsp;- The size of the output device array pCudaDevices<br><code>pD3D10Device</code><br>&emsp;- Direct3D 10 device to query for CUDA devices<br><code>deviceList</code><br>&emsp;- The set of devices to return. This set may be cudaD3D10DeviceListAll for all devices, cudaD3D10DeviceListCurrentFrame for the devices used to render the current frame (in SLI), or cudaD3D10DeviceListNextFrame for the devices used to render the next frame (in SLI).<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNoDevice, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10.html#group__CUDART__D3D10_1g70ccbdf2ed995cb7182eb97c6780996d\">Full Description</a>"
	},
	"cudaGraphicsD3D10RegisterResource":{
		"id": "cudaGraphicsD3D10RegisterResource",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsD3D10RegisterResource ( cudaGraphicsResource** resource, ID3D10Resource* pD3DResource, unsigned int flags )</code></b></p>",
		"description": "<p>Registers a Direct3D 10 resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Pointer to returned resource handle<br><code>pD3DResource</code><br>&emsp;- Direct3D resource to register<br><code>flags</code><br>&emsp;- Parameters for resource registration<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10.html#group__CUDART__D3D10_1g438731f7af2b799fb757910be6cff62b\">Full Description</a>"
	},
	"cudaD3D10MapFlags":{
		"id": "cudaD3D10MapFlags",
		"value": "<p><b><code>enum cudaD3D10MapFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1ga4a3d2d5f22faaaa86eba15ecff30d98\">Full Description</a>"
	},
	"cudaD3D10RegisterFlags":{
		"id": "cudaD3D10RegisterFlags",
		"value": "<p><b><code>enum cudaD3D10RegisterFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1g76be8c7eba1b3e3c54c6c9b6b65510de\">Full Description</a>"
	},
	"cudaD3D10GetDirect3DDevice":{
		"id": "cudaD3D10GetDirect3DDevice",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10GetDirect3DDevice ( ID3D10Device** ppD3D10Device )</code></b></p>",
		"description": "<p>Gets the Direct3D device against which the current CUDA context was created.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ppD3D10Device</code><br>&emsp;- Returns the Direct3D device for this thread<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1gecb7926cde472827aada7f265d1b85ef\">Full Description</a>"
	},
	"cudaD3D10MapResources":{
		"id": "cudaD3D10MapResources",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10MapResources ( int count, ID3D10Resource** ppResources )</code></b></p>",
		"description": "<p>Maps Direct3D Resources for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to map for CUDA<br><code>ppResources</code><br>&emsp;- Resources to map for CUDA<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1g5422b9db18f98bf87a1d7745333f04fd\">Full Description</a>"
	},
	"cudaD3D10RegisterResource":{
		"id": "cudaD3D10RegisterResource",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10RegisterResource ( ID3D10Resource* pResource, unsigned int flags )</code></b></p>",
		"description": "<p>Registers a Direct3D 10 resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Resource to register<br><code>flags</code><br>&emsp;- Parameters for resource registration<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1gacfa1f3dc77bb72eb3a3315f7b55a90f\">Full Description</a>"
	},
	"cudaD3D10ResourceGetMappedArray":{
		"id": "cudaD3D10ResourceGetMappedArray",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10ResourceGetMappedArray ( cudaArray** ppArray, ID3D10Resource* pResource, unsigned int subResource )</code></b></p>",
		"description": "<p>Gets an array through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ppArray</code><br>&emsp;- Returned array corresponding to subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>subResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1g547fb113e591b34db3c2027616a448d9\">Full Description</a>"
	},
	"cudaD3D10ResourceGetMappedPitch":{
		"id": "cudaD3D10ResourceGetMappedPitch",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10ResourceGetMappedPitch ( size_t* pPitch, size_t* pPitchSlice, ID3D10Resource* pResource, unsigned int subResource )</code></b></p>",
		"description": "<p>Gets the pitch of a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pPitch</code><br>&emsp;- Returned pitch of subresource<br><code>pPitchSlice</code><br>&emsp;- Returned Z-slice pitch of subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>subResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1ge39bcbb0c621b45db1324d4b44d0b94d\">Full Description</a>"
	},
	"cudaD3D10ResourceGetMappedPointer":{
		"id": "cudaD3D10ResourceGetMappedPointer",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10ResourceGetMappedPointer ( void** pPointer, ID3D10Resource* pResource, unsigned int subResource )</code></b></p>",
		"description": "<p>Gets a pointer through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pPointer</code><br>&emsp;- Returned pointer corresponding to subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>subResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1g5163db519e691beb742e1173f8103ab1\">Full Description</a>"
	},
	"cudaD3D10ResourceGetMappedSize":{
		"id": "cudaD3D10ResourceGetMappedSize",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10ResourceGetMappedSize ( size_t* pSize, ID3D10Resource* pResource, unsigned int subResource )</code></b></p>",
		"description": "<p>Gets the size of a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pSize</code><br>&emsp;- Returned size of subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>subResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1g1fa1dedd9b28853c59d9a6a6c6bdb6a6\">Full Description</a>"
	},
	"cudaD3D10ResourceGetSurfaceDimensions":{
		"id": "cudaD3D10ResourceGetSurfaceDimensions",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10ResourceGetSurfaceDimensions ( size_t* pWidth, size_t* pHeight, size_t* pDepth, ID3D10Resource* pResource, unsigned int subResource )</code></b></p>",
		"description": "<p>Gets the dimensions of a registered Direct3D surface.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pWidth</code><br>&emsp;- Returned width of surface<br><code>pHeight</code><br>&emsp;- Returned height of surface<br><code>pDepth</code><br>&emsp;- Returned depth of surface<br><code>pResource</code><br>&emsp;- Registered resource to access<br><code>subResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1ga7bfdd73e7ebe1fe3686ecc6aace04c5\">Full Description</a>"
	},
	"cudaD3D10ResourceSetMapFlags":{
		"id": "cudaD3D10ResourceSetMapFlags",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10ResourceSetMapFlags ( ID3D10Resource* pResource, unsigned int flags )</code></b></p>",
		"description": "<p>Set usage flags for mapping a Direct3D resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Registered resource to set flags for<br><code>flags</code><br>&emsp;- Parameters for resource mapping<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1gc7dd32992c6ebda1fae2ded02e77e7d9\">Full Description</a>"
	},
	"cudaD3D10SetDirect3DDevice":{
		"id": "cudaD3D10SetDirect3DDevice",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10SetDirect3DDevice ( ID3D10Device* pD3D10Device, int device = -1 )</code></b></p>",
		"description": "<p>Sets the Direct3D 10 device to use for interoperability with a CUDA device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pD3D10Device</code><br>&emsp;- Direct3D device to use for interoperability<br><code>device</code><br>&emsp;- The CUDA device to use. This device must be among the devices returned when querying cudaD3D10DeviceListAll from cudaD3D10GetDevices, may be set to -1 to automatically select an appropriate CUDA device.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInitializationError, cudaErrorInvalidValue, cudaErrorSetOnActiveProcess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1g7c942225222284fbfc3794a4ed6edf98\">Full Description</a>"
	},
	"cudaD3D10UnmapResources":{
		"id": "cudaD3D10UnmapResources",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10UnmapResources ( int count, ID3D10Resource** ppResources )</code></b></p>",
		"description": "<p>Unmaps Direct3D resources.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to unmap for CUDA<br><code>ppResources</code><br>&emsp;- Resources to unmap for CUDA<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1gbdb0554eaa4cfa89d907eae1ac6f076b\">Full Description</a>"
	},
	"cudaD3D10UnregisterResource":{
		"id": "cudaD3D10UnregisterResource",
		"value": "<p><b><code>__host__cudaError_t cudaD3D10UnregisterResource ( ID3D10Resource* pResource )</code></b></p>",
		"description": "<p>Unregisters a Direct3D resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Resource to unregister<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D10__DEPRECATED.html#group__CUDART__D3D10__DEPRECATED_1g6ba821f0593cb2163e5980654ccebeed\">Full Description</a>"
	},
	"cudaD3D11DeviceList":{
		"id": "cudaD3D11DeviceList",
		"value": "<p><b><code>enum cudaD3D11DeviceList</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D11.html#group__CUDART__D3D11_1gd1c6ace5a5bb075401c4f74446f73913\">Full Description</a>"
	},
	"cudaD3D11GetDevice":{
		"id": "cudaD3D11GetDevice",
		"value": "<p><b><code>__host__cudaError_t cudaD3D11GetDevice ( int* device, IDXGIAdapter* pAdapter )</code></b></p>",
		"description": "<p>Gets the device number for an adapter.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Returns the device corresponding to pAdapter<br><code>pAdapter</code><br>&emsp;- D3D11 adapter to get device for<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D11.html#group__CUDART__D3D11_1gcf0568f3809489723b70f1c5e614d346\">Full Description</a>"
	},
	"cudaD3D11GetDevices":{
		"id": "cudaD3D11GetDevices",
		"value": "<p><b><code>__host__cudaError_t cudaD3D11GetDevices ( unsigned int* pCudaDeviceCount, int* pCudaDevices, unsigned int cudaDeviceCount, ID3D11Device* pD3D11Device, cudaD3D11DeviceList deviceList )</code></b></p>",
		"description": "<p>Gets the CUDA devices corresponding to a Direct3D 11 device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDeviceCount</code><br>&emsp;- Returned number of CUDA devices corresponding to pD3D11Device<br><code>pCudaDevices</code><br>&emsp;- Returned CUDA devices corresponding to pD3D11Device<br><code>cudaDeviceCount</code><br>&emsp;- The size of the output device array pCudaDevices<br><code>pD3D11Device</code><br>&emsp;- Direct3D 11 device to query for CUDA devices<br><code>deviceList</code><br>&emsp;- The set of devices to return. This set may be cudaD3D11DeviceListAll for all devices, cudaD3D11DeviceListCurrentFrame for the devices used to render the current frame (in SLI), or cudaD3D11DeviceListNextFrame for the devices used to render the next frame (in SLI).<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNoDevice, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D11.html#group__CUDART__D3D11_1gd928ba905f56d69fd91a2145f15d3590\">Full Description</a>"
	},
	"cudaGraphicsD3D11RegisterResource":{
		"id": "cudaGraphicsD3D11RegisterResource",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsD3D11RegisterResource ( cudaGraphicsResource** resource, ID3D11Resource* pD3DResource, unsigned int flags )</code></b></p>",
		"description": "<p>Register a Direct3D 11 resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Pointer to returned resource handle<br><code>pD3DResource</code><br>&emsp;- Direct3D resource to register<br><code>flags</code><br>&emsp;- Parameters for resource registration<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D11.html#group__CUDART__D3D11_1g85d07753780643584b8febab0370623b\">Full Description</a>"
	},
	"cudaD3D11GetDirect3DDevice":{
		"id": "cudaD3D11GetDirect3DDevice",
		"value": "<p><b><code>__host__cudaError_t cudaD3D11GetDirect3DDevice ( ID3D11Device** ppD3D11Device )</code></b></p>",
		"description": "<p>Gets the Direct3D device against which the current CUDA context was created.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ppD3D11Device</code><br>&emsp;- Returns the Direct3D device for this thread<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D11__DEPRECATED.html#group__CUDART__D3D11__DEPRECATED_1g17c6855f78c5edcb63934a66d4fd3be6\">Full Description</a>"
	},
	"cudaD3D11SetDirect3DDevice":{
		"id": "cudaD3D11SetDirect3DDevice",
		"value": "<p><b><code>__host__cudaError_t cudaD3D11SetDirect3DDevice ( ID3D11Device* pD3D11Device, int device = -1 )</code></b></p>",
		"description": "<p>Sets the Direct3D 11 device to use for interoperability with a CUDA device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pD3D11Device</code><br>&emsp;- Direct3D device to use for interoperability<br><code>device</code><br>&emsp;- The CUDA device to use. This device must be among the devices returned when querying cudaD3D11DeviceListAll from cudaD3D11GetDevices, may be set to -1 to automatically select an appropriate CUDA device.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInitializationError, cudaErrorInvalidValue, cudaErrorSetOnActiveProcess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__D3D11__DEPRECATED.html#group__CUDART__D3D11__DEPRECATED_1g533524c773e7ca4ef57c0698b157d670\">Full Description</a>"
	},
	"cudaGraphicsVDPAURegisterOutputSurface":{
		"id": "cudaGraphicsVDPAURegisterOutputSurface",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsVDPAURegisterOutputSurface ( cudaGraphicsResource** resource, VdpOutputSurface vdpSurface, unsigned int flags )</code></b></p>",
		"description": "<p>Register a VdpOutputSurface object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Pointer to the returned object handle<br><code>vdpSurface</code><br>&emsp;- VDPAU object to be registered<br><code>flags</code><br>&emsp;- Map flags<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__VDPAU.html#group__CUDART__VDPAU_1gda9802a968253275d1d79f54debf5f6e\">Full Description</a>"
	},
	"cudaGraphicsVDPAURegisterVideoSurface":{
		"id": "cudaGraphicsVDPAURegisterVideoSurface",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsVDPAURegisterVideoSurface ( cudaGraphicsResource** resource, VdpVideoSurface vdpSurface, unsigned int flags )</code></b></p>",
		"description": "<p>Register a VdpVideoSurface object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Pointer to the returned object handle<br><code>vdpSurface</code><br>&emsp;- VDPAU object to be registered<br><code>flags</code><br>&emsp;- Map flags<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__VDPAU.html#group__CUDART__VDPAU_1g0cd4adc9fe3f324927c1719b29ec12fb\">Full Description</a>"
	},
	"cudaVDPAUGetDevice":{
		"id": "cudaVDPAUGetDevice",
		"value": "<p><b><code>__host__cudaError_t cudaVDPAUGetDevice ( int* device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress )</code></b></p>",
		"description": "<p>Gets the CUDA device associated with a VdpDevice.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Returns the device associated with vdpDevice, or -1 if the device associated with vdpDevice is not a compute device.<br><code>vdpDevice</code><br>&emsp;- A VdpDevice handle<br><code>vdpGetProcAddress</code><br>&emsp;- VDPAU's VdpGetProcAddress function pointer<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__VDPAU.html#group__CUDART__VDPAU_1g242a0ba3eef80229ac3702e05f9eb1d9\">Full Description</a>"
	},
	"cudaVDPAUSetVDPAUDevice":{
		"id": "cudaVDPAUSetVDPAUDevice",
		"value": "<p><b><code>__host__cudaError_t cudaVDPAUSetVDPAUDevice ( int device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress )</code></b></p>",
		"description": "<p>Sets a CUDA device to use VDPAU interoperability.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Device to use for VDPAU interoperability<br><code>vdpDevice</code><br>&emsp;- The VdpDevice to interoperate with<br><code>vdpGetProcAddress</code><br>&emsp;- VDPAU's VdpGetProcAddress function pointer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorSetOnActiveProcess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__VDPAU.html#group__CUDART__VDPAU_1g2a9ccfe8e6c87fe694bafd8cfcc67586\">Full Description</a>"
	},
	"cudaEGLStreamConsumerAcquireFrame":{
		"id": "cudaEGLStreamConsumerAcquireFrame",
		"value": "<p><b><code>__host__cudaError_t cudaEGLStreamConsumerAcquireFrame ( cudaEglStreamConnection* conn, cudaGraphicsResource_t* pCudaResource, cudaStream_t* pStream, unsigned int timeout )</code></b></p>",
		"description": "<p>Acquire an image frame from the EGLStream with CUDA as a consumer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Connection on which to acquire<br><code>pCudaResource</code><br>&emsp;- CUDA resource on which the EGLStream frame will be mapped for use.<br><code>pStream</code><br>&emsp;- CUDA stream for synchronization and any data migrations implied by cudaEglResourceLocationFlags.<br><code>timeout</code><br>&emsp;- Desired timeout in usec.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown, cudaErrorLaunchTimeout<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1g83dd1bfea48c093d3f0b247754970f58\">Full Description</a>"
	},
	"cudaEGLStreamConsumerConnect":{
		"id": "cudaEGLStreamConsumerConnect",
		"value": "<p><b><code>__host__cudaError_t cudaEGLStreamConsumerConnect ( cudaEglStreamConnection* conn, EGLStreamKHR eglStream )</code></b></p>",
		"description": "<p>Connect CUDA to EGLStream as a consumer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Pointer to the returned connection handle<br><code>eglStream</code><br>&emsp;- EGLStreamKHR handle<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1g7993b0e3802420547e3f403549be65a1\">Full Description</a>"
	},
	"cudaEGLStreamConsumerConnectWithFlags":{
		"id": "cudaEGLStreamConsumerConnectWithFlags",
		"value": "<p><b><code>__host__cudaError_t cudaEGLStreamConsumerConnectWithFlags ( cudaEglStreamConnection* conn, EGLStreamKHR eglStream, unsigned int flags )</code></b></p>",
		"description": "<p>Connect CUDA to EGLStream as a consumer with given flags.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Pointer to the returned connection handle<br><code>eglStream</code><br>&emsp;- EGLStreamKHR handle<br><code>flags</code><br>&emsp;- Flags denote intended location - system or video.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1g4e2d79eb6bcb9eca4f6e3f13eb3f7fc3\">Full Description</a>"
	},
	"cudaEGLStreamConsumerDisconnect":{
		"id": "cudaEGLStreamConsumerDisconnect",
		"value": "<p><b><code>__host__cudaError_t cudaEGLStreamConsumerDisconnect ( cudaEglStreamConnection* conn )</code></b></p>",
		"description": "<p>Disconnect CUDA as a consumer to EGLStream .</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Conection to disconnect.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1gb2ef252e72ad2419506f3cf305753c6a\">Full Description</a>"
	},
	"cudaEGLStreamConsumerReleaseFrame":{
		"id": "cudaEGLStreamConsumerReleaseFrame",
		"value": "<p><b><code>__host__cudaError_t cudaEGLStreamConsumerReleaseFrame ( cudaEglStreamConnection* conn, cudaGraphicsResource_t pCudaResource, cudaStream_t* pStream )</code></b></p>",
		"description": "<p>Releases the last frame acquired from the EGLStream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Connection on which to release<br><code>pCudaResource</code><br>&emsp;- CUDA resource whose corresponding frame is to be released<br><code>pStream</code><br>&emsp;- CUDA stream on which release will be done.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1g51b3df89a3e0eb8baad7449674797467\">Full Description</a>"
	},
	"cudaEGLStreamProducerConnect":{
		"id": "cudaEGLStreamProducerConnect",
		"value": "<p><b><code>__host__cudaError_t cudaEGLStreamProducerConnect ( cudaEglStreamConnection* conn, EGLStreamKHR eglStream, EGLint width, EGLint height )</code></b></p>",
		"description": "<p>Connect CUDA to EGLStream as a producer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Pointer to the returned connection handle<br><code>eglStream</code><br>&emsp;- EGLStreamKHR handle<br><code>width</code><br>&emsp;- width of the image to be submitted to the stream<br><code>height</code><br>&emsp;- height of the image to be submitted to the stream<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1gf35966d50689874614985f688a888c03\">Full Description</a>"
	},
	"cudaEGLStreamProducerDisconnect":{
		"id": "cudaEGLStreamProducerDisconnect",
		"value": "<p><b><code>__host__cudaError_t cudaEGLStreamProducerDisconnect ( cudaEglStreamConnection* conn )</code></b></p>",
		"description": "<p>Disconnect CUDA as a producer to EGLStream .</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Conection to disconnect.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1g381335525d81342c29c0b62cc4f64dc9\">Full Description</a>"
	},
	"cudaEGLStreamProducerPresentFrame":{
		"id": "cudaEGLStreamProducerPresentFrame",
		"value": "<p><b><code>__host__cudaError_t cudaEGLStreamProducerPresentFrame ( cudaEglStreamConnection* conn, cudaEglFrame eglframe, cudaStream_t* pStream )</code></b></p>",
		"description": "<p>Present a CUDA eglFrame to the EGLStream with CUDA as a producer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Connection on which to present the CUDA array<br><code>eglframe</code><br>&emsp;- CUDA Eglstream Proucer Frame handle to be sent to the consumer over EglStream.<br><code>pStream</code><br>&emsp;- CUDA stream on which to present the frame.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1g5c84a3778586dda401df00052ae5753b\">Full Description</a>"
	},
	"cudaEGLStreamProducerReturnFrame":{
		"id": "cudaEGLStreamProducerReturnFrame",
		"value": "<p><b><code>__host__cudaError_t cudaEGLStreamProducerReturnFrame ( cudaEglStreamConnection* conn, cudaEglFrame* eglframe, cudaStream_t* pStream )</code></b></p>",
		"description": "<p>Return the CUDA eglFrame to the EGLStream last released by the consumer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Connection on which to present the CUDA array<br><code>eglframe</code><br>&emsp;- CUDA Eglstream Proucer Frame handle returned from the consumer over EglStream.<br><code>pStream</code><br>&emsp;- CUDA stream on which to return the frame.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorLaunchTimeout, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1g631d1080365d32a35a19b87584725748\">Full Description</a>"
	},
	"cudaEventCreateFromEGLSync":{
		"id": "cudaEventCreateFromEGLSync",
		"value": "<p><b><code>__host__cudaError_t cudaEventCreateFromEGLSync ( cudaEvent_t* phEvent, EGLSyncKHR eglSync, unsigned int flags )</code></b></p>",
		"description": "<p>Creates an event from EGLSync object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phEvent</code><br>&emsp;- Returns newly created event<br><code>eglSync</code><br>&emsp;- Opaque handle to EGLSync object<br><code>flags</code><br>&emsp;- Event creation flags<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInitializationError, cudaErrorInvalidValue, cudaErrorLaunchFailure, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1gd9fcc4b06f734887d27aae6f0a57fa95\">Full Description</a>"
	},
	"cudaGraphicsEGLRegisterImage":{
		"id": "cudaGraphicsEGLRegisterImage",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsEGLRegisterImage ( cudaGraphicsResource** pCudaResource, EGLImageKHR image, unsigned int flags )</code></b></p>",
		"description": "<p>Registers an EGL image.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaResource</code><br>&emsp;- Pointer to the returned object handle<br><code>image</code><br>&emsp;- An EGLImageKHR image which can be used to create target resource.<br><code>flags</code><br>&emsp;- Map flags<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1g8813b57a44bdd30177666110530d1dcf\">Full Description</a>"
	},
	"cudaGraphicsResourceGetMappedEglFrame":{
		"id": "cudaGraphicsResourceGetMappedEglFrame",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsResourceGetMappedEglFrame ( cudaEglFrame* eglFrame, cudaGraphicsResource_t resource, unsigned int index, unsigned int mipLevel )</code></b></p>",
		"description": "<p>Get an eglFrame through which to access a registered EGL graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>eglFrame</code><br>&emsp;- Returned eglFrame.<br><code>resource</code><br>&emsp;- Registered resource to access.<br><code>index</code><br>&emsp;- Index for cubemap surfaces.<br><code>mipLevel</code><br>&emsp;- Mipmap level for the subresource to access.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__EGL.html#group__CUDART__EGL_1gdd6215655a241c047d6d4939e242202a\">Full Description</a>"
	},
	"cudaGraphicsMapResources":{
		"id": "cudaGraphicsMapResources",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsMapResources ( int count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Map graphics resources for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to map<br><code>resources</code><br>&emsp;- Resources to map for CUDA<br><code>stream</code><br>&emsp;- Stream for synchronization<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1gad8fbe74d02adefb8e7efb4971ee6322\">Full Description</a>"
	},
	"cudaGraphicsResourceGetMappedMipmappedArray":{
		"id": "cudaGraphicsResourceGetMappedMipmappedArray",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsResourceGetMappedMipmappedArray ( cudaMipmappedArray_t* mipmappedArray, cudaGraphicsResource_t resource )</code></b></p>",
		"description": "<p>Get a mipmapped array through which to access a mapped graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>mipmappedArray</code><br>&emsp;- Returned mipmapped array through which resource may be accessed<br><code>resource</code><br>&emsp;- Mapped resource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g84c3772d2ed06cda8c92bc43cdc893d0\">Full Description</a>"
	},
	"cudaGraphicsResourceGetMappedPointer":{
		"id": "cudaGraphicsResourceGetMappedPointer",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsResourceGetMappedPointer ( void** devPtr, size_t* size, cudaGraphicsResource_t resource )</code></b></p>",
		"description": "<p>Get an device pointer through which to access a mapped graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Returned pointer through which resource may be accessed<br><code>size</code><br>&emsp;- Returned size of the buffer accessible starting at *devPtr<br><code>resource</code><br>&emsp;- Mapped resource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1ga36881081c8deb4df25c256158e1ac99\">Full Description</a>"
	},
	"cudaGraphicsResourceSetMapFlags":{
		"id": "cudaGraphicsResourceSetMapFlags",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsResourceSetMapFlags ( cudaGraphicsResource_t resource, unsigned int flags )</code></b></p>",
		"description": "<p>Set usage flags for mapping a graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Registered resource to set flags for<br><code>flags</code><br>&emsp;- Parameters for resource mapping<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g5f94a0043909fddc100ab5f0c2476b9f\">Full Description</a>"
	},
	"cudaGraphicsSubResourceGetMappedArray":{
		"id": "cudaGraphicsSubResourceGetMappedArray",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsSubResourceGetMappedArray ( cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel )</code></b></p>",
		"description": "<p>Get an array through which to access a subresource of a mapped graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>array</code><br>&emsp;- Returned array through which a subresource of resource may be accessed<br><code>resource</code><br>&emsp;- Mapped resource to access<br><code>arrayIndex</code><br>&emsp;- Array index for array textures or cubemap face index as defined by cudaGraphicsCubeFace for cubemap textures for the subresource to access<br><code>mipLevel</code><br>&emsp;- Mipmap level for the subresource to access<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g0dd6b5f024dfdcff5c28a08ef9958031\">Full Description</a>"
	},
	"cudaGraphicsUnmapResources":{
		"id": "cudaGraphicsUnmapResources",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsUnmapResources ( int count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 )</code></b></p>",
		"description": "<p>Unmap graphics resources.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to unmap<br><code>resources</code><br>&emsp;- Resources to unmap<br><code>stream</code><br>&emsp;- Stream for synchronization<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1g11988ab4431b11ddb7cbde7aedb60491\">Full Description</a>"
	},
	"cudaGraphicsUnregisterResource":{
		"id": "cudaGraphicsUnregisterResource",
		"value": "<p><b><code>__host__cudaError_t cudaGraphicsUnregisterResource ( cudaGraphicsResource_t resource )</code></b></p>",
		"description": "<p>Unregisters a graphics resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Resource to unregister<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidResourceHandle, cudaErrorUnknown<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__INTEROP.html#group__CUDART__INTEROP_1gc65d1f2900086747de1e57301d709940\">Full Description</a>"
	},
	"cudaCreateChannelDesc":{
		"id": "cudaCreateChannelDesc",
		"value": "<p><b><code>__host__cudaChannelFormatDesc cudaCreateChannelDesc ( int x, int y, int z, int w, cudaChannelFormatKind f )</code></b></p>",
		"description": "<p>Returns a channel descriptor using the specified format.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>x</code><br>&emsp;- X component<br><code>y</code><br>&emsp;- Y component<br><code>z</code><br>&emsp;- Z component<br><code>w</code><br>&emsp;- W component<br><code>f</code><br>&emsp;- Channel format<br></p><p><b>Returns</b><br>Channel descriptor with format f<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT_1g39df9e3b6edc41cd6f189d2109672ca5\">Full Description</a>"
	},
	"cudaCreateTextureObject":{
		"id": "cudaCreateTextureObject",
		"value": "<p><b><code>__host__cudaError_t cudaCreateTextureObject ( cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc )</code></b></p>",
		"description": "<p>Creates a texture object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pTexObject</code><br>&emsp;- Texture object to create<br><code>pResDesc</code><br>&emsp;- Resource descriptor<br><code>pTexDesc</code><br>&emsp;- Texture descriptor<br><code>pResViewDesc</code><br>&emsp;- Resource view descriptor<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT_1g16ac75814780c3a16e4c63869feb9ad3\">Full Description</a>"
	},
	"cudaDestroyTextureObject":{
		"id": "cudaDestroyTextureObject",
		"value": "<p><b><code>__host__cudaError_t cudaDestroyTextureObject ( cudaTextureObject_t texObject )</code></b></p>",
		"description": "<p>Destroys a texture object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>texObject</code><br>&emsp;- Texture object to destroy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT_1g27be12e215f162cc877be94390da75bb\">Full Description</a>"
	},
	"cudaGetChannelDesc":{
		"id": "cudaGetChannelDesc",
		"value": "<p><b><code>__host__cudaError_t cudaGetChannelDesc ( cudaChannelFormatDesc* desc, cudaArray_const_t array )</code></b></p>",
		"description": "<p>Get the channel descriptor of an array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>desc</code><br>&emsp;- Channel format<br><code>array</code><br>&emsp;- Memory array on device<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT_1g5f6e4880413544752cb90e3089203ee7\">Full Description</a>"
	},
	"cudaGetTextureObjectResourceDesc":{
		"id": "cudaGetTextureObjectResourceDesc",
		"value": "<p><b><code>__host__cudaError_t cudaGetTextureObjectResourceDesc ( cudaResourceDesc* pResDesc, cudaTextureObject_t texObject )</code></b></p>",
		"description": "<p>Returns a texture object's resource descriptor.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResDesc</code><br>&emsp;- Resource descriptor<br><code>texObject</code><br>&emsp;- Texture object<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT_1g4ac6e3f033c356ecc4ab6fb85154f066\">Full Description</a>"
	},
	"cudaGetTextureObjectResourceViewDesc":{
		"id": "cudaGetTextureObjectResourceViewDesc",
		"value": "<p><b><code>__host__cudaError_t cudaGetTextureObjectResourceViewDesc ( cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject )</code></b></p>",
		"description": "<p>Returns a texture object's resource view descriptor.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResViewDesc</code><br>&emsp;- Resource view descriptor<br><code>texObject</code><br>&emsp;- Texture object<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT_1g0332bef8105771003c64d7f09d6163fe\">Full Description</a>"
	},
	"cudaGetTextureObjectTextureDesc":{
		"id": "cudaGetTextureObjectTextureDesc",
		"value": "<p><b><code>__host__cudaError_t cudaGetTextureObjectTextureDesc ( cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject )</code></b></p>",
		"description": "<p>Returns a texture object's texture descriptor.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pTexDesc</code><br>&emsp;- Texture descriptor<br><code>texObject</code><br>&emsp;- Texture object<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TEXTURE__OBJECT.html#group__CUDART__TEXTURE__OBJECT_1g152565714ff9dce6867b6099afc05e50\">Full Description</a>"
	},
	"cudaCreateSurfaceObject":{
		"id": "cudaCreateSurfaceObject",
		"value": "<p><b><code>__host__cudaError_t cudaCreateSurfaceObject ( cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc )</code></b></p>",
		"description": "<p>Creates a surface object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pSurfObject</code><br>&emsp;- Surface object to create<br><code>pResDesc</code><br>&emsp;- Resource descriptor<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidChannelDescriptor, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__SURFACE__OBJECT.html#group__CUDART__SURFACE__OBJECT_1g958899474ab2c5f40d233b524d6c5a01\">Full Description</a>"
	},
	"cudaDestroySurfaceObject":{
		"id": "cudaDestroySurfaceObject",
		"value": "<p><b><code>__host__cudaError_t cudaDestroySurfaceObject ( cudaSurfaceObject_t surfObject )</code></b></p>",
		"description": "<p>Destroys a surface object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>surfObject</code><br>&emsp;- Surface object to destroy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__SURFACE__OBJECT.html#group__CUDART__SURFACE__OBJECT_1g9fab66c3a39b9f8f52b718eea794ad60\">Full Description</a>"
	},
	"cudaGetSurfaceObjectResourceDesc":{
		"id": "cudaGetSurfaceObjectResourceDesc",
		"value": "<p><b><code>__host__cudaError_t cudaGetSurfaceObjectResourceDesc ( cudaResourceDesc* pResDesc, cudaSurfaceObject_t surfObject )</code></b></p>",
		"description": "<p>Returns a surface object's resource descriptor Returns the resource descriptor for the surface object specified by surfObject.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResDesc</code><br>&emsp;- Resource descriptor<br><code>surfObject</code><br>&emsp;- Surface object<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__SURFACE__OBJECT.html#group__CUDART__SURFACE__OBJECT_1gd7087318f73ae605645d6721d51486bd\">Full Description</a>"
	},
	"cudaDriverGetVersion":{
		"id": "cudaDriverGetVersion",
		"value": "<p><b><code>__host__cudaError_t cudaDriverGetVersion ( int* driverVersion )</code></b></p>",
		"description": "<p>Returns the latest version of CUDA supported by the driver.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>driverVersion</code><br>&emsp;- Returns the CUDA driver version.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART____VERSION.html#group__CUDART____VERSION_1g8a06ee14a0551606b7c780084d5564ab\">Full Description</a>"
	},
	"cudaRuntimeGetVersion":{
		"id": "cudaRuntimeGetVersion",
		"value": "<p><b><code>__host____device__cudaError_t cudaRuntimeGetVersion ( int* runtimeVersion )</code></b></p>",
		"description": "<p>Returns the CUDA Runtime version.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>runtimeVersion</code><br>&emsp;- Returns the CUDA Runtime version.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART____VERSION.html#group__CUDART____VERSION_1g0e3952c7802fd730432180f1f4a6cdc6\">Full Description</a>"
	},
	"cudaDeviceGetGraphMemAttribute":{
		"id": "cudaDeviceGetGraphMemAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGetGraphMemAttribute ( int device, cudaGraphMemAttributeType attr, void* value )</code></b></p>",
		"description": "<p>Query asynchronous allocation attributes related to graphs.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Specifies the scope of the query<br><code>attr</code><br>&emsp;- attribute to get<br><code>value</code><br>&emsp;- retrieved value<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g4da4d0f1762c09beffd631474963c722\">Full Description</a>"
	},
	"cudaDeviceGraphMemTrim":{
		"id": "cudaDeviceGraphMemTrim",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceGraphMemTrim ( int device )</code></b></p>",
		"description": "<p>Free unused memory that was cached on the specified device for use with graphs back to the OS.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- The device for which cached memory should be freed.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g7f62818c056c1897e34932431086d759\">Full Description</a>"
	},
	"cudaDeviceSetGraphMemAttribute":{
		"id": "cudaDeviceSetGraphMemAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaDeviceSetGraphMemAttribute ( int device, cudaGraphMemAttributeType attr, void* value )</code></b></p>",
		"description": "<p>Set asynchronous allocation attributes related to graphs.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Specifies the scope of the query<br><code>attr</code><br>&emsp;- attribute to get<br><code>value</code><br>&emsp;- pointer to value to set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ge66093928e65377e7774da87e5b36030\">Full Description</a>"
	},
	"cudaGetCurrentGraphExec":{
		"id": "cudaGetCurrentGraphExec",
		"value": "<p><b><code>__device__cudaGraphExec_t cudaGetCurrentGraphExec ( void )</code></b></p>",
		"description": "<p>Get the currently running device graph id.</p>",
		"additional_information": "<p><b>Returns</b><br>Returns the current device graph id, 0 if the call is outside of a device graph.<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gfa0792b925e31c0064e7ab85dece1857\">Full Description</a>"
	},
	"cudaGraphAddChildGraphNode":{
		"id": "cudaGraphAddChildGraphNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddChildGraphNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph )</code></b></p>",
		"description": "<p>Creates a child graph node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>childGraph</code><br>&emsp;- The graph to clone into this node<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g570f14c3186f650206497b6afbb4f499\">Full Description</a>"
	},
	"cudaGraphAddDependencies":{
		"id": "cudaGraphAddDependencies",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddDependencies ( cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies )</code></b></p>",
		"description": "<p>Adds dependency edges to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- Graph to which dependencies are added<br><code>from</code><br>&emsp;- Array of nodes that provide the dependencies<br><code>to</code><br>&emsp;- Array of dependent nodes<br><code>numDependencies</code><br>&emsp;- Number of dependencies to be added<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g62b8d36e785533f47a067c554ceb899a\">Full Description</a>"
	},
	"cudaGraphAddEmptyNode":{
		"id": "cudaGraphAddEmptyNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddEmptyNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies )</code></b></p>",
		"description": "<p>Creates an empty node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g210a87acea26ac48c6bb29a69e9f2ca0\">Full Description</a>"
	},
	"cudaGraphAddEventRecordNode":{
		"id": "cudaGraphAddEventRecordNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddEventRecordNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event )</code></b></p>",
		"description": "<p>Creates an event record node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br><code>graph</code><br><code>pDependencies</code><br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>event</code><br>&emsp;- Event for the node<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g4e9503a234a534f87ba817fe76a3d7f7\">Full Description</a>"
	},
	"cudaGraphAddEventWaitNode":{
		"id": "cudaGraphAddEventWaitNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddEventWaitNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event )</code></b></p>",
		"description": "<p>Creates an event wait node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br><code>graph</code><br><code>pDependencies</code><br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>event</code><br>&emsp;- Event for the node<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gd89bd28ef28cc7772219f19b1bbaef97\">Full Description</a>"
	},
	"cudaGraphAddExternalSemaphoresSignalNode":{
		"id": "cudaGraphAddExternalSemaphoresSignalNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddExternalSemaphoresSignalNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams )</code></b></p>",
		"description": "<p>Creates an external semaphore signal node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>nodeParams</code><br>&emsp;- Parameters for the node<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gfd22862967e2019edf99de8d41f74d33\">Full Description</a>"
	},
	"cudaGraphAddExternalSemaphoresWaitNode":{
		"id": "cudaGraphAddExternalSemaphoresWaitNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddExternalSemaphoresWaitNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams )</code></b></p>",
		"description": "<p>Creates an external semaphore wait node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>nodeParams</code><br>&emsp;- Parameters for the node<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g9a6b7fc6c6b8c1001792862ec34bd62d\">Full Description</a>"
	},
	"cudaGraphAddHostNode":{
		"id": "cudaGraphAddHostNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddHostNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams )</code></b></p>",
		"description": "<p>Creates a host execution node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>pNodeParams</code><br>&emsp;- Parameters for the host node<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorNotSupported, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g30e16d2715f09683f0aa8ac2b870cf71\">Full Description</a>"
	},
	"cudaGraphAddKernelNode":{
		"id": "cudaGraphAddKernelNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddKernelNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams )</code></b></p>",
		"description": "<p>Creates a kernel execution node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>pNodeParams</code><br>&emsp;- Parameters for the GPU execution node<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDeviceFunction<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gcbdee72d9f3b4ce17654ee197fc02651\">Full Description</a>"
	},
	"cudaGraphAddMemAllocNode":{
		"id": "cudaGraphAddMemAllocNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddMemAllocNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams )</code></b></p>",
		"description": "<p>Creates an allocation node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>nodeParams</code><br>&emsp;- Parameters for the node<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorCudartUnloading, cudaErrorInitializationError, cudaErrorNotSupported, cudaErrorInvalidValue, cudaErrorOutOfMemory<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g6fc8b917f0d8047f573c786d9465185d\">Full Description</a>"
	},
	"cudaGraphAddMemFreeNode":{
		"id": "cudaGraphAddMemFreeNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddMemFreeNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr )</code></b></p>",
		"description": "<p>Creates a memory free node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>dptr</code><br>&emsp;- Address of memory to free<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorCudartUnloading, cudaErrorInitializationError, cudaErrorNotSupported, cudaErrorInvalidValue, cudaErrorOutOfMemory<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g97d03de66abf0237f262a1d65cc04963\">Full Description</a>"
	},
	"cudaGraphAddMemcpyNode":{
		"id": "cudaGraphAddMemcpyNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddMemcpyNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams )</code></b></p>",
		"description": "<p>Creates a memcpy node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>pCopyParams</code><br>&emsp;- Parameters for the memory copy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gdcbd286e72244777071984c367b45bf6\">Full Description</a>"
	},
	"cudaGraphAddMemcpyNode1D":{
		"id": "cudaGraphAddMemcpyNode1D",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddMemcpyNode1D ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Creates a 1D memcpy node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>dst</code><br>&emsp;- Destination memory address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ga41a8a084842ff6917d3d8a443686392\">Full Description</a>"
	},
	"cudaGraphAddMemcpyNodeFromSymbol":{
		"id": "cudaGraphAddMemcpyNodeFromSymbol",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddMemcpyNodeFromSymbol ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* symbol, size_t count, size_t offset, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Creates a memcpy node to copy from a symbol on the device and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>dst</code><br>&emsp;- Destination memory address<br><code>symbol</code><br>&emsp;- Device symbol address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g574e3ef20fe380ff1137d52c642d9d3b\">Full Description</a>"
	},
	"cudaGraphAddMemcpyNodeToSymbol":{
		"id": "cudaGraphAddMemcpyNodeToSymbol",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddMemcpyNodeToSymbol ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const void* symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Creates a memcpy node to copy to a symbol on the device and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>symbol</code><br>&emsp;- Device symbol address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g90b7652d74fe7b89b326a950fd28aa1c\">Full Description</a>"
	},
	"cudaGraphAddMemsetNode":{
		"id": "cudaGraphAddMemsetNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphAddMemsetNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams )</code></b></p>",
		"description": "<p>Creates a memset node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphNode</code><br>&emsp;- Returns newly created node<br><code>graph</code><br>&emsp;- Graph to which to add the node<br><code>pDependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>pMemsetParams</code><br>&emsp;- Parameters for the memory set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDevice<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g8cbf926b7822791bc920db8f5c2525ec\">Full Description</a>"
	},
	"cudaGraphChildGraphNodeGetGraph":{
		"id": "cudaGraphChildGraphNodeGetGraph",
		"value": "<p><b><code>__host__cudaError_t cudaGraphChildGraphNodeGetGraph ( cudaGraphNode_t node, cudaGraph_t* pGraph )</code></b></p>",
		"description": "<p>Gets a handle to the embedded graph of a child graph node.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to get the embedded graph for<br><code>pGraph</code><br>&emsp;- Location to store a handle to the graph<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gc6d2c94a4b980f057f1d29b1ff7521d0\">Full Description</a>"
	},
	"cudaGraphClone":{
		"id": "cudaGraphClone",
		"value": "<p><b><code>__host__cudaError_t cudaGraphClone ( cudaGraph_t* pGraphClone, cudaGraph_t originalGraph )</code></b></p>",
		"description": "<p>Clones a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphClone</code><br>&emsp;- Returns newly created cloned graph<br><code>originalGraph</code><br>&emsp;- Graph to clone<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g711477355655f00773a0885fbf2891d6\">Full Description</a>"
	},
	"cudaGraphCreate":{
		"id": "cudaGraphCreate",
		"value": "<p><b><code>__host__cudaError_t cudaGraphCreate ( cudaGraph_t* pGraph, unsigned int flags )</code></b></p>",
		"description": "<p>Creates a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraph</code><br>&emsp;- Returns newly created graph<br><code>flags</code><br>&emsp;- Graph creation flags, must be 0<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g8571d82cab46ee2b203e2b541cce7be2\">Full Description</a>"
	},
	"cudaGraphDebugDotPrint":{
		"id": "cudaGraphDebugDotPrint",
		"value": "<p><b><code>__host__cudaError_t cudaGraphDebugDotPrint ( cudaGraph_t graph, const char* path, unsigned int flags )</code></b></p>",
		"description": "<p>Write a DOT file describing graph structure.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- The graph to create a DOT file from<br><code>path</code><br>&emsp;- The path to write the DOT file to<br><code>flags</code><br>&emsp;- Flags from cudaGraphDebugDotFlags for specifying which additional node information to write<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorOperatingSystem<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gbec177c250000405c570dc8c4bde20db\">Full Description</a>"
	},
	"cudaGraphDestroy":{
		"id": "cudaGraphDestroy",
		"value": "<p><b><code>__host__cudaError_t cudaGraphDestroy ( cudaGraph_t graph )</code></b></p>",
		"description": "<p>Destroys a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- Graph to destroy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ga351557d4d9ecab23d56395599b0e069\">Full Description</a>"
	},
	"cudaGraphDestroyNode":{
		"id": "cudaGraphDestroyNode",
		"value": "<p><b><code>__host__cudaError_t cudaGraphDestroyNode ( cudaGraphNode_t node )</code></b></p>",
		"description": "<p>Remove a node from the graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to remove<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g42a5882801bdf72b56fa6833a08507d7\">Full Description</a>"
	},
	"cudaGraphEventRecordNodeGetEvent":{
		"id": "cudaGraphEventRecordNodeGetEvent",
		"value": "<p><b><code>__host__cudaError_t cudaGraphEventRecordNodeGetEvent ( cudaGraphNode_t node, cudaEvent_t* event_out )</code></b></p>",
		"description": "<p>Returns the event associated with an event record node.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br><code>event_out</code><br>&emsp;- Pointer to return the event<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g6325e317b56c69fe2d905e79a1858a01\">Full Description</a>"
	},
	"cudaGraphEventRecordNodeSetEvent":{
		"id": "cudaGraphEventRecordNodeSetEvent",
		"value": "<p><b><code>__host__cudaError_t cudaGraphEventRecordNodeSetEvent ( cudaGraphNode_t node, cudaEvent_t event )</code></b></p>",
		"description": "<p>Sets an event record node's event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br><code>event</code><br>&emsp;- Event to use<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g4c941bcf045a9b0b8ca036dec56fd59a\">Full Description</a>"
	},
	"cudaGraphEventWaitNodeGetEvent":{
		"id": "cudaGraphEventWaitNodeGetEvent",
		"value": "<p><b><code>__host__cudaError_t cudaGraphEventWaitNodeGetEvent ( cudaGraphNode_t node, cudaEvent_t* event_out )</code></b></p>",
		"description": "<p>Returns the event associated with an event wait node.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br><code>event_out</code><br>&emsp;- Pointer to return the event<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gb30b23c7f544664884147b03c8f88ca5\">Full Description</a>"
	},
	"cudaGraphEventWaitNodeSetEvent":{
		"id": "cudaGraphEventWaitNodeSetEvent",
		"value": "<p><b><code>__host__cudaError_t cudaGraphEventWaitNodeSetEvent ( cudaGraphNode_t node, cudaEvent_t event )</code></b></p>",
		"description": "<p>Sets an event wait node's event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br><code>event</code><br>&emsp;- Event to use<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g782ff4294919d31d1fb92bd7fc02cd67\">Full Description</a>"
	},
	"cudaGraphExecChildGraphNodeSetParams":{
		"id": "cudaGraphExecChildGraphNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecChildGraphNodeSetParams ( cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph )</code></b></p>",
		"description": "<p>Updates node parameters in the child graph node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>node</code><br>&emsp;- Host node from the graph which was used to instantiate graphExec<br><code>childGraph</code><br>&emsp;- The graph supplying the updated parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g1af21abb971b6c5117863c05c5ba29ae\">Full Description</a>"
	},
	"cudaGraphExecDestroy":{
		"id": "cudaGraphExecDestroy",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecDestroy ( cudaGraphExec_t graphExec )</code></b></p>",
		"description": "<p>Destroys an executable graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graphExec</code><br>&emsp;- Executable graph to destroy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g6d101c2cbc6dea2b4fba0fbe407eb91f\">Full Description</a>"
	},
	"cudaGraphExecEventRecordNodeSetEvent":{
		"id": "cudaGraphExecEventRecordNodeSetEvent",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecEventRecordNodeSetEvent ( cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event )</code></b></p>",
		"description": "<p>Sets the event for an event record node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Event record node from the graph from which graphExec was instantiated<br><code>event</code><br>&emsp;- Updated event to use<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g79d6d9d5868d8f3ac1902fceee36ffeb\">Full Description</a>"
	},
	"cudaGraphExecEventWaitNodeSetEvent":{
		"id": "cudaGraphExecEventWaitNodeSetEvent",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecEventWaitNodeSetEvent ( cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event )</code></b></p>",
		"description": "<p>Sets the event for an event wait node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Event wait node from the graph from which graphExec was instantiated<br><code>event</code><br>&emsp;- Updated event to use<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gd67601fb4c13f7259c08d1cabbd0777b\">Full Description</a>"
	},
	"cudaGraphExecExternalSemaphoresSignalNodeSetParams":{
		"id": "cudaGraphExecExternalSemaphoresSignalNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams ( cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for an external semaphore signal node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- semaphore signal node from the graph from which graphExec was instantiated<br><code>nodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gd59c5824072dbeac3b63eb3fdfd73b75\">Full Description</a>"
	},
	"cudaGraphExecExternalSemaphoresWaitNodeSetParams":{
		"id": "cudaGraphExecExternalSemaphoresWaitNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams ( cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for an external semaphore wait node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- semaphore wait node from the graph from which graphExec was instantiated<br><code>nodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g3a5ae8df728c7e0fe0134399cca14992\">Full Description</a>"
	},
	"cudaGraphExecGetFlags":{
		"id": "cudaGraphExecGetFlags",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecGetFlags ( cudaGraphExec_t graphExec, unsigned long long* flags )</code></b></p>",
		"description": "<p>Query the instantiation flags of an executable graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graphExec</code><br>&emsp;- The executable graph to query<br><code>flags</code><br>&emsp;- Returns the instantiation flags<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g0288c08672311ca226ffc49b061237c9\">Full Description</a>"
	},
	"cudaGraphExecHostNodeSetParams":{
		"id": "cudaGraphExecHostNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecHostNodeSetParams ( cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for a host node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>node</code><br>&emsp;- Host node from the graph which was used to instantiate graphExec<br><code>pNodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g194e0d6d759200ae2ec5669c3db694b0\">Full Description</a>"
	},
	"cudaGraphExecKernelNodeSetParams":{
		"id": "cudaGraphExecKernelNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecKernelNodeSetParams ( cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for a kernel node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>node</code><br>&emsp;- kernel node from the graph from which graphExec was instantiated<br><code>pNodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g119efd892d546aece0d7ebe48c37b02b\">Full Description</a>"
	},
	"cudaGraphExecMemcpyNodeSetParams":{
		"id": "cudaGraphExecMemcpyNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecMemcpyNodeSetParams ( cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for a memcpy node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>node</code><br>&emsp;- Memcpy node from the graph which was used to instantiate graphExec<br><code>pNodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gd1fb105ef3177d1eaaa6eff67a6596c8\">Full Description</a>"
	},
	"cudaGraphExecMemcpyNodeSetParams1D":{
		"id": "cudaGraphExecMemcpyNodeSetParams1D",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecMemcpyNodeSetParams1D ( cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Sets the parameters for a memcpy node in the given graphExec to perform a 1-dimensional copy.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>node</code><br>&emsp;- Memcpy node from the graph which was used to instantiate graphExec<br><code>dst</code><br>&emsp;- Destination memory address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g2c45568913d2d3fb25d3f509b27ad8aa\">Full Description</a>"
	},
	"cudaGraphExecMemcpyNodeSetParamsFromSymbol":{
		"id": "cudaGraphExecMemcpyNodeSetParamsFromSymbol",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol ( cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* symbol, size_t count, size_t offset, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Sets the parameters for a memcpy node in the given graphExec to copy from a symbol on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>node</code><br>&emsp;- Memcpy node from the graph which was used to instantiate graphExec<br><code>dst</code><br>&emsp;- Destination memory address<br><code>symbol</code><br>&emsp;- Device symbol address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g6d26a034ed24b07805f2d6495d48a27f\">Full Description</a>"
	},
	"cudaGraphExecMemcpyNodeSetParamsToSymbol":{
		"id": "cudaGraphExecMemcpyNodeSetParamsToSymbol",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol ( cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void* symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Sets the parameters for a memcpy node in the given graphExec to copy to a symbol on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>node</code><br>&emsp;- Memcpy node from the graph which was used to instantiate graphExec<br><code>symbol</code><br>&emsp;- Device symbol address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g590bca1e0fddb7d45523f705a3e0321f\">Full Description</a>"
	},
	"cudaGraphExecMemsetNodeSetParams":{
		"id": "cudaGraphExecMemsetNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecMemsetNodeSetParams ( cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for a memset node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>node</code><br>&emsp;- Memset node from the graph which was used to instantiate graphExec<br><code>pNodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gf52113ce7ca27d3d61b9ebeb9728f5c6\">Full Description</a>"
	},
	"cudaGraphExecUpdate":{
		"id": "cudaGraphExecUpdate",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExecUpdate ( cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo )</code></b></p>",
		"description": "<p>Check whether an executable graph can be updated with a graph and perform the update if possible.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;The instantiated graph to be updated<br><code>hGraph</code><br>&emsp;The graph containing the updated parameters<br><code>resultInfo</code><br>&emsp;the error info structure<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorGraphExecUpdateFailure,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g34c8e1e6118aa68fc715250dfd93c1c4\">Full Description</a>"
	},
	"cudaGraphExternalSemaphoresSignalNodeGetParams":{
		"id": "cudaGraphExternalSemaphoresSignalNodeGetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams ( cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out )</code></b></p>",
		"description": "<p>Returns an external semaphore signal node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>params_out</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ga676e8e49ebdcb66125efe57d7db43fe\">Full Description</a>"
	},
	"cudaGraphExternalSemaphoresSignalNodeSetParams":{
		"id": "cudaGraphExternalSemaphoresSignalNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams ( cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams )</code></b></p>",
		"description": "<p>Sets an external semaphore signal node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the parameters for<br><code>nodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ga0c8c93efbc0d4776a9b8fdec76f2ad4\">Full Description</a>"
	},
	"cudaGraphExternalSemaphoresWaitNodeGetParams":{
		"id": "cudaGraphExternalSemaphoresWaitNodeGetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams ( cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out )</code></b></p>",
		"description": "<p>Returns an external semaphore wait node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>params_out</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g8d32ea4e11e6c4544fb835d920e7195e\">Full Description</a>"
	},
	"cudaGraphExternalSemaphoresWaitNodeSetParams":{
		"id": "cudaGraphExternalSemaphoresWaitNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams ( cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams )</code></b></p>",
		"description": "<p>Sets an external semaphore wait node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the parameters for<br><code>nodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g08fa69f028483357dfa2b7b9d5f5c62e\">Full Description</a>"
	},
	"cudaGraphGetEdges":{
		"id": "cudaGraphGetEdges",
		"value": "<p><b><code>__host__cudaError_t cudaGraphGetEdges ( cudaGraph_t graph, cudaGraphNode_t* from, cudaGraphNode_t* to, size_t* numEdges )</code></b></p>",
		"description": "<p>Returns a graph's dependency edges.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- Graph to get the edges from<br><code>from</code><br>&emsp;- Location to return edge endpoints<br><code>to</code><br>&emsp;- Location to return edge endpoints<br><code>numEdges</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g92618db1da137989c79efc9998bcd8e2\">Full Description</a>"
	},
	"cudaGraphGetNodes":{
		"id": "cudaGraphGetNodes",
		"value": "<p><b><code>__host__cudaError_t cudaGraphGetNodes ( cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes )</code></b></p>",
		"description": "<p>Returns a graph's nodes.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- Graph to query<br><code>nodes</code><br>&emsp;- Pointer to return the nodes<br><code>numNodes</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g575a3f085d0abbc380a68bd49db712ac\">Full Description</a>"
	},
	"cudaGraphGetRootNodes":{
		"id": "cudaGraphGetRootNodes",
		"value": "<p><b><code>__host__cudaError_t cudaGraphGetRootNodes ( cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes )</code></b></p>",
		"description": "<p>Returns a graph's root nodes.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- Graph to query<br><code>pRootNodes</code><br>&emsp;- Pointer to return the root nodes<br><code>pNumRootNodes</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g2b57d54c33d121346b4d0be7305f1a44\">Full Description</a>"
	},
	"cudaGraphHostNodeGetParams":{
		"id": "cudaGraphHostNodeGetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphHostNodeGetParams ( cudaGraphNode_t node, cudaHostNodeParams* pNodeParams )</code></b></p>",
		"description": "<p>Returns a host node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to get the parameters for<br><code>pNodeParams</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g10d7f831e9d1ad7396552f6fec9b1da3\">Full Description</a>"
	},
	"cudaGraphHostNodeSetParams":{
		"id": "cudaGraphHostNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphHostNodeSetParams ( cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams )</code></b></p>",
		"description": "<p>Sets a host node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to set the parameters for<br><code>pNodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g08053fad74ee3ed7e1ab402d6c708920\">Full Description</a>"
	},
	"cudaGraphInstantiate":{
		"id": "cudaGraphInstantiate",
		"value": "<p><b><code>__host__cudaError_t cudaGraphInstantiate ( cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags = 0 )</code></b></p>",
		"description": "<p>Creates an executable graph from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphExec</code><br>&emsp;- Returns instantiated graph<br><code>graph</code><br>&emsp;- Graph to instantiate<br><code>flags</code><br>&emsp;- Flags to control instantiation. See CUgraphInstantiate_flags.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g0b72834c2e8a3c93c443c6c67626d0d9\">Full Description</a>"
	},
	"cudaGraphInstantiateWithFlags":{
		"id": "cudaGraphInstantiateWithFlags",
		"value": "<p><b><code>__host__cudaError_t cudaGraphInstantiateWithFlags ( cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags = 0 )</code></b></p>",
		"description": "<p>Creates an executable graph from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphExec</code><br>&emsp;- Returns instantiated graph<br><code>graph</code><br>&emsp;- Graph to instantiate<br><code>flags</code><br>&emsp;- Flags to control instantiation. See CUgraphInstantiate_flags.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gd4d586536547040944c05249ee26bc62\">Full Description</a>"
	},
	"cudaGraphInstantiateWithParams":{
		"id": "cudaGraphInstantiateWithParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphInstantiateWithParams ( cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams* instantiateParams )</code></b></p>",
		"description": "<p>Creates an executable graph from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pGraphExec</code><br>&emsp;- Returns instantiated graph<br><code>graph</code><br>&emsp;- Graph to instantiate<br><code>instantiateParams</code><br>&emsp;- Instantiation parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g49739708386dc6da9603eb7cc5557db4\">Full Description</a>"
	},
	"cudaGraphKernelNodeCopyAttributes":{
		"id": "cudaGraphKernelNodeCopyAttributes",
		"value": "<p><b><code>__host__cudaError_t cudaGraphKernelNodeCopyAttributes ( cudaGraphNode_t hSrc, cudaGraphNode_t hDst )</code></b></p>",
		"description": "<p>Copies attributes from source node to destination node.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidContext<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g131318ac4e85b212b6ce91c3164f9e41\">Full Description</a>"
	},
	"cudaGraphKernelNodeGetAttribute":{
		"id": "cudaGraphKernelNodeGetAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaGraphKernelNodeGetAttribute ( cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out )</code></b></p>",
		"description": "<p>Queries node attribute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br><code>attr</code><br><code>value_out</code><br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g636030d01fafba90e769aed0929e8bdb\">Full Description</a>"
	},
	"cudaGraphKernelNodeGetParams":{
		"id": "cudaGraphKernelNodeGetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphKernelNodeGetParams ( cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams )</code></b></p>",
		"description": "<p>Returns a kernel node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to get the parameters for<br><code>pNodeParams</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidDeviceFunction<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g931a1af826d30fdad0b556da917f6705\">Full Description</a>"
	},
	"cudaGraphKernelNodeSetAttribute":{
		"id": "cudaGraphKernelNodeSetAttribute",
		"value": "<p><b><code>__host__cudaError_t cudaGraphKernelNodeSetAttribute ( cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value )</code></b></p>",
		"description": "<p>Sets node attribute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br><code>attr</code><br><code>value</code><br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1geb5bf7ecda3a62d377c9e29de4eca54e\">Full Description</a>"
	},
	"cudaGraphKernelNodeSetParams":{
		"id": "cudaGraphKernelNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphKernelNodeSetParams ( cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams )</code></b></p>",
		"description": "<p>Sets a kernel node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to set the parameters for<br><code>pNodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorInvalidResourceHandle, cudaErrorMemoryAllocation<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ge7f5667a529966d77d0c0609c0ed7fee\">Full Description</a>"
	},
	"cudaGraphLaunch":{
		"id": "cudaGraphLaunch",
		"value": "<p><b><code>__host__cudaError_t cudaGraphLaunch ( cudaGraphExec_t graphExec, cudaStream_t stream )</code></b></p>",
		"description": "<p>Launches an executable graph in a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graphExec</code><br>&emsp;- Executable graph to launch<br><code>stream</code><br>&emsp;- Stream in which to launch the graph<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g1accfe1da0c605a577c22d9751a09597\">Full Description</a>"
	},
	"cudaGraphMemAllocNodeGetParams":{
		"id": "cudaGraphMemAllocNodeGetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphMemAllocNodeGetParams ( cudaGraphNode_t node, cudaMemAllocNodeParams* params_out )</code></b></p>",
		"description": "<p>Returns a memory alloc node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to get the parameters for<br><code>params_out</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ga7bb846be3de346815bc3f230e2c9710\">Full Description</a>"
	},
	"cudaGraphMemFreeNodeGetParams":{
		"id": "cudaGraphMemFreeNodeGetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphMemFreeNodeGetParams ( cudaGraphNode_t node, void* dptr_out )</code></b></p>",
		"description": "<p>Returns a memory free node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to get the parameters for<br><code>dptr_out</code><br>&emsp;- Pointer to return the device address<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g92377e76329f667700a5d1ffdfc72dab\">Full Description</a>"
	},
	"cudaGraphMemcpyNodeGetParams":{
		"id": "cudaGraphMemcpyNodeGetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphMemcpyNodeGetParams ( cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams )</code></b></p>",
		"description": "<p>Returns a memcpy node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to get the parameters for<br><code>pNodeParams</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g4c7ae8d8219b1374930a9c674c53297a\">Full Description</a>"
	},
	"cudaGraphMemcpyNodeSetParams":{
		"id": "cudaGraphMemcpyNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphMemcpyNodeSetParams ( cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams )</code></b></p>",
		"description": "<p>Sets a memcpy node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to set the parameters for<br><code>pNodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g7637a5bb50e75cb8c633cd6847631311\">Full Description</a>"
	},
	"cudaGraphMemcpyNodeSetParams1D":{
		"id": "cudaGraphMemcpyNodeSetParams1D",
		"value": "<p><b><code>__host__cudaError_t cudaGraphMemcpyNodeSetParams1D ( cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Sets a memcpy node's parameters to perform a 1-dimensional copy.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to set the parameters for<br><code>dst</code><br>&emsp;- Destination memory address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ge0e90688dc8567efb598bdb3d9d10e8e\">Full Description</a>"
	},
	"cudaGraphMemcpyNodeSetParamsFromSymbol":{
		"id": "cudaGraphMemcpyNodeSetParamsFromSymbol",
		"value": "<p><b><code>__host__cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol ( cudaGraphNode_t node, void* dst, const void* symbol, size_t count, size_t offset, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Sets a memcpy node's parameters to copy from a symbol on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to set the parameters for<br><code>dst</code><br>&emsp;- Destination memory address<br><code>symbol</code><br>&emsp;- Device symbol address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gcee74b54c2839356e1f0ea132e84c70c\">Full Description</a>"
	},
	"cudaGraphMemcpyNodeSetParamsToSymbol":{
		"id": "cudaGraphMemcpyNodeSetParamsToSymbol",
		"value": "<p><b><code>__host__cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol ( cudaGraphNode_t node, const void* symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )</code></b></p>",
		"description": "<p>Sets a memcpy node's parameters to copy to a symbol on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to set the parameters for<br><code>symbol</code><br>&emsp;- Device symbol address<br><code>src</code><br>&emsp;- Source memory address<br><code>count</code><br>&emsp;- Size in bytes to copy<br><code>offset</code><br>&emsp;- Offset from start of symbol in bytes<br><code>kind</code><br>&emsp;- Type of transfer<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gca5473d4d7f9e6f32ea2ef55e7827961\">Full Description</a>"
	},
	"cudaGraphMemsetNodeGetParams":{
		"id": "cudaGraphMemsetNodeGetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphMemsetNodeGetParams ( cudaGraphNode_t node, cudaMemsetParams* pNodeParams )</code></b></p>",
		"description": "<p>Returns a memset node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to get the parameters for<br><code>pNodeParams</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gbcf30e9fd58f677abe554d93cd71dbd1\">Full Description</a>"
	},
	"cudaGraphMemsetNodeSetParams":{
		"id": "cudaGraphMemsetNodeSetParams",
		"value": "<p><b><code>__host__cudaError_t cudaGraphMemsetNodeSetParams ( cudaGraphNode_t node, const cudaMemsetParams* pNodeParams )</code></b></p>",
		"description": "<p>Sets a memset node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to set the parameters for<br><code>pNodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g38f8ffa4b4a99916e7c87487145bcb01\">Full Description</a>"
	},
	"cudaGraphNodeFindInClone":{
		"id": "cudaGraphNodeFindInClone",
		"value": "<p><b><code>__host__cudaError_t cudaGraphNodeFindInClone ( cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph )</code></b></p>",
		"description": "<p>Finds a cloned version of a node.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pNode</code><br>&emsp;- Returns handle to the cloned node<br><code>originalNode</code><br>&emsp;- Handle to the original node<br><code>clonedGraph</code><br>&emsp;- Cloned graph to query<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g708b03702c5b2cc630ea4a323d522127\">Full Description</a>"
	},
	"cudaGraphNodeGetDependencies":{
		"id": "cudaGraphNodeGetDependencies",
		"value": "<p><b><code>__host__cudaError_t cudaGraphNodeGetDependencies ( cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies )</code></b></p>",
		"description": "<p>Returns a node's dependencies.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to query<br><code>pDependencies</code><br>&emsp;- Pointer to return the dependencies<br><code>pNumDependencies</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g12a73e1f1fa04746e7bff8325d7dd849\">Full Description</a>"
	},
	"cudaGraphNodeGetDependentNodes":{
		"id": "cudaGraphNodeGetDependentNodes",
		"value": "<p><b><code>__host__cudaError_t cudaGraphNodeGetDependentNodes ( cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes )</code></b></p>",
		"description": "<p>Returns a node's dependent nodes.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to query<br><code>pDependentNodes</code><br>&emsp;- Pointer to return the dependent nodes<br><code>pNumDependentNodes</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g2dd33e7b3cea0561acbe6c5fdf722a75\">Full Description</a>"
	},
	"cudaGraphNodeGetEnabled":{
		"id": "cudaGraphNodeGetEnabled",
		"value": "<p><b><code>__host__cudaError_t cudaGraphNodeGetEnabled ( cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled )</code></b></p>",
		"description": "<p>Query whether a node in the given graphExec is enabled.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Node from the graph from which graphExec was instantiated<br><code>isEnabled</code><br>&emsp;- Location to return the enabled status of the node<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g3fc558081d850670b62054308a8ab6b5\">Full Description</a>"
	},
	"cudaGraphNodeGetType":{
		"id": "cudaGraphNodeGetType",
		"value": "<p><b><code>__host__cudaError_t cudaGraphNodeGetType ( cudaGraphNode_t node, cudaGraphNodeType ** pType )</code></b></p>",
		"description": "<p>Returns a node's type.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>node</code><br>&emsp;- Node to query<br><code>pType</code><br>&emsp;- Pointer to return the node type<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gc83d17d0b2d20c4866b34bf62092be11\">Full Description</a>"
	},
	"cudaGraphNodeSetEnabled":{
		"id": "cudaGraphNodeSetEnabled",
		"value": "<p><b><code>__host__cudaError_t cudaGraphNodeSetEnabled ( cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int isEnabled )</code></b></p>",
		"description": "<p>Enables or disables the specified node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Node from the graph from which graphExec was instantiated<br><code>isEnabled</code><br>&emsp;- Node is enabled if != 0, otherwise the node is disabled<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gff631f3fb11d3aae294510cf14f483d0\">Full Description</a>"
	},
	"cudaGraphReleaseUserObject":{
		"id": "cudaGraphReleaseUserObject",
		"value": "<p><b><code>__host__cudaError_t cudaGraphReleaseUserObject ( cudaGraph_t graph, cudaUserObject_t object, unsigned int count = 1 )</code></b></p>",
		"description": "<p>Release a user object reference from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- The graph that will release the reference<br><code>object</code><br>&emsp;- The user object to release a reference for<br><code>count</code><br>&emsp;- The number of references to release, typically 1. Must be nonzero and not larger than INT_MAX.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g67c8d051288d20f06a32c59d338f7afb\">Full Description</a>"
	},
	"cudaGraphRemoveDependencies":{
		"id": "cudaGraphRemoveDependencies",
		"value": "<p><b><code>__host__cudaError_t cudaGraphRemoveDependencies ( cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies )</code></b></p>",
		"description": "<p>Removes dependency edges from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- Graph from which to remove dependencies<br><code>from</code><br>&emsp;- Array of nodes that provide the dependencies<br><code>to</code><br>&emsp;- Array of dependent nodes<br><code>numDependencies</code><br>&emsp;- Number of dependencies to be removed<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1gf9c185d1385826e9724e06d177898927\">Full Description</a>"
	},
	"cudaGraphRetainUserObject":{
		"id": "cudaGraphRetainUserObject",
		"value": "<p><b><code>__host__cudaError_t cudaGraphRetainUserObject ( cudaGraph_t graph, cudaUserObject_t object, unsigned int count = 1, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Retain a reference to a user object from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- The graph to associate the reference with<br><code>object</code><br>&emsp;- The user object to retain a reference for<br><code>count</code><br>&emsp;- The number of references to add to the graph, typically 1. Must be nonzero and not larger than INT_MAX.<br><code>flags</code><br>&emsp;- The optional flag cudaGraphUserObjectMove transfers references from the calling thread, rather than create new references. Pass 0 to create new references.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g95b48aa4255fe6803cd37f8e0c81c1fa\">Full Description</a>"
	},
	"cudaGraphUpload":{
		"id": "cudaGraphUpload",
		"value": "<p><b><code>__host__cudaError_t cudaGraphUpload ( cudaGraphExec_t graphExec, cudaStream_t stream )</code></b></p>",
		"description": "<p>Uploads an executable graph in a stream.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ge546432e411b4495b93bdcbf2fc0b2bd\">Full Description</a>"
	},
	"cudaUserObjectCreate":{
		"id": "cudaUserObjectCreate",
		"value": "<p><b><code>__host__cudaError_t cudaUserObjectCreate ( cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int initialRefcount, unsigned int flags )</code></b></p>",
		"description": "<p>Create a user object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>object_out</code><br>&emsp;- Location to return the user object handle<br><code>ptr</code><br>&emsp;- The pointer to pass to the destroy function<br><code>destroy</code><br>&emsp;- Callback to free the user object when it is no longer in use<br><code>initialRefcount</code><br>&emsp;- The initial refcount to create the object with, typically 1. The initial references are owned by the calling thread.<br><code>flags</code><br>&emsp;- Currently it is required to pass cudaUserObjectNoDestructorSync, which is the only defined flag. This indicates that the destroy callback cannot be waited on by any CUDA API. Users requiring synchronization of the callback should signal its completion manually.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1g0aa7caf7bb7ccbc766fab0558af72c96\">Full Description</a>"
	},
	"cudaUserObjectRelease":{
		"id": "cudaUserObjectRelease",
		"value": "<p><b><code>__host__cudaError_t cudaUserObjectRelease ( cudaUserObject_t object, unsigned int count = 1 )</code></b></p>",
		"description": "<p>Release a reference to a user object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>object</code><br>&emsp;- The object to release<br><code>count</code><br>&emsp;- The number of references to release, typically 1. Must be nonzero and not larger than INT_MAX.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ga4e35c1842873ff86bf666c6b35bf181\">Full Description</a>"
	},
	"cudaUserObjectRetain":{
		"id": "cudaUserObjectRetain",
		"value": "<p><b><code>__host__cudaError_t cudaUserObjectRetain ( cudaUserObject_t object, unsigned int count = 1 )</code></b></p>",
		"description": "<p>Retain a reference to a user object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>object</code><br>&emsp;- The object to retain<br><code>count</code><br>&emsp;- The number of references to retain, typically 1. Must be nonzero and not larger than INT_MAX.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__GRAPH.html#group__CUDART__GRAPH_1ge603163bdd612fbcecb7fe9d266d2794\">Full Description</a>"
	},
	"cudaGetDriverEntryPoint":{
		"id": "cudaGetDriverEntryPoint",
		"value": "<p><b><code>__host__cudaError_t cudaGetDriverEntryPoint ( const char* symbol, void** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult ** driverStatus = NULL )</code></b></p>",
		"description": "<p>Returns the requested driver API function pointer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>symbol</code><br>&emsp;- The base name of the driver API function to look for. As an example, for the driver API cuMemAlloc_v2, symbol would be cuMemAlloc. Note that the API will use the CUDA runtime version to return the address to the most recent ABI compatible driver symbol, cuMemAlloc or cuMemAlloc_v2.<br><code>funcPtr</code><br>&emsp;- Location to return the function pointer to the requested driver function<br><code>flags</code><br>&emsp;- Flags to specify search options.<br><code>driverStatus</code><br>&emsp;- Optional location to store the status of finding the symbol from the driver. See cudaDriverEntryPointQueryResult for possible values.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidValue, cudaErrorNotSupported<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DRIVER__ENTRY__POINT.html#group__CUDART__DRIVER__ENTRY__POINT_1gcf55d143722ccfa9252758181701c876\">Full Description</a>"
	},
	"cudaGetKernel":{
		"id": "cudaGetKernel",
		"value": "<p><b><code>__host__cudaError_t cudaGetKernel ( cudaKernel_t* kernelPtr, const T* entryFuncAddr )</code></b></p>",
		"description": "<p>Get pointer to device kernel that matches entry function entryFuncAddr.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>kernelPtr</code><br>&emsp;- Returns the device kernel<br><code>entryFuncAddr</code><br>&emsp;- Address of device entry function to search kernel for<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__HIGHLEVEL.html#group__CUDART__HIGHLEVEL_1g1c67a5d82a010c4019cebf56660583a6\">Full Description</a>"
	},
	"cudaLaunchKernelEx":{
		"id": "cudaLaunchKernelEx",
		"value": "<p><b><code>__host__cudaError_t cudaLaunchKernelEx ( const cudaLaunchConfig_t* config, void(*)(ExpTypes...) kernel, ActTypes &&... args )</code></b></p>",
		"description": "<p>Launches a CUDA function with launch-time configuration.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>config</code><br>&emsp;- Launch configuration<br><code>kernel</code><br><code>args</code><br>&emsp;- Parameter pack of kernel parameters<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDeviceFunction, cudaErrorInvalidConfiguration, cudaErrorLaunchFailure, cudaErrorLaunchTimeout, cudaErrorLaunchOutOfResources, cudaErrorSharedObjectInitFailed, cudaErrorInvalidPtx, cudaErrorUnsupportedPtxVersion, cudaErrorNoKernelImageForDevice, cudaErrorJitCompilerNotFound, cudaErrorJitCompilationDisabled<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__HIGHLEVEL.html#group__CUDART__HIGHLEVEL_1g98d60efe48c3400a1c17a1edb698e530\">Full Description</a>"
	},
	"cudaOccupancyMaxPotentialBlockSize":{
		"id": "cudaOccupancyMaxPotentialBlockSize",
		"value": "<p><b><code>__host__cudaError_t cudaOccupancyMaxPotentialBlockSize ( int* minGridSize, int* blockSize, T func, size_t dynamicSMemSize = 0, int blockSizeLimit = 0 )</code></b></p>",
		"description": "<p>Returns grid and block size that achieves maximum potential occupancy for a device function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>minGridSize</code><br>&emsp;- Returned minimum grid size needed to achieve the best potential occupancy<br><code>blockSize</code><br>&emsp;- Returned block size<br><code>func</code><br>&emsp;- Device function symbol<br><code>dynamicSMemSize</code><br>&emsp;- Per-block dynamic shared memory usage intended, in bytes<br><code>blockSizeLimit</code><br>&emsp;- The maximum block size func is designed to work with. 0 means no limit.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__HIGHLEVEL.html#group__CUDART__HIGHLEVEL_1gee5334618ed4bb0871e4559a77643fc1\">Full Description</a>"
	},
	"cudaOccupancyMaxPotentialBlockSizeVariableSMem":{
		"id": "cudaOccupancyMaxPotentialBlockSizeVariableSMem",
		"value": "<p><b><code>__host__cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMem ( int* minGridSize, int* blockSize, T func, UnaryFunction blockSizeToDynamicSMemSize, int blockSizeLimit = 0 )</code></b></p>",
		"description": "<p>Returns grid and block size that achieves maximum potential occupancy for a device function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>minGridSize</code><br>&emsp;- Returned minimum grid size needed to achieve the best potential occupancy<br><code>blockSize</code><br>&emsp;- Returned block size<br><code>func</code><br>&emsp;- Device function symbol<br><code>blockSizeToDynamicSMemSize</code><br>&emsp;- A unary function / functor that takes block size, and returns the size, in bytes, of dynamic shared memory needed for a block<br><code>blockSizeLimit</code><br>&emsp;- The maximum block size func is designed to work with. 0 means no limit.<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__HIGHLEVEL.html#group__CUDART__HIGHLEVEL_1g77b3bfb154b86e215a5bc01509ce8ea6\">Full Description</a>"
	},
	"cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags":{
		"id": "cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags",
		"value": "<p><b><code>__host__cudaError_t cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags ( int* minGridSize, int* blockSize, T func, UnaryFunction blockSizeToDynamicSMemSize, int blockSizeLimit = 0, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Returns grid and block size that achieves maximum potential occupancy for a device function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>minGridSize</code><br>&emsp;- Returned minimum grid size needed to achieve the best potential occupancy<br><code>blockSize</code><br>&emsp;- Returned block size<br><code>func</code><br>&emsp;- Device function symbol<br><code>blockSizeToDynamicSMemSize</code><br>&emsp;- A unary function / functor that takes block size, and returns the size, in bytes, of dynamic shared memory needed for a block<br><code>blockSizeLimit</code><br>&emsp;- The maximum block size func is designed to work with. 0 means no limit.<br><code>flags</code><br>&emsp;- Requested behavior for the occupancy calculator<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__HIGHLEVEL.html#group__CUDART__HIGHLEVEL_1g76975517a048cc199bc9e3ea6396ef26\">Full Description</a>"
	},
	"cudaOccupancyMaxPotentialBlockSizeWithFlags":{
		"id": "cudaOccupancyMaxPotentialBlockSizeWithFlags",
		"value": "<p><b><code>__host__cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags ( int* minGridSize, int* blockSize, T func, size_t dynamicSMemSize = 0, int blockSizeLimit = 0, unsigned int flags = 0 )</code></b></p>",
		"description": "<p>Returns grid and block size that achived maximum potential occupancy for a device function with the specified flags.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>minGridSize</code><br>&emsp;- Returned minimum grid size needed to achieve the best potential occupancy<br><code>blockSize</code><br>&emsp;- Returned block size<br><code>func</code><br>&emsp;- Device function symbol<br><code>dynamicSMemSize</code><br>&emsp;- Per-block dynamic shared memory usage intended, in bytes<br><code>blockSizeLimit</code><br>&emsp;- The maximum block size func is designed to work with. 0 means no limit.<br><code>flags</code><br>&emsp;- Requested behavior for the occupancy calculator<br></p><p><b>Returns</b><br>cudaSuccess, cudaErrorInvalidDevice, cudaErrorInvalidDeviceFunction, cudaErrorInvalidValue, cudaErrorUnknown,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__HIGHLEVEL.html#group__CUDART__HIGHLEVEL_1gd0524825c5c01bbc9a5e29e890745800\">Full Description</a>"
	},
	"cudaGetFuncBySymbol":{
		"id": "cudaGetFuncBySymbol",
		"value": "<p><b><code>__host__cudaError_t cudaGetFuncBySymbol ( cudaFunction_t* functionPtr, const void* symbolPtr )</code></b></p>",
		"description": "<p>Get pointer to device entry function that matches entry function symbolPtr.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>functionPtr</code><br>&emsp;- Returns the device entry function<br><code>symbolPtr</code><br>&emsp;- Pointer to device entry function to search for<br></p><p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__DRIVER.html#group__CUDART__DRIVER_1gaba6f8d01e745f0c8d8776ceb18be617\">Full Description</a>"
	},
	"cudaProfilerStart":{
		"id": "cudaProfilerStart",
		"value": "<p><b><code>__host__cudaError_t cudaProfilerStart ( void )</code></b></p>",
		"description": "<p>Enable profiling.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__PROFILER.html#group__CUDART__PROFILER_1gf536d75bb382356e10e3b4e89f4a5374\">Full Description</a>"
	},
	"cudaProfilerStop":{
		"id": "cudaProfilerStop",
		"value": "<p><b><code>__host__cudaError_t cudaProfilerStop ( void )</code></b></p>",
		"description": "<p>Disable profiling.</p>",
		"additional_information": "<p><b>Returns</b><br>cudaSuccess<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__PROFILER.html#group__CUDART__PROFILER_1g826922d9d1d0090d4a9a6b8b249cebb5\">Full Description</a>"
	},
	"CUDA_EGL_MAX_PLANES":{
		"id": "CUDA_EGL_MAX_PLANES",
		"value": "<p><b><code>#define CUDA_EGL_MAX_PLANES 3</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g804d292b8842ce5fb4e77d71b979615f\">Full Description</a>"
	},
	"CUDA_IPC_HANDLE_SIZE":{
		"id": "CUDA_IPC_HANDLE_SIZE",
		"value": "<p><b><code>#define CUDA_IPC_HANDLE_SIZE 64</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g38818d647e61a5d15fb8012fe54c2d24\">Full Description</a>"
	},
	"cudaArrayColorAttachment":{
		"id": "cudaArrayColorAttachment",
		"value": "<p><b><code>#define cudaArrayColorAttachment 0x20</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gfec2b519ab85854efaa40e12f4e34ad3\">Full Description</a>"
	},
	"cudaArrayCubemap":{
		"id": "cudaArrayCubemap",
		"value": "<p><b><code>#define cudaArrayCubemap 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g802843d69ca8be35ee050ff66782179e\">Full Description</a>"
	},
	"cudaArrayDefault":{
		"id": "cudaArrayDefault",
		"value": "<p><b><code>#define cudaArrayDefault 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g6c47e87081bfd4f6030937f99ef12412\">Full Description</a>"
	},
	"cudaArrayDeferredMapping":{
		"id": "cudaArrayDeferredMapping",
		"value": "<p><b><code>#define cudaArrayDeferredMapping 0x80</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g91a50795515848406a89c2e6cef2fb02\">Full Description</a>"
	},
	"cudaArrayLayered":{
		"id": "cudaArrayLayered",
		"value": "<p><b><code>#define cudaArrayLayered 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g6d9a27dfb1207df13de0e822f75f4ab8\">Full Description</a>"
	},
	"cudaArraySparse":{
		"id": "cudaArraySparse",
		"value": "<p><b><code>#define cudaArraySparse 0x40</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g42c353686a15da063dc7722594ae4bff\">Full Description</a>"
	},
	"cudaArraySparsePropertiesSingleMipTail":{
		"id": "cudaArraySparsePropertiesSingleMipTail",
		"value": "<p><b><code>#define cudaArraySparsePropertiesSingleMipTail 0x1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g6820071ffa1300699897eab8d319e4d9\">Full Description</a>"
	},
	"cudaArraySurfaceLoadStore":{
		"id": "cudaArraySurfaceLoadStore",
		"value": "<p><b><code>#define cudaArraySurfaceLoadStore 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g8cb5bdac32ad53c423992a125b3f9a66\">Full Description</a>"
	},
	"cudaArrayTextureGather":{
		"id": "cudaArrayTextureGather",
		"value": "<p><b><code>#define cudaArrayTextureGather 0x08</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g142b19a14d56a03b1e410430aa5202d1\">Full Description</a>"
	},
	"cudaCooperativeLaunchMultiDeviceNoPostSync":{
		"id": "cudaCooperativeLaunchMultiDeviceNoPostSync",
		"value": "<p><b><code>#define cudaCooperativeLaunchMultiDeviceNoPostSync 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g4b4ed6dd17d7c0950e5127138279f86a\">Full Description</a>"
	},
	"cudaCooperativeLaunchMultiDeviceNoPreSync":{
		"id": "cudaCooperativeLaunchMultiDeviceNoPreSync",
		"value": "<p><b><code>#define cudaCooperativeLaunchMultiDeviceNoPreSync 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g310f49178bf4b06b546f83124fa191f2\">Full Description</a>"
	},
	"cudaCpuDeviceId":{
		"id": "cudaCpuDeviceId",
		"value": "<p><b><code>#define cudaCpuDeviceId ((int)-1)</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gb3de5e703b559507c39a6a02127e2967\">Full Description</a>"
	},
	"cudaDeviceBlockingSync":{
		"id": "cudaDeviceBlockingSync",
		"value": "<p><b><code>#define cudaDeviceBlockingSync 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g130ddae663f1873258fee5a6e0808b71\">Full Description</a>"
	},
	"cudaDeviceLmemResizeToMax":{
		"id": "cudaDeviceLmemResizeToMax",
		"value": "<p><b><code>#define cudaDeviceLmemResizeToMax 0x10</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gda5f97298bf704dd3b04cbac4819e6e3\">Full Description</a>"
	},
	"cudaDeviceMapHost":{
		"id": "cudaDeviceMapHost",
		"value": "<p><b><code>#define cudaDeviceMapHost 0x08</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g3762be9cccdd809a4ca128354fd134b0\">Full Description</a>"
	},
	"cudaDeviceMask":{
		"id": "cudaDeviceMask",
		"value": "<p><b><code>#define cudaDeviceMask 0xff</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gc50dd5d226be88b768de22e849c9bf7a\">Full Description</a>"
	},
	"cudaDeviceScheduleAuto":{
		"id": "cudaDeviceScheduleAuto",
		"value": "<p><b><code>#define cudaDeviceScheduleAuto 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g3ade1dbaf4b222b22733cdfdcc026075\">Full Description</a>"
	},
	"cudaDeviceScheduleBlockingSync":{
		"id": "cudaDeviceScheduleBlockingSync",
		"value": "<p><b><code>#define cudaDeviceScheduleBlockingSync 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g057e6912c52708b6aa86e79dd83d007c\">Full Description</a>"
	},
	"cudaDeviceScheduleMask":{
		"id": "cudaDeviceScheduleMask",
		"value": "<p><b><code>#define cudaDeviceScheduleMask 0x07</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g008de63abd7ba8da0f5f13ef7317fd29\">Full Description</a>"
	},
	"cudaDeviceScheduleSpin":{
		"id": "cudaDeviceScheduleSpin",
		"value": "<p><b><code>#define cudaDeviceScheduleSpin 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gf01347c3dafebf07e1a0b4321a030a63\">Full Description</a>"
	},
	"cudaDeviceScheduleYield":{
		"id": "cudaDeviceScheduleYield",
		"value": "<p><b><code>#define cudaDeviceScheduleYield 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gbc13c52d342c67ebf0f1f7af937735a8\">Full Description</a>"
	},
	"cudaDeviceSyncMemops":{
		"id": "cudaDeviceSyncMemops",
		"value": "<p><b><code>#define cudaDeviceSyncMemops 0x80</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gb5cbd9be7931e6c68d11e1175aa14c23\">Full Description</a>"
	},
	"cudaEventBlockingSync":{
		"id": "cudaEventBlockingSync",
		"value": "<p><b><code>#define cudaEventBlockingSync 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g26509a522be9d449aa7c8c279612452d\">Full Description</a>"
	},
	"cudaEventDefault":{
		"id": "cudaEventDefault",
		"value": "<p><b><code>#define cudaEventDefault 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g6f8811acffcc133b5e4a50de6646d18e\">Full Description</a>"
	},
	"cudaEventDisableTiming":{
		"id": "cudaEventDisableTiming",
		"value": "<p><b><code>#define cudaEventDisableTiming 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1ga5d3eff7c3623e2be533968d9cc1ee7e\">Full Description</a>"
	},
	"cudaEventInterprocess":{
		"id": "cudaEventInterprocess",
		"value": "<p><b><code>#define cudaEventInterprocess 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g49ec9cd742f8a3f6fde4ee72a66326f6\">Full Description</a>"
	},
	"cudaEventRecordDefault":{
		"id": "cudaEventRecordDefault",
		"value": "<p><b><code>#define cudaEventRecordDefault 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gd25056e7a9182a50aa4bc0ada57ca192\">Full Description</a>"
	},
	"cudaEventRecordExternal":{
		"id": "cudaEventRecordExternal",
		"value": "<p><b><code>#define cudaEventRecordExternal 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g3457b81d1d32c6a00f6132fbc2693d47\">Full Description</a>"
	},
	"cudaEventWaitDefault":{
		"id": "cudaEventWaitDefault",
		"value": "<p><b><code>#define cudaEventWaitDefault 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gf8f19058a7cc2c3994c8f71590b8747e\">Full Description</a>"
	},
	"cudaEventWaitExternal":{
		"id": "cudaEventWaitExternal",
		"value": "<p><b><code>#define cudaEventWaitExternal 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g0c23426b7252eaa9cef695859991304e\">Full Description</a>"
	},
	"cudaExternalMemoryDedicated":{
		"id": "cudaExternalMemoryDedicated",
		"value": "<p><b><code>#define cudaExternalMemoryDedicated 0x1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gea2031488a28bcdb7695e9bbaf25e149\">Full Description</a>"
	},
	"cudaExternalSemaphoreSignalSkipNvSciBufMemSync":{
		"id": "cudaExternalSemaphoreSignalSkipNvSciBufMemSync",
		"value": "<p><b><code>#define cudaExternalSemaphoreSignalSkipNvSciBufMemSync 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g39b71a7aa040658a7a280fcf31eb4a77\">Full Description</a>"
	},
	"cudaExternalSemaphoreWaitSkipNvSciBufMemSync":{
		"id": "cudaExternalSemaphoreWaitSkipNvSciBufMemSync",
		"value": "<p><b><code>#define cudaExternalSemaphoreWaitSkipNvSciBufMemSync 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g3643166ea40207f6a13f82ebd7b6c2c7\">Full Description</a>"
	},
	"cudaHostAllocDefault":{
		"id": "cudaHostAllocDefault",
		"value": "<p><b><code>#define cudaHostAllocDefault 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g1e00f7734325eb38d75f3ffeae6acac8\">Full Description</a>"
	},
	"cudaHostAllocMapped":{
		"id": "cudaHostAllocMapped",
		"value": "<p><b><code>#define cudaHostAllocMapped 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g01e600c738b962c8f973dda7708f7a70\">Full Description</a>"
	},
	"cudaHostAllocPortable":{
		"id": "cudaHostAllocPortable",
		"value": "<p><b><code>#define cudaHostAllocPortable 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gc46ce76be41cf79774331cc8cfceb52b\">Full Description</a>"
	},
	"cudaHostAllocWriteCombined":{
		"id": "cudaHostAllocWriteCombined",
		"value": "<p><b><code>#define cudaHostAllocWriteCombined 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g3a7db37d02ce0b2350067ab639ef321c\">Full Description</a>"
	},
	"cudaHostRegisterDefault":{
		"id": "cudaHostRegisterDefault",
		"value": "<p><b><code>#define cudaHostRegisterDefault 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g91ca01bef4ecb16ca98b8e129ff6427f\">Full Description</a>"
	},
	"cudaHostRegisterIoMemory":{
		"id": "cudaHostRegisterIoMemory",
		"value": "<p><b><code>#define cudaHostRegisterIoMemory 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g27d1406f2a35d23fd8f70cb25c408d8a\">Full Description</a>"
	},
	"cudaHostRegisterMapped":{
		"id": "cudaHostRegisterMapped",
		"value": "<p><b><code>#define cudaHostRegisterMapped 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g838b73458521c60f502efd19db0e365d\">Full Description</a>"
	},
	"cudaHostRegisterPortable":{
		"id": "cudaHostRegisterPortable",
		"value": "<p><b><code>#define cudaHostRegisterPortable 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g36977255e5c778f7e4362d32d6b1cecd\">Full Description</a>"
	},
	"cudaHostRegisterReadOnly":{
		"id": "cudaHostRegisterReadOnly",
		"value": "<p><b><code>#define cudaHostRegisterReadOnly 0x08</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g564c32d0e6032a9383494b6e63de7bd0\">Full Description</a>"
	},
	"cudaInitDeviceFlagsAreValid":{
		"id": "cudaInitDeviceFlagsAreValid",
		"value": "<p><b><code>#define cudaInitDeviceFlagsAreValid 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g2ff861a477ec064dcf01977194158e49\">Full Description</a>"
	},
	"cudaInvalidDeviceId":{
		"id": "cudaInvalidDeviceId",
		"value": "<p><b><code>#define cudaInvalidDeviceId ((int)-2)</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g5ca8f199bd18a2fadd964e3582dcd937\">Full Description</a>"
	},
	"cudaIpcMemLazyEnablePeerAccess":{
		"id": "cudaIpcMemLazyEnablePeerAccess",
		"value": "<p><b><code>#define cudaIpcMemLazyEnablePeerAccess 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g60f28a5142ee7ae0336dfa83fd54e006\">Full Description</a>"
	},
	"cudaMemAttachGlobal":{
		"id": "cudaMemAttachGlobal",
		"value": "<p><b><code>#define cudaMemAttachGlobal 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g4808e47eba73eb94622ec70a9f9b91ff\">Full Description</a>"
	},
	"cudaMemAttachHost":{
		"id": "cudaMemAttachHost",
		"value": "<p><b><code>#define cudaMemAttachHost 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g4f9a428d18fdd89a99441d0dd27131c0\">Full Description</a>"
	},
	"cudaMemAttachSingle":{
		"id": "cudaMemAttachSingle",
		"value": "<p><b><code>#define cudaMemAttachSingle 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gdc191442d08fc3a9de4cf055edfd2dbe\">Full Description</a>"
	},
	"cudaNvSciSyncAttrSignal":{
		"id": "cudaNvSciSyncAttrSignal",
		"value": "<p><b><code>#define cudaNvSciSyncAttrSignal 0x1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g8157cb1b3c077ba222a56779a37d3bd1\">Full Description</a>"
	},
	"cudaNvSciSyncAttrWait":{
		"id": "cudaNvSciSyncAttrWait",
		"value": "<p><b><code>#define cudaNvSciSyncAttrWait 0x2</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g407f1fe03a9f560b23220faa306e70cf\">Full Description</a>"
	},
	"cudaOccupancyDefault":{
		"id": "cudaOccupancyDefault",
		"value": "<p><b><code>#define cudaOccupancyDefault 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g11570371f508845a9df47b17f85d90ac\">Full Description</a>"
	},
	"cudaOccupancyDisableCachingOverride":{
		"id": "cudaOccupancyDisableCachingOverride",
		"value": "<p><b><code>#define cudaOccupancyDisableCachingOverride 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g0a30e61b561f0678f1bf39eb051033bf\">Full Description</a>"
	},
	"cudaPeerAccessDefault":{
		"id": "cudaPeerAccessDefault",
		"value": "<p><b><code>#define cudaPeerAccessDefault 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g666bfab4a42e799d74bc07269f9bcd9b\">Full Description</a>"
	},
	"cudaStreamDefault":{
		"id": "cudaStreamDefault",
		"value": "<p><b><code>#define cudaStreamDefault 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1ged347a89ec289c787faa116b851708fc\">Full Description</a>"
	},
	"cudaStreamLegacy":{
		"id": "cudaStreamLegacy",
		"value": "<p><b><code>#define cudaStreamLegacy ((cudaStream_t)0x1)</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g4e62d09dde16ba457b0a97f3a5262246\">Full Description</a>"
	},
	"cudaStreamNonBlocking":{
		"id": "cudaStreamNonBlocking",
		"value": "<p><b><code>#define cudaStreamNonBlocking 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g5dbd11a1723d9f5938a133cedbc525e3\">Full Description</a>"
	},
	"cudaStreamPerThread":{
		"id": "cudaStreamPerThread",
		"value": "<p><b><code>#define cudaStreamPerThread ((cudaStream_t)0x2)</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g7b7129befd6f52708309acafd1c46197\">Full Description</a>"
	},
	"cudaArray_const_t":{
		"id": "cudaArray_const_t",
		"value": "<p><b><code>typedefcudaArray* cudaArray_const_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g1259f0b7bcff80ba46267c9117f9bb21\">Full Description</a>"
	},
	"cudaArray_t":{
		"id": "cudaArray_t",
		"value": "<p><b><code>typedefcudaArray* cudaArray_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gaf8b3ba752727d996074a71ee997ce68\">Full Description</a>"
	},
	"cudaEglStreamConnection":{
		"id": "cudaEglStreamConnection",
		"value": "<p><b><code>typedefCUeglStreamConnection_st* cudaEglStreamConnection</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g8d98c18806b2361aeb23e07a3bda96da\">Full Description</a>"
	},
	"cudaError_t":{
		"id": "cudaError_t",
		"value": "<p><b><code>typedefenumcudaError cudaError_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gf599e5b8b829ce7db0f5216928f6ecb6\">Full Description</a>"
	},
	"cudaEvent_t":{
		"id": "cudaEvent_t",
		"value": "<p><b><code>typedefCUevent_st* cudaEvent_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gea2f543a9fc0e52fe4ae712920fd1247\">Full Description</a>"
	},
	"cudaExternalMemory_t":{
		"id": "cudaExternalMemory_t",
		"value": "<p><b><code>typedefCUexternalMemory_st* cudaExternalMemory_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g79a2bf6a3a2aa9011a96dc17d476faf7\">Full Description</a>"
	},
	"cudaExternalSemaphore_t":{
		"id": "cudaExternalSemaphore_t",
		"value": "<p><b><code>typedefCUexternalSemaphore_st* cudaExternalSemaphore_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gf8bc7ab93d638c5835e5289ac7d683c4\">Full Description</a>"
	},
	"cudaFunction_t":{
		"id": "cudaFunction_t",
		"value": "<p><b><code>typedefCUfunc_st* cudaFunction_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g6ac3a22cc596d09ac07cdafb8a4638cf\">Full Description</a>"
	},
	"cudaGraphExec_t":{
		"id": "cudaGraphExec_t",
		"value": "<p><b><code>typedefCUgraphExec_st* cudaGraphExec_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g2fee13c408fb7da16401e25c1ae6bdb9\">Full Description</a>"
	},
	"cudaGraphNode_t":{
		"id": "cudaGraphNode_t",
		"value": "<p><b><code>typedefCUgraphNode_st* cudaGraphNode_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g7eed9297e04a8e4b5100200d5e69c124\">Full Description</a>"
	},
	"cudaGraph_t":{
		"id": "cudaGraph_t",
		"value": "<p><b><code>typedefCUgraph_st* cudaGraph_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g5707132c494c91db57db5a6da0beba4c\">Full Description</a>"
	},
	"cudaGraphicsResource_t":{
		"id": "cudaGraphicsResource_t",
		"value": "<p><b><code>typedefcudaGraphicsResource* cudaGraphicsResource_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gf58dd8d3c7a65714ff7f5459adbf7e6f\">Full Description</a>"
	},
	"cudaHostFn_t":{
		"id": "cudaHostFn_t",
		"value": "<p><b><code>typedefvoid(CUDART_CB* cudaHostFn_t )( void* userData )</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g30104c99d85403b72b7c7ad72a4782fc\">Full Description</a>"
	},
	"cudaKernel_t":{
		"id": "cudaKernel_t",
		"value": "<p><b><code>typedefCUkern_st* cudaKernel_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g0b33f204b307b3154aa4f005a3c8a46a\">Full Description</a>"
	},
	"cudaMemPool_t":{
		"id": "cudaMemPool_t",
		"value": "<p><b><code>typedefCUmemPoolHandle_st* cudaMemPool_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gd7121b19b2347b777c07223c6ff4cdad\">Full Description</a>"
	},
	"cudaMipmappedArray_const_t":{
		"id": "cudaMipmappedArray_const_t",
		"value": "<p><b><code>typedefcudaMipmappedArray* cudaMipmappedArray_const_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g99f602628e1c5159da2dc2cefb5bdc04\">Full Description</a>"
	},
	"cudaMipmappedArray_t":{
		"id": "cudaMipmappedArray_t",
		"value": "<p><b><code>typedefcudaMipmappedArray* cudaMipmappedArray_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g1b03ad14fc0ab86f8b033837f5562d8a\">Full Description</a>"
	},
	"cudaStream_t":{
		"id": "cudaStream_t",
		"value": "<p><b><code>typedefCUstream_st* cudaStream_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1ge15d9c8b7a240312b533d6122558085a\">Full Description</a>"
	},
	"cudaSurfaceObject_t":{
		"id": "cudaSurfaceObject_t",
		"value": "<p><b><code>typedefunsignedlonglong cudaSurfaceObject_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gbe57cf2ccbe7f9d696f18808dd634c0a\">Full Description</a>"
	},
	"cudaTextureObject_t":{
		"id": "cudaTextureObject_t",
		"value": "<p><b><code>typedefunsignedlonglong cudaTextureObject_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g83eb271ebc4cb2817e66d7c752f0c29b\">Full Description</a>"
	},
	"cudaUserObject_t":{
		"id": "cudaUserObject_t",
		"value": "<p><b><code>typedefCUuserObject_st* cudaUserObject_t</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g61fdef91580735aac38a50eacd4e94f5\">Full Description</a>"
	},
	"cudaAccessProperty":{
		"id": "cudaAccessProperty",
		"value": "<p><b><code>enum cudaAccessProperty</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g4991a8bc9c2356a8da28d093a1da6758\">Full Description</a>"
	},
	"cudaCGScope":{
		"id": "cudaCGScope",
		"value": "<p><b><code>enum cudaCGScope</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gd343aef6d93073cfc0d0851fc2b47471\">Full Description</a>"
	},
	"cudaChannelFormatKind":{
		"id": "cudaChannelFormatKind",
		"value": "<p><b><code>enum cudaChannelFormatKind</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g8085eac5cb54b4228f3619a60f235119\">Full Description</a>"
	},
	"cudaClusterSchedulingPolicy":{
		"id": "cudaClusterSchedulingPolicy",
		"value": "<p><b><code>enum cudaClusterSchedulingPolicy</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g6f31ccb11aee4f6a801013604049b481\">Full Description</a>"
	},
	"cudaComputeMode":{
		"id": "cudaComputeMode",
		"value": "<p><b><code>enum cudaComputeMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g7eb25f5413a962faad0956d92bae10d0\">Full Description</a>"
	},
	"cudaDeviceAttr":{
		"id": "cudaDeviceAttr",
		"value": "<p><b><code>enum cudaDeviceAttr</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g49e2f8c2c0bd6fe264f2fc970912e5cd\">Full Description</a>"
	},
	"cudaDeviceP2PAttr":{
		"id": "cudaDeviceP2PAttr",
		"value": "<p><b><code>enum cudaDeviceP2PAttr</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g2f597e2acceab33f60bd61c41fea0c1b\">Full Description</a>"
	},
	"cudaDriverEntryPointQueryResult":{
		"id": "cudaDriverEntryPointQueryResult",
		"value": "<p><b><code>enum cudaDriverEntryPointQueryResult</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1geb22957eedf779d624069585c25f1d1f\">Full Description</a>"
	},
	"cudaEglColorFormat":{
		"id": "cudaEglColorFormat",
		"value": "<p><b><code>enum cudaEglColorFormat</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gb6ba961c95f712b86ed7a52e73970a69\">Full Description</a>"
	},
	"cudaEglFrameType":{
		"id": "cudaEglFrameType",
		"value": "<p><b><code>enum cudaEglFrameType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gbe68551b4eb6dfd6964e674c89d210b1\">Full Description</a>"
	},
	"cudaEglResourceLocationFlags":{
		"id": "cudaEglResourceLocationFlags",
		"value": "<p><b><code>enum cudaEglResourceLocationFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g1b8600d3bc8514e841e093921c10ebe4\">Full Description</a>"
	},
	"cudaError":{
		"id": "cudaError",
		"value": "<p><b><code>enum cudaError</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g3f51e3575c2178246db0a94a430e0038\">Full Description</a>"
	},
	"cudaExternalMemoryHandleType":{
		"id": "cudaExternalMemoryHandleType",
		"value": "<p><b><code>enum cudaExternalMemoryHandleType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g62ab2fcc2eb066702c3694148383749e\">Full Description</a>"
	},
	"cudaExternalSemaphoreHandleType":{
		"id": "cudaExternalSemaphoreHandleType",
		"value": "<p><b><code>enum cudaExternalSemaphoreHandleType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gb35390be1e170db8671b0abfb57ad3d9\">Full Description</a>"
	},
	"cudaFlushGPUDirectRDMAWritesOptions":{
		"id": "cudaFlushGPUDirectRDMAWritesOptions",
		"value": "<p><b><code>enum cudaFlushGPUDirectRDMAWritesOptions</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g08213e5a1b0dfdeeb88ed0146ca86f63\">Full Description</a>"
	},
	"cudaFlushGPUDirectRDMAWritesScope":{
		"id": "cudaFlushGPUDirectRDMAWritesScope",
		"value": "<p><b><code>enum cudaFlushGPUDirectRDMAWritesScope</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g1ed1a981bc94ef42e16f73c91faf8f1a\">Full Description</a>"
	},
	"cudaFlushGPUDirectRDMAWritesTarget":{
		"id": "cudaFlushGPUDirectRDMAWritesTarget",
		"value": "<p><b><code>enum cudaFlushGPUDirectRDMAWritesTarget</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g79b83831173a16801d2fb885b02e54a4\">Full Description</a>"
	},
	"cudaFuncAttribute":{
		"id": "cudaFuncAttribute",
		"value": "<p><b><code>enum cudaFuncAttribute</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gc6c537b33d22c871a103f0fda8ac8bbe\">Full Description</a>"
	},
	"cudaFuncCache":{
		"id": "cudaFuncCache",
		"value": "<p><b><code>enum cudaFuncCache</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gb980f35ed69ee7991704de29a13de49b\">Full Description</a>"
	},
	"cudaGPUDirectRDMAWritesOrdering":{
		"id": "cudaGPUDirectRDMAWritesOrdering",
		"value": "<p><b><code>enum cudaGPUDirectRDMAWritesOrdering</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gd945c8e3f04e38760c1dac290519eb19\">Full Description</a>"
	},
	"cudaGetDriverEntryPointFlags":{
		"id": "cudaGetDriverEntryPointFlags",
		"value": "<p><b><code>enum cudaGetDriverEntryPointFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gf2f2b7ea8f2f705095200807ac5dfd61\">Full Description</a>"
	},
	"cudaGraphDebugDotFlags":{
		"id": "cudaGraphDebugDotFlags",
		"value": "<p><b><code>enum cudaGraphDebugDotFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g0907ca7a1e7d0211b71ee49c5403072b\">Full Description</a>"
	},
	"cudaGraphExecUpdateResult":{
		"id": "cudaGraphExecUpdateResult",
		"value": "<p><b><code>enum cudaGraphExecUpdateResult</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g86bb1444fdc647129bf89c98e5925984\">Full Description</a>"
	},
	"cudaGraphInstantiateFlags":{
		"id": "cudaGraphInstantiateFlags",
		"value": "<p><b><code>enum cudaGraphInstantiateFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g638577f2b0f6a98b5e6a0e6a72d09004\">Full Description</a>"
	},
	"cudaGraphInstantiateResult":{
		"id": "cudaGraphInstantiateResult",
		"value": "<p><b><code>enum cudaGraphInstantiateResult</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g3faefd09000966e3b9d6ca5bcf7b2b9d\">Full Description</a>"
	},
	"cudaGraphMemAttributeType":{
		"id": "cudaGraphMemAttributeType",
		"value": "<p><b><code>enum cudaGraphMemAttributeType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g4764cb94cff3171bdc738dd11a4c2ba6\">Full Description</a>"
	},
	"cudaGraphNodeType":{
		"id": "cudaGraphNodeType",
		"value": "<p><b><code>enum cudaGraphNodeType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g649fb64bad79fc6f2f531860c0eb777c\">Full Description</a>"
	},
	"cudaGraphicsCubeFace":{
		"id": "cudaGraphicsCubeFace",
		"value": "<p><b><code>enum cudaGraphicsCubeFace</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gbf3ce16a621826a09263b8a58902fee8\">Full Description</a>"
	},
	"cudaGraphicsMapFlags":{
		"id": "cudaGraphicsMapFlags",
		"value": "<p><b><code>enum cudaGraphicsMapFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g2c3c3a69caaf333d29d0b38b75de5ffd\">Full Description</a>"
	},
	"cudaGraphicsRegisterFlags":{
		"id": "cudaGraphicsRegisterFlags",
		"value": "<p><b><code>enum cudaGraphicsRegisterFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gd17cc29b28205bbe32ac575eba16c277\">Full Description</a>"
	},
	"cudaLaunchAttributeID":{
		"id": "cudaLaunchAttributeID",
		"value": "<p><b><code>enum cudaLaunchAttributeID</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gfc5ed48085f05863b1aeebb14934b056\">Full Description</a>"
	},
	"cudaLimit":{
		"id": "cudaLimit",
		"value": "<p><b><code>enum cudaLimit</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g4c4b34c054d383b0e9a63ab0ffc93651\">Full Description</a>"
	},
	"cudaMemAccessFlags":{
		"id": "cudaMemAccessFlags",
		"value": "<p><b><code>enum cudaMemAccessFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g6b0a86e7509e3c9a188cf2e809aef0be\">Full Description</a>"
	},
	"cudaMemAllocationHandleType":{
		"id": "cudaMemAllocationHandleType",
		"value": "<p><b><code>enum cudaMemAllocationHandleType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gabde707dfb8a602b917e0b177f77f365\">Full Description</a>"
	},
	"cudaMemAllocationType":{
		"id": "cudaMemAllocationType",
		"value": "<p><b><code>enum cudaMemAllocationType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g5cb1470491e08d2c67e9efd3fb5da9a3\">Full Description</a>"
	},
	"cudaMemLocationType":{
		"id": "cudaMemLocationType",
		"value": "<p><b><code>enum cudaMemLocationType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g2279aa08666f329f3ba4afe397fa60f0\">Full Description</a>"
	},
	"cudaMemPoolAttr":{
		"id": "cudaMemPoolAttr",
		"value": "<p><b><code>enum cudaMemPoolAttr</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1geb088e985dfbf286005a684095501a03\">Full Description</a>"
	},
	"cudaMemRangeAttribute":{
		"id": "cudaMemRangeAttribute",
		"value": "<p><b><code>enum cudaMemRangeAttribute</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gdfcc848da2b9f49661333f861ad1a379\">Full Description</a>"
	},
	"cudaMemcpyKind":{
		"id": "cudaMemcpyKind",
		"value": "<p><b><code>enum cudaMemcpyKind</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g18fa99055ee694244a270e4d5101e95b\">Full Description</a>"
	},
	"cudaMemoryAdvise":{
		"id": "cudaMemoryAdvise",
		"value": "<p><b><code>enum cudaMemoryAdvise</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gc314a8b14091f7e02a7ad15dcb36c857\">Full Description</a>"
	},
	"cudaMemoryType":{
		"id": "cudaMemoryType",
		"value": "<p><b><code>enum cudaMemoryType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g13de56a8fe75569530ecc3a3106e9b6d\">Full Description</a>"
	},
	"cudaResourceType":{
		"id": "cudaResourceType",
		"value": "<p><b><code>enum cudaResourceType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g067b774c0e639817a00a972c8e2c203c\">Full Description</a>"
	},
	"cudaResourceViewFormat":{
		"id": "cudaResourceViewFormat",
		"value": "<p><b><code>enum cudaResourceViewFormat</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g6b3a50368a0aa592f65e928adca9b929\">Full Description</a>"
	},
	"cudaSharedCarveout":{
		"id": "cudaSharedCarveout",
		"value": "<p><b><code>enum cudaSharedCarveout</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gb0a2adc3971b31a19b6ce2729bb5ce9f\">Full Description</a>"
	},
	"cudaSharedMemConfig":{
		"id": "cudaSharedMemConfig",
		"value": "<p><b><code>enum cudaSharedMemConfig</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g6e62d15f3c224625e8c9aa946f1709a6\">Full Description</a>"
	},
	"cudaStreamCaptureMode":{
		"id": "cudaStreamCaptureMode",
		"value": "<p><b><code>enum cudaStreamCaptureMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g24ae5ae00cc50614957ff8eba43e560e\">Full Description</a>"
	},
	"cudaStreamCaptureStatus":{
		"id": "cudaStreamCaptureStatus",
		"value": "<p><b><code>enum cudaStreamCaptureStatus</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g0ec4aacc66fe76c145252d12b189e233\">Full Description</a>"
	},
	"cudaStreamUpdateCaptureDependenciesFlags":{
		"id": "cudaStreamUpdateCaptureDependenciesFlags",
		"value": "<p><b><code>enum cudaStreamUpdateCaptureDependenciesFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g36421316e18c4a2f66905cf41bf8ce6f\">Full Description</a>"
	},
	"cudaSurfaceBoundaryMode":{
		"id": "cudaSurfaceBoundaryMode",
		"value": "<p><b><code>enum cudaSurfaceBoundaryMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gdc002e3c2a4fd592efa944e2c73a10fb\">Full Description</a>"
	},
	"cudaSurfaceFormatMode":{
		"id": "cudaSurfaceFormatMode",
		"value": "<p><b><code>enum cudaSurfaceFormatMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g427be57cb8aa90479139bba92267150f\">Full Description</a>"
	},
	"cudaTextureAddressMode":{
		"id": "cudaTextureAddressMode",
		"value": "<p><b><code>enum cudaTextureAddressMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1g03e1bbd2c491d809279c7a47e2cd0351\">Full Description</a>"
	},
	"cudaTextureFilterMode":{
		"id": "cudaTextureFilterMode",
		"value": "<p><b><code>enum cudaTextureFilterMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gee4adb3d1b062cf05374de09325a82d5\">Full Description</a>"
	},
	"cudaTextureReadMode":{
		"id": "cudaTextureReadMode",
		"value": "<p><b><code>enum cudaTextureReadMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gd9266d02be93809558036ec4f3d5f43d\">Full Description</a>"
	},
	"cudaUserObjectFlags":{
		"id": "cudaUserObjectFlags",
		"value": "<p><b><code>enum cudaUserObjectFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1gf4748f36762263564ca8a7a47fd902bb\">Full Description</a>"
	},
	"cudaUserObjectRetainFlags":{
		"id": "cudaUserObjectRetainFlags",
		"value": "<p><b><code>enum cudaUserObjectRetainFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-runtime-api/group__CUDART__TYPES.html#group__CUDART__TYPES_1ge53f516fc65103fccb14c83184188157\">Full Description</a>"
	},
	"CUDA_ARRAY3D_2DARRAY":{
		"id": "CUDA_ARRAY3D_2DARRAY",
		"value": "<p><b><code>#define CUDA_ARRAY3D_2DARRAY 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g2a94f4b9c015417866323e6de0a33cc7\">Full Description</a>"
	},
	"CUDA_ARRAY3D_COLOR_ATTACHMENT":{
		"id": "CUDA_ARRAY3D_COLOR_ATTACHMENT",
		"value": "<p><b><code>#define CUDA_ARRAY3D_COLOR_ATTACHMENT 0x20</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g26e6ae0e2d1dcef8205a840ebc193022\">Full Description</a>"
	},
	"CUDA_ARRAY3D_CUBEMAP":{
		"id": "CUDA_ARRAY3D_CUBEMAP",
		"value": "<p><b><code>#define CUDA_ARRAY3D_CUBEMAP 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gfce9ad9aa3df839571b84b47febfb7ae\">Full Description</a>"
	},
	"CUDA_ARRAY3D_DEFERRED_MAPPING":{
		"id": "CUDA_ARRAY3D_DEFERRED_MAPPING",
		"value": "<p><b><code>#define CUDA_ARRAY3D_DEFERRED_MAPPING 0x80</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g854c29dbc47d04a4e42863cb87487d55\">Full Description</a>"
	},
	"CUDA_ARRAY3D_DEPTH_TEXTURE":{
		"id": "CUDA_ARRAY3D_DEPTH_TEXTURE",
		"value": "<p><b><code>#define CUDA_ARRAY3D_DEPTH_TEXTURE 0x10</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g736b87daaca88e6f4abf2e789395dc60\">Full Description</a>"
	},
	"CUDA_ARRAY3D_LAYERED":{
		"id": "CUDA_ARRAY3D_LAYERED",
		"value": "<p><b><code>#define CUDA_ARRAY3D_LAYERED 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ge4adf555c51852623a3dea962ab8ee85\">Full Description</a>"
	},
	"CUDA_ARRAY3D_SPARSE":{
		"id": "CUDA_ARRAY3D_SPARSE",
		"value": "<p><b><code>#define CUDA_ARRAY3D_SPARSE 0x40</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g8e13c9d3ef98d1f3dce95901a115abc2\">Full Description</a>"
	},
	"CUDA_ARRAY3D_SURFACE_LDST":{
		"id": "CUDA_ARRAY3D_SURFACE_LDST",
		"value": "<p><b><code>#define CUDA_ARRAY3D_SURFACE_LDST 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g7287c43cacf1ed05865d6bcad1a23cd9\">Full Description</a>"
	},
	"CUDA_ARRAY3D_TEXTURE_GATHER":{
		"id": "CUDA_ARRAY3D_TEXTURE_GATHER",
		"value": "<p><b><code>#define CUDA_ARRAY3D_TEXTURE_GATHER 0x08</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g0c929c92a91f4d9f9f49bae0131a6ccf\">Full Description</a>"
	},
	"CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC":{
		"id": "CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC",
		"value": "<p><b><code>#define CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_POST_LAUNCH_SYNC 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gb46080444b8784713763d4d0dc4e1c90\">Full Description</a>"
	},
	"CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC":{
		"id": "CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC",
		"value": "<p><b><code>#define CUDA_COOPERATIVE_LAUNCH_MULTI_DEVICE_NO_PRE_LAUNCH_SYNC 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g14fbb447864d154bdd6d82a7af51c5ab\">Full Description</a>"
	},
	"CUDA_EGL_INFINITE_TIMEOUT":{
		"id": "CUDA_EGL_INFINITE_TIMEOUT",
		"value": "<p><b><code>#define CUDA_EGL_INFINITE_TIMEOUT 0xFFFFFFFF</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g71b9a58998751468a873848efd699af3\">Full Description</a>"
	},
	"CUDA_EXTERNAL_MEMORY_DEDICATED":{
		"id": "CUDA_EXTERNAL_MEMORY_DEDICATED",
		"value": "<p><b><code>#define CUDA_EXTERNAL_MEMORY_DEDICATED 0x1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g7a3c833643e392f32a52c131aa87ccac\">Full Description</a>"
	},
	"CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC":{
		"id": "CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC",
		"value": "<p><b><code>#define CUDA_EXTERNAL_SEMAPHORE_SIGNAL_SKIP_NVSCIBUF_MEMSYNC 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g1a6161a80f60177235f479cd74de7e04\">Full Description</a>"
	},
	"CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC":{
		"id": "CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC",
		"value": "<p><b><code>#define CUDA_EXTERNAL_SEMAPHORE_WAIT_SKIP_NVSCIBUF_MEMSYNC 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf07a1d15f2696b915c068c892e6f1a35\">Full Description</a>"
	},
	"CUDA_NVSCISYNC_ATTR_SIGNAL":{
		"id": "CUDA_NVSCISYNC_ATTR_SIGNAL",
		"value": "<p><b><code>#define CUDA_NVSCISYNC_ATTR_SIGNAL 0x1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g8709811eaf5a7849ad235aae65471a06\">Full Description</a>"
	},
	"CUDA_NVSCISYNC_ATTR_WAIT":{
		"id": "CUDA_NVSCISYNC_ATTR_WAIT",
		"value": "<p><b><code>#define CUDA_NVSCISYNC_ATTR_WAIT 0x2</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gd7a00d09b6061b828e13360b238cf9b4\">Full Description</a>"
	},
	"CUDA_VERSION":{
		"id": "CUDA_VERSION",
		"value": "<p><b><code>#define CUDA_VERSION 12010</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g3c09bba9b1547aa69f1e346b82bcdb50\">Full Description</a>"
	},
	"CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL":{
		"id": "CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL",
		"value": "<p><b><code>#define CU_ARRAY_SPARSE_PROPERTIES_SINGLE_MIPTAIL 0x1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g0dcf4ba7e64caa5c1aa4e88caa7f659a\">Full Description</a>"
	},
	"CU_DEVICE_CPU":{
		"id": "CU_DEVICE_CPU",
		"value": "<p><b><code>#define CU_DEVICE_CPU ((CUdevice)-1)</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g2a24bee5711059aaee8329bdc8799790\">Full Description</a>"
	},
	"CU_DEVICE_INVALID":{
		"id": "CU_DEVICE_INVALID",
		"value": "<p><b><code>#define CU_DEVICE_INVALID ((CUdevice)-2)</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gaf8ef1ee21623d3fdc5add5870df97c7\">Full Description</a>"
	},
	"CU_IPC_HANDLE_SIZE":{
		"id": "CU_IPC_HANDLE_SIZE",
		"value": "<p><b><code>#define CU_IPC_HANDLE_SIZE 64</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g3ac9bc9744e4b661dfff569637111e3b\">Full Description</a>"
	},
	"CU_LAUNCH_PARAM_BUFFER_POINTER":{
		"id": "CU_LAUNCH_PARAM_BUFFER_POINTER",
		"value": "<p><b><code>#define CU_LAUNCH_PARAM_BUFFER_POINTER</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g36d10d0b40c51372877578a2cffd6acd\">Full Description</a>"
	},
	"CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT":{
		"id": "CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT",
		"value": "<p><b><code>#define CU_LAUNCH_PARAM_BUFFER_POINTER_AS_INT 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g0f86d010bdca791f8b9e0e1f0a5dcba8\">Full Description</a>"
	},
	"CU_LAUNCH_PARAM_BUFFER_SIZE":{
		"id": "CU_LAUNCH_PARAM_BUFFER_SIZE",
		"value": "<p><b><code>#define CU_LAUNCH_PARAM_BUFFER_SIZE</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf339c057cd94562ead93a192e11c17e9\">Full Description</a>"
	},
	"CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT":{
		"id": "CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT",
		"value": "<p><b><code>#define CU_LAUNCH_PARAM_BUFFER_SIZE_AS_INT 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ge10d4042a8544e7690e06f3ea1623810\">Full Description</a>"
	},
	"CU_LAUNCH_PARAM_END":{
		"id": "CU_LAUNCH_PARAM_END",
		"value": "<p><b><code>#define CU_LAUNCH_PARAM_END</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gd5c11cff5adfa5a69d66829399653532\">Full Description</a>"
	},
	"CU_LAUNCH_PARAM_END_AS_INT":{
		"id": "CU_LAUNCH_PARAM_END_AS_INT",
		"value": "<p><b><code>#define CU_LAUNCH_PARAM_END_AS_INT 0x00</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g07a49752218aaefa41292e71773e862a\">Full Description</a>"
	},
	"CU_MEMHOSTALLOC_DEVICEMAP":{
		"id": "CU_MEMHOSTALLOC_DEVICEMAP",
		"value": "<p><b><code>#define CU_MEMHOSTALLOC_DEVICEMAP 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g054589ee2a0f188e664d93965d81113d\">Full Description</a>"
	},
	"CU_MEMHOSTALLOC_PORTABLE":{
		"id": "CU_MEMHOSTALLOC_PORTABLE",
		"value": "<p><b><code>#define CU_MEMHOSTALLOC_PORTABLE 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g50f4528d46bda58b592551654a7ee0ff\">Full Description</a>"
	},
	"CU_MEMHOSTALLOC_WRITECOMBINED":{
		"id": "CU_MEMHOSTALLOC_WRITECOMBINED",
		"value": "<p><b><code>#define CU_MEMHOSTALLOC_WRITECOMBINED 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g7361580951deecace15352c97a210038\">Full Description</a>"
	},
	"CU_MEMHOSTREGISTER_DEVICEMAP":{
		"id": "CU_MEMHOSTREGISTER_DEVICEMAP",
		"value": "<p><b><code>#define CU_MEMHOSTREGISTER_DEVICEMAP 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf1fc8645f0ab5481e7be96c80f6bfa50\">Full Description</a>"
	},
	"CU_MEMHOSTREGISTER_IOMEMORY":{
		"id": "CU_MEMHOSTREGISTER_IOMEMORY",
		"value": "<p><b><code>#define CU_MEMHOSTREGISTER_IOMEMORY 0x04</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g6a86cf1a826f8da5b01f1b5cd8da2bde\">Full Description</a>"
	},
	"CU_MEMHOSTREGISTER_PORTABLE":{
		"id": "CU_MEMHOSTREGISTER_PORTABLE",
		"value": "<p><b><code>#define CU_MEMHOSTREGISTER_PORTABLE 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g4f20a39f0a7bddc8ce7d644327a2e7da\">Full Description</a>"
	},
	"CU_MEMHOSTREGISTER_READ_ONLY":{
		"id": "CU_MEMHOSTREGISTER_READ_ONLY",
		"value": "<p><b><code>#define CU_MEMHOSTREGISTER_READ_ONLY 0x08</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gd870d49634958b801f5c02a6ba459a1a\">Full Description</a>"
	},
	"CU_MEM_CREATE_USAGE_TILE_POOL":{
		"id": "CU_MEM_CREATE_USAGE_TILE_POOL",
		"value": "<p><b><code>#define CU_MEM_CREATE_USAGE_TILE_POOL 0x1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gb445d91d9773d728b1a9962184c05799\">Full Description</a>"
	},
	"CU_PARAM_TR_DEFAULT":{
		"id": "CU_PARAM_TR_DEFAULT",
		"value": "<p><b><code>#define CU_PARAM_TR_DEFAULT -1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g3e9be6955a6a5c311ad5ea2debdd6613\">Full Description</a>"
	},
	"CU_STREAM_LEGACY":{
		"id": "CU_STREAM_LEGACY",
		"value": "<p><b><code>#define CU_STREAM_LEGACY ((CUstream)0x1)</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ga53e8210837f039dd6434a3a4c3324aa\">Full Description</a>"
	},
	"CU_STREAM_PER_THREAD":{
		"id": "CU_STREAM_PER_THREAD",
		"value": "<p><b><code>#define CU_STREAM_PER_THREAD ((CUstream)0x2)</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g02e40b82600f62c42ed29abb150f857c\">Full Description</a>"
	},
	"CU_TENSOR_MAP_NUM_QWORDS":{
		"id": "CU_TENSOR_MAP_NUM_QWORDS",
		"value": "<p><b><code>#define CU_TENSOR_MAP_NUM_QWORDS 16</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g95ca56705efb20ae69f019ceb84e41f6\">Full Description</a>"
	},
	"CU_TRSA_OVERRIDE_FORMAT":{
		"id": "CU_TRSA_OVERRIDE_FORMAT",
		"value": "<p><b><code>#define CU_TRSA_OVERRIDE_FORMAT 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf9f0c76f9c215b3bdeca06456bec3e68\">Full Description</a>"
	},
	"CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION":{
		"id": "CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION",
		"value": "<p><b><code>#define CU_TRSF_DISABLE_TRILINEAR_OPTIMIZATION 0x20</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g9512d7fa0ed8a2da30ef6f4ccc61fa4f\">Full Description</a>"
	},
	"CU_TRSF_NORMALIZED_COORDINATES":{
		"id": "CU_TRSF_NORMALIZED_COORDINATES",
		"value": "<p><b><code>#define CU_TRSF_NORMALIZED_COORDINATES 0x02</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g7a19eb49fd506ecded6e8f314298d486\">Full Description</a>"
	},
	"CU_TRSF_READ_AS_INTEGER":{
		"id": "CU_TRSF_READ_AS_INTEGER",
		"value": "<p><b><code>#define CU_TRSF_READ_AS_INTEGER 0x01</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g6d2387c1b5dd5bc98f5b4c51cefdf41e\">Full Description</a>"
	},
	"CU_TRSF_SEAMLESS_CUBEMAP":{
		"id": "CU_TRSF_SEAMLESS_CUBEMAP",
		"value": "<p><b><code>#define CU_TRSF_SEAMLESS_CUBEMAP 0x40</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g8517a99047de21e19986531ad3958e22\">Full Description</a>"
	},
	"CU_TRSF_SRGB":{
		"id": "CU_TRSF_SRGB",
		"value": "<p><b><code>#define CU_TRSF_SRGB 0x10</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g3c731d32b804fb0ae34b970efdfaf988\">Full Description</a>"
	},
	"MAX_PLANES":{
		"id": "MAX_PLANES",
		"value": "<p><b><code>#define MAX_PLANES 3</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g4269718bae6e29c6059d666ec76df24b\">Full Description</a>"
	},
	"CUaccessPolicyWindow":{
		"id": "CUaccessPolicyWindow",
		"value": "<p><b><code>typedefstructCUaccessPolicyWindow_v1 CUaccessPolicyWindow</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g1838e6438f39944217e384bf2adad477\">Full Description</a>"
	},
	"CUarray":{
		"id": "CUarray",
		"value": "<p><b><code>typedefCUarray_st* CUarray</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gd550651524a56766b60f10f0e7628042\">Full Description</a>"
	},
	"CUcontext":{
		"id": "CUcontext",
		"value": "<p><b><code>typedefCUctx_st* CUcontext</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf9f5bd81658f866613785b3a0bb7d7d9\">Full Description</a>"
	},
	"CUdevice":{
		"id": "CUdevice",
		"value": "<p><b><code>typedefCUdevice_v1 CUdevice</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g41ca2a24a242b36ef2ca77330b5fb72a\">Full Description</a>"
	},
	"CUdevice_v1":{
		"id": "CUdevice_v1",
		"value": "<p><b><code>typedefint CUdevice_v1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g076bf10c9854909b235da7681f3d7ae7\">Full Description</a>"
	},
	"CUdeviceptr":{
		"id": "CUdeviceptr",
		"value": "<p><b><code>typedefCUdeviceptr_v2 CUdeviceptr</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g183f7b0d8ad008ea2a5fd552537ace4e\">Full Description</a>"
	},
	"CUdeviceptr_v2":{
		"id": "CUdeviceptr_v2",
		"value": "<p><b><code>typedefunsignedint CUdeviceptr_v2</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gb9e6607b17e7861edc427e4a7070bc3d\">Full Description</a>"
	},
	"CUeglStreamConnection":{
		"id": "CUeglStreamConnection",
		"value": "<p><b><code>typedefCUeglStreamConnection_st* CUeglStreamConnection</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g60c595264697050bc2bb8e00cf5f86e7\">Full Description</a>"
	},
	"CUevent":{
		"id": "CUevent",
		"value": "<p><b><code>typedefCUevent_st* CUevent</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g6d740185cf0953636d4ae37f68d7559b\">Full Description</a>"
	},
	"CUexecAffinityParam":{
		"id": "CUexecAffinityParam",
		"value": "<p><b><code>typedefstructCUexecAffinityParam_v1 CUexecAffinityParam</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g4e143c37c68ad44ff2b22922f5cd8341\">Full Description</a>"
	},
	"CUexternalMemory":{
		"id": "CUexternalMemory",
		"value": "<p><b><code>typedefCUextMemory_st* CUexternalMemory</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc9500ef066876b1186f8a54afff900ba\">Full Description</a>"
	},
	"CUexternalSemaphore":{
		"id": "CUexternalSemaphore",
		"value": "<p><b><code>typedefCUextSemaphore_st* CUexternalSemaphore</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g0bc360152166a414e50a5167250552b8\">Full Description</a>"
	},
	"CUfunction":{
		"id": "CUfunction",
		"value": "<p><b><code>typedefCUfunc_st* CUfunction</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gba6128b948022f495706d93bc2cea9c8\">Full Description</a>"
	},
	"CUgraph":{
		"id": "CUgraph",
		"value": "<p><b><code>typedefCUgraph_st* CUgraph</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g69f555c38df5b3fa1ed25efef794739a\">Full Description</a>"
	},
	"CUgraphExec":{
		"id": "CUgraphExec",
		"value": "<p><b><code>typedefCUgraphExec_st* CUgraphExec</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf0abeceeaa9f0a39592fe36a538ea1f0\">Full Description</a>"
	},
	"CUgraphNode":{
		"id": "CUgraphNode",
		"value": "<p><b><code>typedefCUgraphNode_st* CUgraphNode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc72514a94dacc85ed0617f979211079c\">Full Description</a>"
	},
	"CUgraphicsResource":{
		"id": "CUgraphicsResource",
		"value": "<p><b><code>typedefCUgraphicsResource_st* CUgraphicsResource</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc0c4e1704647178d9c5ba3be46517dcd\">Full Description</a>"
	},
	"CUhostFn":{
		"id": "CUhostFn",
		"value": "<p><b><code>typedefvoid(CUDA_CB* CUhostFn )( void* userData )</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g262cd3570ff5d396db4e3dabede3c355\">Full Description</a>"
	},
	"CUkernel":{
		"id": "CUkernel",
		"value": "<p><b><code>typedefCUkern_st* CUkernel</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g612028921e5736db673e4307589989ed\">Full Description</a>"
	},
	"CUlibrary":{
		"id": "CUlibrary",
		"value": "<p><b><code>typedefCUlib_st* CUlibrary</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gb3c679dac8f1ce28d437bedd0fc907d7\">Full Description</a>"
	},
	"CUmemoryPool":{
		"id": "CUmemoryPool",
		"value": "<p><b><code>typedefCUmemPoolHandle_st* CUmemoryPool</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g3b96b1ef79f0cb312b51169e9f50e722\">Full Description</a>"
	},
	"CUmipmappedArray":{
		"id": "CUmipmappedArray",
		"value": "<p><b><code>typedefCUmipmappedArray_st* CUmipmappedArray</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g96db856ab3d2940fb694ce4501d9b583\">Full Description</a>"
	},
	"CUmodule":{
		"id": "CUmodule",
		"value": "<p><b><code>typedefCUmod_st* CUmodule</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g9e4ef4dcfba4662b2299acb8d049a1ef\">Full Description</a>"
	},
	"CUoccupancyB2DSize":{
		"id": "CUoccupancyB2DSize",
		"value": "<p><b><code>typedefsize_t(CUDA_CB* CUoccupancyB2DSize )( int blockSize )</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g6cb31f1273726f5567051e3e21607a45\">Full Description</a>"
	},
	"CUstream":{
		"id": "CUstream",
		"value": "<p><b><code>typedefCUstream_st* CUstream</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gb946c7f02e09efd788a204718015d88a\">Full Description</a>"
	},
	"CUstreamCallback":{
		"id": "CUstreamCallback",
		"value": "<p><b><code>typedefvoid(CUDA_CB* CUstreamCallback )( CUstream hStream, CUresult status, void* userData )</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ge5743a8c48527f1040107a68205c5ba9\">Full Description</a>"
	},
	"CUsurfObject":{
		"id": "CUsurfObject",
		"value": "<p><b><code>typedefCUsurfObject_v1 CUsurfObject</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g4acc685a8412637d05668e30e984e220\">Full Description</a>"
	},
	"CUsurfObject_v1":{
		"id": "CUsurfObject_v1",
		"value": "<p><b><code>typedefunsignedlonglong CUsurfObject_v1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g6cce9264e6b40e5c019c54077b2d46af\">Full Description</a>"
	},
	"CUsurfref":{
		"id": "CUsurfref",
		"value": "<p><b><code>typedefCUsurfref_st* CUsurfref</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g7b99472b414f10b2c04dd2530dc7ea76\">Full Description</a>"
	},
	"CUtexObject":{
		"id": "CUtexObject",
		"value": "<p><b><code>typedefCUtexObject_v1 CUtexObject</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g65fb6720dea73d56db0b4d4974be052d\">Full Description</a>"
	},
	"CUtexObject_v1":{
		"id": "CUtexObject_v1",
		"value": "<p><b><code>typedefunsignedlonglong CUtexObject_v1</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ga815719584f203b89c497bc2e783c483\">Full Description</a>"
	},
	"CUtexref":{
		"id": "CUtexref",
		"value": "<p><b><code>typedefCUtexref_st* CUtexref</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gec1e8eb9dc48ad748765d1fcc020d6b5\">Full Description</a>"
	},
	"CUuserObject":{
		"id": "CUuserObject",
		"value": "<p><b><code>typedefCUuserObject_st* CUuserObject</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g2578b65c87dc98d336f99edca913e92b\">Full Description</a>"
	},
	"CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS":{
		"id": "CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS",
		"value": "<p><b><code>enum CUDA_POINTER_ATTRIBUTE_ACCESS_FLAGS</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g74f899b4840d900fcfbee6a417ad8cc6\">Full Description</a>"
	},
	"CUGPUDirectRDMAWritesOrdering":{
		"id": "CUGPUDirectRDMAWritesOrdering",
		"value": "<p><b><code>enum CUGPUDirectRDMAWritesOrdering</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g8d647023012ffc318ce86814fec05376\">Full Description</a>"
	},
	"CUaccessProperty":{
		"id": "CUaccessProperty",
		"value": "<p><b><code>enum CUaccessProperty</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gbf4806140e86865b45fc144941a6ced5\">Full Description</a>"
	},
	"CUaddress_mode":{
		"id": "CUaddress_mode",
		"value": "<p><b><code>enum CUaddress_mode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc925457ee7128d6251071f6ff7608887\">Full Description</a>"
	},
	"CUarraySparseSubresourceType":{
		"id": "CUarraySparseSubresourceType",
		"value": "<p><b><code>enum CUarraySparseSubresourceType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gb7f440dccee1200001e4b14f53785d0a\">Full Description</a>"
	},
	"CUarray_cubemap_face":{
		"id": "CUarray_cubemap_face",
		"value": "<p><b><code>enum CUarray_cubemap_face</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g012fda14b50e7db8798a340627c4c330\">Full Description</a>"
	},
	"CUarray_format":{
		"id": "CUarray_format",
		"value": "<p><b><code>enum CUarray_format</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g9b009d9a6aa4c5765c8a00289b6068f9\">Full Description</a>"
	},
	"CUclusterSchedulingPolicy":{
		"id": "CUclusterSchedulingPolicy",
		"value": "<p><b><code>enum CUclusterSchedulingPolicy</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g2d60fcf51c7e8a70bd27687f19543192\">Full Description</a>"
	},
	"CUcomputemode":{
		"id": "CUcomputemode",
		"value": "<p><b><code>enum CUcomputemode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g637aab2eadb52e1c1c048b8bad9592d1\">Full Description</a>"
	},
	"CUctx_flags":{
		"id": "CUctx_flags",
		"value": "<p><b><code>enum CUctx_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g9f889e28a45a295b5c8ce13aa05f6cd4\">Full Description</a>"
	},
	"CUdevice_P2PAttribute":{
		"id": "CUdevice_P2PAttribute",
		"value": "<p><b><code>enum CUdevice_P2PAttribute</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g578d7cf687ce20f7e99468e8c14e22de\">Full Description</a>"
	},
	"CUdevice_attribute":{
		"id": "CUdevice_attribute",
		"value": "<p><b><code>enum CUdevice_attribute</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ge12b8a782bebe21b1ac0091bf9f4e2a3\">Full Description</a>"
	},
	"CUdriverProcAddressQueryResult":{
		"id": "CUdriverProcAddressQueryResult",
		"value": "<p><b><code>enum CUdriverProcAddressQueryResult</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g4186e73ff4899ff0f2e750a09c5a9fb1\">Full Description</a>"
	},
	"CUdriverProcAddress_flags":{
		"id": "CUdriverProcAddress_flags",
		"value": "<p><b><code>enum CUdriverProcAddress_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf240acf5ce809c0bbbdfb73916c635bc\">Full Description</a>"
	},
	"CUeglColorFormat":{
		"id": "CUeglColorFormat",
		"value": "<p><b><code>enum CUeglColorFormat</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g38337000e43e400e77ad36c7e197a9f2\">Full Description</a>"
	},
	"CUeglFrameType":{
		"id": "CUeglFrameType",
		"value": "<p><b><code>enum CUeglFrameType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gec3f4a4e1a5785b1aa0fcc209cd47c38\">Full Description</a>"
	},
	"CUeglResourceLocationFlags":{
		"id": "CUeglResourceLocationFlags",
		"value": "<p><b><code>enum CUeglResourceLocationFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf2804cd7cda3b8716c31ba620f644cd3\">Full Description</a>"
	},
	"CUevent_flags":{
		"id": "CUevent_flags",
		"value": "<p><b><code>enum CUevent_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g5ae04079c671c8e659a3a27c7b23f629\">Full Description</a>"
	},
	"CUevent_record_flags":{
		"id": "CUevent_record_flags",
		"value": "<p><b><code>enum CUevent_record_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g223a74c96434bb4e1d01c8685cbdef22\">Full Description</a>"
	},
	"CUevent_sched_flags":{
		"id": "CUevent_sched_flags",
		"value": "<p><b><code>enum CUevent_sched_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc767407706ebdb70e2e182eb87e45111\">Full Description</a>"
	},
	"CUevent_wait_flags":{
		"id": "CUevent_wait_flags",
		"value": "<p><b><code>enum CUevent_wait_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g0dbe4cec219cab20846e3f269a5440d4\">Full Description</a>"
	},
	"CUexecAffinityType":{
		"id": "CUexecAffinityType",
		"value": "<p><b><code>enum CUexecAffinityType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g14e6345acf2bda65be91eda77cf03f5c\">Full Description</a>"
	},
	"CUexternalMemoryHandleType":{
		"id": "CUexternalMemoryHandleType",
		"value": "<p><b><code>enum CUexternalMemoryHandleType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gbca0bdde9a33c47058b5c97f21e2edd8\">Full Description</a>"
	},
	"CUexternalSemaphoreHandleType":{
		"id": "CUexternalSemaphoreHandleType",
		"value": "<p><b><code>enum CUexternalSemaphoreHandleType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gfecb27c44dbd154273d24d35896a2920\">Full Description</a>"
	},
	"CUfilter_mode":{
		"id": "CUfilter_mode",
		"value": "<p><b><code>enum CUfilter_mode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g4fb799d90872f1d6cd074b4349f37c2a\">Full Description</a>"
	},
	"CUflushGPUDirectRDMAWritesOptions":{
		"id": "CUflushGPUDirectRDMAWritesOptions",
		"value": "<p><b><code>enum CUflushGPUDirectRDMAWritesOptions</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf34334d1d6892847a5d05be7ca8db3c6\">Full Description</a>"
	},
	"CUflushGPUDirectRDMAWritesScope":{
		"id": "CUflushGPUDirectRDMAWritesScope",
		"value": "<p><b><code>enum CUflushGPUDirectRDMAWritesScope</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g9eafc4def87e0f6600f905e756ec99d1\">Full Description</a>"
	},
	"CUflushGPUDirectRDMAWritesTarget":{
		"id": "CUflushGPUDirectRDMAWritesTarget",
		"value": "<p><b><code>enum CUflushGPUDirectRDMAWritesTarget</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g01251451232c43bc5c7cb067ed2c28ef\">Full Description</a>"
	},
	"CUfunc_cache":{
		"id": "CUfunc_cache",
		"value": "<p><b><code>enum CUfunc_cache</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g3b9bbcf42528b889e9dbe9cfa2aea3ec\">Full Description</a>"
	},
	"CUfunction_attribute":{
		"id": "CUfunction_attribute",
		"value": "<p><b><code>enum CUfunction_attribute</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g9d955dde0904a9b43ca4d875ac1551bc\">Full Description</a>"
	},
	"CUgraphDebugDot_flags":{
		"id": "CUgraphDebugDot_flags",
		"value": "<p><b><code>enum CUgraphDebugDot_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g5b105736b4941ce6977fcee64a8e719f\">Full Description</a>"
	},
	"CUgraphExecUpdateResult":{
		"id": "CUgraphExecUpdateResult",
		"value": "<p><b><code>enum CUgraphExecUpdateResult</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g8edc8969ff6ae00b7cd5d7292f812c3c\">Full Description</a>"
	},
	"CUgraphInstantiateResult":{
		"id": "CUgraphInstantiateResult",
		"value": "<p><b><code>enum CUgraphInstantiateResult</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g863484740f7d9f82c908d228f791cc56\">Full Description</a>"
	},
	"CUgraphInstantiate_flags":{
		"id": "CUgraphInstantiate_flags",
		"value": "<p><b><code>enum CUgraphInstantiate_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g070bf5517d3a7915667c256eefce4956\">Full Description</a>"
	},
	"CUgraphNodeType":{
		"id": "CUgraphNodeType",
		"value": "<p><b><code>enum CUgraphNodeType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g0731a28f826922120d783d8444e154dc\">Full Description</a>"
	},
	"CUgraphicsMapResourceFlags":{
		"id": "CUgraphicsMapResourceFlags",
		"value": "<p><b><code>enum CUgraphicsMapResourceFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc7b51d0dd848c61e45d916a15fed74d3\">Full Description</a>"
	},
	"CUgraphicsRegisterFlags":{
		"id": "CUgraphicsRegisterFlags",
		"value": "<p><b><code>enum CUgraphicsRegisterFlags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gaa05d87d332515f0fc5faefe147c817d\">Full Description</a>"
	},
	"CUipcMem_flags":{
		"id": "CUipcMem_flags",
		"value": "<p><b><code>enum CUipcMem_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g871d09eefd2aacd3b10fe4f5f23b1a32\">Full Description</a>"
	},
	"CUjitInputType":{
		"id": "CUjitInputType",
		"value": "<p><b><code>enum CUjitInputType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc78e5cb421c428676861189048888958\">Full Description</a>"
	},
	"CUjit_cacheMode":{
		"id": "CUjit_cacheMode",
		"value": "<p><b><code>enum CUjit_cacheMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gce011cfe2d6b1fb734da48a6cf48fd04\">Full Description</a>"
	},
	"CUjit_fallback":{
		"id": "CUjit_fallback",
		"value": "<p><b><code>enum CUjit_fallback</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g4a1a92ea65e18b06907b981848c282f2\">Full Description</a>"
	},
	"CUjit_option":{
		"id": "CUjit_option",
		"value": "<p><b><code>enum CUjit_option</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g5527fa8030d5cabedc781a04dbd1997d\">Full Description</a>"
	},
	"CUjit_target":{
		"id": "CUjit_target",
		"value": "<p><b><code>enum CUjit_target</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ge443308cb7ed1d52b85b487305779184\">Full Description</a>"
	},
	"CUlibraryOption":{
		"id": "CUlibraryOption",
		"value": "<p><b><code>enum CUlibraryOption</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g8a1cdb7004bb8a24f1342de9004add23\">Full Description</a>"
	},
	"CUlimit":{
		"id": "CUlimit",
		"value": "<p><b><code>enum CUlimit</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ge24c2d4214af24139020f1aecaf32665\">Full Description</a>"
	},
	"CUmemAccess_flags":{
		"id": "CUmemAccess_flags",
		"value": "<p><b><code>enum CUmemAccess_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gfba87b8c4a8cd091554d8e2c3fc9b40a\">Full Description</a>"
	},
	"CUmemAllocationCompType":{
		"id": "CUmemAllocationCompType",
		"value": "<p><b><code>enum CUmemAllocationCompType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc29a7f9bb71a4e605e2db54c8821b860\">Full Description</a>"
	},
	"CUmemAllocationGranularity_flags":{
		"id": "CUmemAllocationGranularity_flags",
		"value": "<p><b><code>enum CUmemAllocationGranularity_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g3a202e4d32ae296db1af7efe75ce365d\">Full Description</a>"
	},
	"CUmemAllocationHandleType":{
		"id": "CUmemAllocationHandleType",
		"value": "<p><b><code>enum CUmemAllocationHandleType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g450a23153d86fce0afe30e25d63caef9\">Full Description</a>"
	},
	"CUmemAllocationType":{
		"id": "CUmemAllocationType",
		"value": "<p><b><code>enum CUmemAllocationType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g7ed3482e0df8712d79a99bcb3bc4a95b\">Full Description</a>"
	},
	"CUmemAttach_flags":{
		"id": "CUmemAttach_flags",
		"value": "<p><b><code>enum CUmemAttach_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g17c5d5f9b585aa2d6f121847d1a78f4c\">Full Description</a>"
	},
	"CUmemHandleType":{
		"id": "CUmemHandleType",
		"value": "<p><b><code>enum CUmemHandleType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g31a65081da1729d11a1d6f5a433d93b0\">Full Description</a>"
	},
	"CUmemLocationType":{
		"id": "CUmemLocationType",
		"value": "<p><b><code>enum CUmemLocationType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g75cfd5b9fa5c1c6ee2be2547bfbe882e\">Full Description</a>"
	},
	"CUmemOperationType":{
		"id": "CUmemOperationType",
		"value": "<p><b><code>enum CUmemOperationType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ge7469bd2e035fc9c937e84490fdcd349\">Full Description</a>"
	},
	"CUmemPool_attribute":{
		"id": "CUmemPool_attribute",
		"value": "<p><b><code>enum CUmemPool_attribute</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g5af6ea9ddd7633be98cb7de1bbf1d9f0\">Full Description</a>"
	},
	"CUmemRangeHandleType":{
		"id": "CUmemRangeHandleType",
		"value": "<p><b><code>enum CUmemRangeHandleType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g579b315f05d1e65a4f3de7da45013210\">Full Description</a>"
	},
	"CUmem_advise":{
		"id": "CUmem_advise",
		"value": "<p><b><code>enum CUmem_advise</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gcfe2ed2d4567745dd4ad41034136fff3\">Full Description</a>"
	},
	"CUmemorytype":{
		"id": "CUmemorytype",
		"value": "<p><b><code>enum CUmemorytype</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g8a114cc994ad2e865c44ef3838eaec72\">Full Description</a>"
	},
	"CUmulticastGranularity_flags":{
		"id": "CUmulticastGranularity_flags",
		"value": "<p><b><code>enum CUmulticastGranularity_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gcdeff171670a788001418262a0f88378\">Full Description</a>"
	},
	"CUoccupancy_flags":{
		"id": "CUoccupancy_flags",
		"value": "<p><b><code>enum CUoccupancy_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g40caa223198d058e073116b6a55eb895\">Full Description</a>"
	},
	"CUpointer_attribute":{
		"id": "CUpointer_attribute",
		"value": "<p><b><code>enum CUpointer_attribute</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc2cce590e35080745e72633dfc6e0b60\">Full Description</a>"
	},
	"CUresourceViewFormat":{
		"id": "CUresourceViewFormat",
		"value": "<p><b><code>enum CUresourceViewFormat</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ge7db5e5fe7c197287e55f2e97289dfcf\">Full Description</a>"
	},
	"CUresourcetype":{
		"id": "CUresourcetype",
		"value": "<p><b><code>enum CUresourcetype</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g9f0a76c9f6be437e75c8310aea5280f6\">Full Description</a>"
	},
	"CUresult":{
		"id": "CUresult",
		"value": "<p><b><code>enum CUresult</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gc6c391505e117393cc2558fff6bfc2e9\">Full Description</a>"
	},
	"CUshared_carveout":{
		"id": "CUshared_carveout",
		"value": "<p><b><code>enum CUshared_carveout</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g123b546391ea75a75bf284305f300dd6\">Full Description</a>"
	},
	"CUsharedconfig":{
		"id": "CUsharedconfig",
		"value": "<p><b><code>enum CUsharedconfig</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g92d66e95f602cb9fdaf0682c260c241b\">Full Description</a>"
	},
	"CUstreamBatchMemOpType":{
		"id": "CUstreamBatchMemOpType",
		"value": "<p><b><code>enum CUstreamBatchMemOpType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gb257b534afdb704b6ebdb99c16a5b292\">Full Description</a>"
	},
	"CUstreamCaptureMode":{
		"id": "CUstreamCaptureMode",
		"value": "<p><b><code>enum CUstreamCaptureMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gd984ba65031d63f1ed11ec76728c2669\">Full Description</a>"
	},
	"CUstreamCaptureStatus":{
		"id": "CUstreamCaptureStatus",
		"value": "<p><b><code>enum CUstreamCaptureStatus</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g7480c0f2bd19894e54fcd2c04d6efb91\">Full Description</a>"
	},
	"CUstreamMemoryBarrier_flags":{
		"id": "CUstreamMemoryBarrier_flags",
		"value": "<p><b><code>enum CUstreamMemoryBarrier_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gd21e1cc26a66b2451b81bdc9ff88610d\">Full Description</a>"
	},
	"CUstreamUpdateCaptureDependencies_flags":{
		"id": "CUstreamUpdateCaptureDependencies_flags",
		"value": "<p><b><code>enum CUstreamUpdateCaptureDependencies_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gef58550e3d1f6d73c7e326455e744663\">Full Description</a>"
	},
	"CUstreamWaitValue_flags":{
		"id": "CUstreamWaitValue_flags",
		"value": "<p><b><code>enum CUstreamWaitValue_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gf16864e8693d888f8178067470001b21\">Full Description</a>"
	},
	"CUstreamWriteValue_flags":{
		"id": "CUstreamWriteValue_flags",
		"value": "<p><b><code>enum CUstreamWriteValue_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g57787c039734758648d92109c7373141\">Full Description</a>"
	},
	"CUstream_flags":{
		"id": "CUstream_flags",
		"value": "<p><b><code>enum CUstream_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g775cb4ffbb7adf91e190067d9ad1752a\">Full Description</a>"
	},
	"CUtensorMapDataType":{
		"id": "CUtensorMapDataType",
		"value": "<p><b><code>enum CUtensorMapDataType</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g42bfc19a0751d7183ee94faf9d9e779d\">Full Description</a>"
	},
	"CUtensorMapFloatOOBfill":{
		"id": "CUtensorMapFloatOOBfill",
		"value": "<p><b><code>enum CUtensorMapFloatOOBfill</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1gde9161158bee466f4f92be353c52480e\">Full Description</a>"
	},
	"CUtensorMapInterleave":{
		"id": "CUtensorMapInterleave",
		"value": "<p><b><code>enum CUtensorMapInterleave</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g4af9a09e04bb8fc817eeb7be1c5cea70\">Full Description</a>"
	},
	"CUtensorMapL2promotion":{
		"id": "CUtensorMapL2promotion",
		"value": "<p><b><code>enum CUtensorMapL2promotion</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ga054bf4ec364bd7bd00966a03cf51fb7\">Full Description</a>"
	},
	"CUtensorMapSwizzle":{
		"id": "CUtensorMapSwizzle",
		"value": "<p><b><code>enum CUtensorMapSwizzle</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g0bc04417bd8ce2c64d204bc3cbc25b58\">Full Description</a>"
	},
	"CUuserObjectRetain_flags":{
		"id": "CUuserObjectRetain_flags",
		"value": "<p><b><code>enum CUuserObjectRetain_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g1649c3055c83c32f812faac63c8da0b1\">Full Description</a>"
	},
	"CUuserObject_flags":{
		"id": "CUuserObject_flags",
		"value": "<p><b><code>enum CUuserObject_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g11c53cd19ee840b3b0f597d57451e943\">Full Description</a>"
	},
	"cl_context_flags":{
		"id": "cl_context_flags",
		"value": "<p><b><code>enum cl_context_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1g177539f817e4453fa47e60b431d82ddb\">Full Description</a>"
	},
	"cl_event_flags":{
		"id": "cl_event_flags",
		"value": "<p><b><code>enum cl_event_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TYPES.html#group__CUDA__TYPES#group__CUDA__TYPES_1ged3b1af3c026dd8b2788f81a45ab0fe0\">Full Description</a>"
	},
	"cuGetErrorName":{
		"id": "cuGetErrorName",
		"value": "<p><b><code>CUresult cuGetErrorName ( CUresult error, const char** pStr )</code></b></p>",
		"description": "<p>Gets the string representation of an error code enum name.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>error</code><br>&emsp;- Error code to convert to string<br><code>pStr</code><br>&emsp;- Address of the string pointer.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__ERROR.html#group__CUDA__ERROR#group__CUDA__ERROR_1g2c4ac087113652bb3d1f95bf2513c468\">Full Description</a>"
	},
	"cuGetErrorString":{
		"id": "cuGetErrorString",
		"value": "<p><b><code>CUresult cuGetErrorString ( CUresult error, const char** pStr )</code></b></p>",
		"description": "<p>Gets the string description of an error code.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>error</code><br>&emsp;- Error code to convert to string<br><code>pStr</code><br>&emsp;- Address of the string pointer.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__ERROR.html#group__CUDA__ERROR#group__CUDA__ERROR_1g72758fcaf05b5c7fac5c25ead9445ada\">Full Description</a>"
	},
	"cuInit":{
		"id": "cuInit",
		"value": "<p><b><code>CUresult cuInit ( unsigned int Flags )</code></b></p>",
		"description": "<p>Initialize the CUDA driver API Initializes the driver API and must be called before any other function from the driver API in the current process. Currently, the Flags parameter must be 0. If cuInit() has not been called, any function from the driver API will return CUDA_ERROR_NOT_INITIALIZED.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>Flags</code><br>&emsp;- Initialization flag for CUDA.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_SYSTEM_DRIVER_MISMATCH, CUDA_ERROR_COMPAT_NOT_SUPPORTED_ON_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__INITIALIZE.html#group__CUDA__INITIALIZE#group__CUDA__INITIALIZE_1g0a2f1517e1bd8502c7194c3a8c134bc3\">Full Description</a>"
	},
	"cuDriverGetVersion":{
		"id": "cuDriverGetVersion",
		"value": "<p><b><code>CUresult cuDriverGetVersion ( int* driverVersion )</code></b></p>",
		"description": "<p>Returns the latest CUDA version supported by driver.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>driverVersion</code><br>&emsp;- Returns the CUDA driver version<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VERSION.html#group__CUDA__VERSION#group__CUDA__VERSION_1g8b7a10395392e049006e61bcdc8ebe71\">Full Description</a>"
	},
	"cuDeviceGet":{
		"id": "cuDeviceGet",
		"value": "<p><b><code>CUresult cuDeviceGet ( CUdevice* device, int ordinal )</code></b></p>",
		"description": "<p>Returns a handle to a compute device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Returned device handle<br><code>ordinal</code><br>&emsp;- Device number to get handle for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1g8bdd1cc7201304b01357b8034f6587cb\">Full Description</a>"
	},
	"cuDeviceGetAttribute":{
		"id": "cuDeviceGetAttribute",
		"value": "<p><b><code>CUresult cuDeviceGetAttribute ( int* pi, CUdevice_attribute attrib, CUdevice dev )</code></b></p>",
		"description": "<p>Returns information about the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pi</code><br>&emsp;- Returned device attribute value<br><code>attrib</code><br>&emsp;- Device attribute to query<br><code>dev</code><br>&emsp;- Device handle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1g9c3e1414f0ad901d3278a4d6645fc266\">Full Description</a>"
	},
	"cuDeviceGetCount":{
		"id": "cuDeviceGetCount",
		"value": "<p><b><code>CUresult cuDeviceGetCount ( int* count )</code></b></p>",
		"description": "<p>Returns the number of compute-capable devices.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Returned number of compute-capable devices<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1g52b5ce05cb8c5fb6831b2c0ff2887c74\">Full Description</a>"
	},
	"cuDeviceGetDefaultMemPool":{
		"id": "cuDeviceGetDefaultMemPool",
		"value": "<p><b><code>CUresult cuDeviceGetDefaultMemPool ( CUmemoryPool* pool_out, CUdevice dev )</code></b></p>",
		"description": "<p>Returns the default mempool of a device.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZEDCUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1gc8bca3c97a78816303b8aa5773b741f2\">Full Description</a>"
	},
	"cuDeviceGetExecAffinitySupport":{
		"id": "cuDeviceGetExecAffinitySupport",
		"value": "<p><b><code>CUresult cuDeviceGetExecAffinitySupport ( int* pi, CUexecAffinityType type, CUdevice dev )</code></b></p>",
		"description": "<p>Returns information about the execution affinity support of the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pi</code><br>&emsp;- 1 if the execution affinity type type is supported by the device, or 0 if not<br><code>type</code><br>&emsp;- Execution affinity type to query<br><code>dev</code><br>&emsp;- Device handle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1g7f0091850e0841f367f13d623456427d\">Full Description</a>"
	},
	"cuDeviceGetLuid":{
		"id": "cuDeviceGetLuid",
		"value": "<p><b><code>CUresult cuDeviceGetLuid ( char* luid, unsigned int* deviceNodeMask, CUdevice dev )</code></b></p>",
		"description": "<p>Return an LUID and device node mask for the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>luid</code><br>&emsp;- Returned LUID<br><code>deviceNodeMask</code><br>&emsp;- Returned device node mask<br><code>dev</code><br>&emsp;- Device to get identifier string for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1g630073c868f8878e89705ea831c49249\">Full Description</a>"
	},
	"cuDeviceGetMemPool":{
		"id": "cuDeviceGetMemPool",
		"value": "<p><b><code>CUresult cuDeviceGetMemPool ( CUmemoryPool* pool, CUdevice dev )</code></b></p>",
		"description": "<p>Gets the current mempool for a device.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1gdf186e9559d53a5eb18e572d48c1121b\">Full Description</a>"
	},
	"cuDeviceGetName":{
		"id": "cuDeviceGetName",
		"value": "<p><b><code>CUresult cuDeviceGetName ( char* name, int len, CUdevice dev )</code></b></p>",
		"description": "<p>Returns an identifier string for the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>name</code><br>&emsp;- Returned identifier string for the device<br><code>len</code><br>&emsp;- Maximum length of string to store in name<br><code>dev</code><br>&emsp;- Device to get identifier string for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1gef75aa30df95446a845f2a7b9fffbb7f\">Full Description</a>"
	},
	"cuDeviceGetNvSciSyncAttributes":{
		"id": "cuDeviceGetNvSciSyncAttributes",
		"value": "<p><b><code>CUresult cuDeviceGetNvSciSyncAttributes ( void* nvSciSyncAttrList, CUdevice dev, int flags )</code></b></p>",
		"description": "<p>Return NvSciSync attributes that this device can support.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>nvSciSyncAttrList</code><br>&emsp;- Return NvSciSync attributes supported.<br><code>dev</code><br>&emsp;- Valid Cuda Device to get NvSciSync attributes for.<br><code>flags</code><br>&emsp;- flags describing NvSciSync usage.<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1g0991e2b2b3cedee1ca77d6376e581335\">Full Description</a>"
	},
	"cuDeviceGetTexture1DLinearMaxWidth":{
		"id": "cuDeviceGetTexture1DLinearMaxWidth",
		"value": "<p><b><code>CUresult cuDeviceGetTexture1DLinearMaxWidth ( size_t* maxWidthInElements, CUarray_format format, unsigned numChannels, CUdevice dev )</code></b></p>",
		"description": "<p>Returns the maximum number of elements allocatable in a 1D linear texture for a given texture element size.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>maxWidthInElements</code><br>&emsp;- Returned maximum number of texture elements allocatable for given format and numChannels.<br><code>format</code><br>&emsp;- Texture format.<br><code>numChannels</code><br>&emsp;- Number of channels per texture element.<br><code>dev</code><br>&emsp;- Device handle.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1gb41b3a675bae9932bffa1c0ae969b1e0\">Full Description</a>"
	},
	"cuDeviceGetUuid":{
		"id": "cuDeviceGetUuid",
		"value": "<p><b><code>CUresult cuDeviceGetUuid ( CUuuid* uuid, CUdevice dev )</code></b></p>",
		"description": "<p>Return an UUID for the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>uuid</code><br>&emsp;- Returned UUID<br><code>dev</code><br>&emsp;- Device to get identifier string for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1g987b46b884c101ed5be414ab4d9e60e4\">Full Description</a>"
	},
	"cuDeviceGetUuid_v2":{
		"id": "cuDeviceGetUuid_v2",
		"value": "<p><b><code>CUresult cuDeviceGetUuid_v2 ( CUuuid* uuid, CUdevice dev )</code></b></p>",
		"description": "<p>Return an UUID for the device (11.4+).</p>",
		"additional_information": "<p><b>Parameters</b><br><code>uuid</code><br>&emsp;- Returned UUID<br><code>dev</code><br>&emsp;- Device to get identifier string for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1gdf3394a41af9cdb9f653386ed4991a1f\">Full Description</a>"
	},
	"cuDeviceSetMemPool":{
		"id": "cuDeviceSetMemPool",
		"value": "<p><b><code>CUresult cuDeviceSetMemPool ( CUdevice dev, CUmemoryPool pool )</code></b></p>",
		"description": "<p>Sets the current memory pool of a device.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1g4f2f276b84d9c2eaefdc76d6274db4a0\">Full Description</a>"
	},
	"cuDeviceTotalMem":{
		"id": "cuDeviceTotalMem",
		"value": "<p><b><code>CUresult cuDeviceTotalMem ( size_t* bytes, CUdevice dev )</code></b></p>",
		"description": "<p>Returns the total amount of memory on the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>bytes</code><br>&emsp;- Returned memory available on device in bytes<br><code>dev</code><br>&emsp;- Device handle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1gc6a0d6551335a3780f9f3c967a0fde5d\">Full Description</a>"
	},
	"cuFlushGPUDirectRDMAWrites":{
		"id": "cuFlushGPUDirectRDMAWrites",
		"value": "<p><b><code>CUresult cuFlushGPUDirectRDMAWrites ( CUflushGPUDirectRDMAWritesTarget target, CUflushGPUDirectRDMAWritesScope scope )</code></b></p>",
		"description": "<p>Blocks until remote writes are visible to the specified scope.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>target</code><br>&emsp;- The target of the operation, see CUflushGPUDirectRDMAWritesTarget<br><code>scope</code><br>&emsp;- The scope of the operation, see CUflushGPUDirectRDMAWritesScope<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE.html#group__CUDA__DEVICE#group__CUDA__DEVICE_1g265e3c82ef0f0fe035f85c4c45a8fbdf\">Full Description</a>"
	},
	"cuDeviceComputeCapability":{
		"id": "cuDeviceComputeCapability",
		"value": "<p><b><code>CUresult cuDeviceComputeCapability ( int* major, int* minor, CUdevice dev )</code></b></p>",
		"description": "<p>Returns the compute capability of the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>major</code><br>&emsp;- Major revision number<br><code>minor</code><br>&emsp;- Minor revision number<br><code>dev</code><br>&emsp;- Device handle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE__DEPRECATED.html#group__CUDA__DEVICE__DEPRECATED#group__CUDA__DEVICE__DEPRECATED_1gdc50ce6a6e0a593158d4ccb3567e0545\">Full Description</a>"
	},
	"cuDeviceGetProperties":{
		"id": "cuDeviceGetProperties",
		"value": "<p><b><code>CUresult cuDeviceGetProperties ( CUdevprop* prop, CUdevice dev )</code></b></p>",
		"description": "<p>Returns properties for a selected device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>prop</code><br>&emsp;- Returned properties of device<br><code>dev</code><br>&emsp;- Device to get properties for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DEVICE__DEPRECATED.html#group__CUDA__DEVICE__DEPRECATED#group__CUDA__DEVICE__DEPRECATED_1ged20a6d946d0217b3b1e0a40df6a43a6\">Full Description</a>"
	},
	"cuDevicePrimaryCtxGetState":{
		"id": "cuDevicePrimaryCtxGetState",
		"value": "<p><b><code>CUresult cuDevicePrimaryCtxGetState ( CUdevice dev, unsigned int* flags, int* active )</code></b></p>",
		"description": "<p>Get the state of the primary context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dev</code><br>&emsp;- Device to get primary context flags for<br><code>flags</code><br>&emsp;- Pointer to store flags<br><code>active</code><br>&emsp;- Pointer to store context state; 0 = inactive, 1 = active<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PRIMARY__CTX.html#group__CUDA__PRIMARY__CTX#group__CUDA__PRIMARY__CTX_1g65f3e018721b6d90aa05cfb56250f469\">Full Description</a>"
	},
	"cuDevicePrimaryCtxRelease":{
		"id": "cuDevicePrimaryCtxRelease",
		"value": "<p><b><code>CUresult cuDevicePrimaryCtxRelease ( CUdevice dev )</code></b></p>",
		"description": "<p>Release the primary context on the GPU.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dev</code><br>&emsp;- Device which primary context is released<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PRIMARY__CTX.html#group__CUDA__PRIMARY__CTX#group__CUDA__PRIMARY__CTX_1gf2a8bc16f8df0c88031f6a1ba3d6e8ad\">Full Description</a>"
	},
	"cuDevicePrimaryCtxReset":{
		"id": "cuDevicePrimaryCtxReset",
		"value": "<p><b><code>CUresult cuDevicePrimaryCtxReset ( CUdevice dev )</code></b></p>",
		"description": "<p>Destroy all allocations and reset all state on the primary context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dev</code><br>&emsp;- Device for which primary context is destroyed<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PRIMARY__CTX.html#group__CUDA__PRIMARY__CTX#group__CUDA__PRIMARY__CTX_1g5d38802e8600340283958a117466ce12\">Full Description</a>"
	},
	"cuDevicePrimaryCtxRetain":{
		"id": "cuDevicePrimaryCtxRetain",
		"value": "<p><b><code>CUresult cuDevicePrimaryCtxRetain ( CUcontext* pctx, CUdevice dev )</code></b></p>",
		"description": "<p>Retain the primary context on the GPU.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pctx</code><br>&emsp;- Returned context handle of the new context<br><code>dev</code><br>&emsp;- Device for which primary context is requested<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PRIMARY__CTX.html#group__CUDA__PRIMARY__CTX#group__CUDA__PRIMARY__CTX_1g9051f2d5c31501997a6cb0530290a300\">Full Description</a>"
	},
	"cuDevicePrimaryCtxSetFlags":{
		"id": "cuDevicePrimaryCtxSetFlags",
		"value": "<p><b><code>CUresult cuDevicePrimaryCtxSetFlags ( CUdevice dev, unsigned int flags )</code></b></p>",
		"description": "<p>Set flags for the primary context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dev</code><br>&emsp;- Device for which the primary context flags are set<br><code>flags</code><br>&emsp;- New flags for the device<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PRIMARY__CTX.html#group__CUDA__PRIMARY__CTX#group__CUDA__PRIMARY__CTX_1gd779a84f17acdad0d9143d9fe719cfdf\">Full Description</a>"
	},
	"cuCtxCreate":{
		"id": "cuCtxCreate",
		"value": "<p><b><code>CUresult cuCtxCreate ( CUcontext* pctx, unsigned int flags, CUdevice dev )</code></b></p>",
		"description": "<p>Create a CUDA context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pctx</code><br>&emsp;- Returned context handle of the new context<br><code>flags</code><br>&emsp;- Context creation flags<br><code>dev</code><br>&emsp;- Device to create context on<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g65dc0012348bc84810e2103a40d8e2cf\">Full Description</a>"
	},
	"cuCtxCreate_v3":{
		"id": "cuCtxCreate_v3",
		"value": "<p><b><code>CUresult cuCtxCreate_v3 ( CUcontext* pctx, CUexecAffinityParam* paramsArray, int numParams, unsigned int flags, CUdevice dev )</code></b></p>",
		"description": "<p>Create a CUDA context with execution affinity.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pctx</code><br>&emsp;- Returned context handle of the new context<br><code>paramsArray</code><br>&emsp;- Execution affinity parameters<br><code>numParams</code><br>&emsp;- Number of execution affinity parameters<br><code>flags</code><br>&emsp;- Context creation flags<br><code>dev</code><br>&emsp;- Device to create context on<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNSUPPORTED_EXEC_AFFINITY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g2a5b565b1fb067f319c98787ddfa4016\">Full Description</a>"
	},
	"cuCtxDestroy":{
		"id": "cuCtxDestroy",
		"value": "<p><b><code>CUresult cuCtxDestroy ( CUcontext ctx )</code></b></p>",
		"description": "<p>Destroy a CUDA context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ctx</code><br>&emsp;- Context to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g27a365aebb0eb548166309f58a1e8b8e\">Full Description</a>"
	},
	"cuCtxGetApiVersion":{
		"id": "cuCtxGetApiVersion",
		"value": "<p><b><code>CUresult cuCtxGetApiVersion ( CUcontext ctx, unsigned int* version )</code></b></p>",
		"description": "<p>Gets the context's API version.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ctx</code><br>&emsp;- Context to check<br><code>version</code><br>&emsp;- Pointer to version<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g088a90490dafca5893ef6fbebc8de8fb\">Full Description</a>"
	},
	"cuCtxGetCacheConfig":{
		"id": "cuCtxGetCacheConfig",
		"value": "<p><b><code>CUresult cuCtxGetCacheConfig ( CUfunc_cache* pconfig )</code></b></p>",
		"description": "<p>Returns the preferred cache configuration for the current context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pconfig</code><br>&emsp;- Returned cache configuration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g40b6b141698f76744dea6e39b9a25360\">Full Description</a>"
	},
	"cuCtxGetCurrent":{
		"id": "cuCtxGetCurrent",
		"value": "<p><b><code>CUresult cuCtxGetCurrent ( CUcontext* pctx )</code></b></p>",
		"description": "<p>Returns the CUDA context bound to the calling CPU thread.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pctx</code><br>&emsp;- Returned context handle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g8f13165846b73750693640fb3e8380d0\">Full Description</a>"
	},
	"cuCtxGetDevice":{
		"id": "cuCtxGetDevice",
		"value": "<p><b><code>CUresult cuCtxGetDevice ( CUdevice* device )</code></b></p>",
		"description": "<p>Returns the device ID for the current context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Returned device ID for the current context<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g4e84b109eba36cdaaade167f34ae881e\">Full Description</a>"
	},
	"cuCtxGetExecAffinity":{
		"id": "cuCtxGetExecAffinity",
		"value": "<p><b><code>CUresult cuCtxGetExecAffinity ( CUexecAffinityParam* pExecAffinity, CUexecAffinityType type )</code></b></p>",
		"description": "<p>Returns the execution affinity setting for the current context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pExecAffinity</code><br>&emsp;- Returned execution affinity<br><code>type</code><br>&emsp;- Execution affinity type to query<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNSUPPORTED_EXEC_AFFINITY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g83421924a20536a4df538111cf61b405\">Full Description</a>"
	},
	"cuCtxGetFlags":{
		"id": "cuCtxGetFlags",
		"value": "<p><b><code>CUresult cuCtxGetFlags ( unsigned int* flags )</code></b></p>",
		"description": "<p>Returns the flags for the current context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>flags</code><br>&emsp;- Pointer to store flags of current context<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1gf81eef983c1e3b2ef4f166d7a930c86d\">Full Description</a>"
	},
	"cuCtxGetId":{
		"id": "cuCtxGetId",
		"value": "<p><b><code>CUresult cuCtxGetId ( CUcontext ctx, unsigned long long* ctxId )</code></b></p>",
		"description": "<p>Returns the unique Id associated with the context supplied.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ctx</code><br>&emsp;- Context for which to obtain the Id<br><code>ctxId</code><br>&emsp;- Pointer to store the Id of the context<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_CONTEXT_IS_DESTROYED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g32f492cd6c3f90af0d6935b294392db5\">Full Description</a>"
	},
	"cuCtxGetLimit":{
		"id": "cuCtxGetLimit",
		"value": "<p><b><code>CUresult cuCtxGetLimit ( size_t* pvalue, CUlimit limit )</code></b></p>",
		"description": "<p>Returns resource limits.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pvalue</code><br>&emsp;- Returned size of limit<br><code>limit</code><br>&emsp;- Limit to query<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNSUPPORTED_LIMIT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g9f2d47d1745752aa16da7ed0d111b6a8\">Full Description</a>"
	},
	"cuCtxGetSharedMemConfig":{
		"id": "cuCtxGetSharedMemConfig",
		"value": "<p><b><code>CUresult cuCtxGetSharedMemConfig ( CUsharedconfig* pConfig )</code></b></p>",
		"description": "<p>Returns the current shared memory configuration for the current context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pConfig</code><br>&emsp;- returned shared memory configuration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g17153a1b8b8c756f7ab8505686a4ad74\">Full Description</a>"
	},
	"cuCtxGetStreamPriorityRange":{
		"id": "cuCtxGetStreamPriorityRange",
		"value": "<p><b><code>CUresult cuCtxGetStreamPriorityRange ( int* leastPriority, int* greatestPriority )</code></b></p>",
		"description": "<p>Returns numerical values that correspond to the least and greatest stream priorities.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>leastPriority</code><br>&emsp;- Pointer to an int in which the numerical value for least stream priority is returned<br><code>greatestPriority</code><br>&emsp;- Pointer to an int in which the numerical value for greatest stream priority is returned<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g137920ab61a71be6ce67605b9f294091\">Full Description</a>"
	},
	"cuCtxPopCurrent":{
		"id": "cuCtxPopCurrent",
		"value": "<p><b><code>CUresult cuCtxPopCurrent ( CUcontext* pctx )</code></b></p>",
		"description": "<p>Pops the current CUDA context from the current CPU thread.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pctx</code><br>&emsp;- Returned popped context handle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g2fac188026a062d92e91a8687d0a7902\">Full Description</a>"
	},
	"cuCtxPushCurrent":{
		"id": "cuCtxPushCurrent",
		"value": "<p><b><code>CUresult cuCtxPushCurrent ( CUcontext ctx )</code></b></p>",
		"description": "<p>Pushes a context on the current CPU thread.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ctx</code><br>&emsp;- Context to push<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1gb02d4c850eb16f861fe5a29682cc90ba\">Full Description</a>"
	},
	"cuCtxResetPersistingL2Cache":{
		"id": "cuCtxResetPersistingL2Cache",
		"value": "<p><b><code>CUresult cuCtxResetPersistingL2Cache ( void )</code></b></p>",
		"description": "<p>Resets all persisting lines in cache to normal status.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1gb529532b5b1aef808295a6d1d18a0823\">Full Description</a>"
	},
	"cuCtxSetCacheConfig":{
		"id": "cuCtxSetCacheConfig",
		"value": "<p><b><code>CUresult cuCtxSetCacheConfig ( CUfunc_cache config )</code></b></p>",
		"description": "<p>Sets the preferred cache configuration for the current context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>config</code><br>&emsp;- Requested cache configuration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g54699acf7e2ef27279d013ca2095f4a3\">Full Description</a>"
	},
	"cuCtxSetCurrent":{
		"id": "cuCtxSetCurrent",
		"value": "<p><b><code>CUresult cuCtxSetCurrent ( CUcontext ctx )</code></b></p>",
		"description": "<p>Binds the specified CUDA context to the calling CPU thread.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ctx</code><br>&emsp;- Context to bind to the calling CPU thread<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1gbe562ee6258b4fcc272ca6478ca2a2f7\">Full Description</a>"
	},
	"cuCtxSetFlags":{
		"id": "cuCtxSetFlags",
		"value": "<p><b><code>CUresult cuCtxSetFlags ( unsigned int flags )</code></b></p>",
		"description": "<p>Sets the flags for the current context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>flags</code><br>&emsp;- Flags to set on the current context<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g66655c37602c8628eae3e40c82619f1e\">Full Description</a>"
	},
	"cuCtxSetLimit":{
		"id": "cuCtxSetLimit",
		"value": "<p><b><code>CUresult cuCtxSetLimit ( CUlimit limit, size_t value )</code></b></p>",
		"description": "<p>Set resource limits.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>limit</code><br>&emsp;- Limit to set<br><code>value</code><br>&emsp;- Size of limit<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNSUPPORTED_LIMIT, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g0651954dfb9788173e60a9af7201e65a\">Full Description</a>"
	},
	"cuCtxSetSharedMemConfig":{
		"id": "cuCtxSetSharedMemConfig",
		"value": "<p><b><code>CUresult cuCtxSetSharedMemConfig ( CUsharedconfig config )</code></b></p>",
		"description": "<p>Sets the shared memory configuration for the current context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>config</code><br>&emsp;- requested shared memory configuration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g2574235fa643f8f251bf7bc28fac3692\">Full Description</a>"
	},
	"cuCtxSynchronize":{
		"id": "cuCtxSynchronize",
		"value": "<p><b><code>CUresult cuCtxSynchronize ( void )</code></b></p>",
		"description": "<p>Block for a context's tasks to complete.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX.html#group__CUDA__CTX#group__CUDA__CTX_1g7a54725f28d34b8c6299f0c6ca579616\">Full Description</a>"
	},
	"cuCtxAttach":{
		"id": "cuCtxAttach",
		"value": "<p><b><code>CUresult cuCtxAttach ( CUcontext* pctx, unsigned int flags )</code></b></p>",
		"description": "<p>Increment a context's usage-count.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pctx</code><br>&emsp;- Returned context handle of the current context<br><code>flags</code><br>&emsp;- Context attach flags (must be 0)<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX__DEPRECATED.html#group__CUDA__CTX__DEPRECATED#group__CUDA__CTX__DEPRECATED_1g3c9b7c5833d57e7ccea5aeaba6009f5d\">Full Description</a>"
	},
	"cuCtxDetach":{
		"id": "cuCtxDetach",
		"value": "<p><b><code>CUresult cuCtxDetach ( CUcontext ctx )</code></b></p>",
		"description": "<p>Decrement a context's usage-count.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ctx</code><br>&emsp;- Context to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__CTX__DEPRECATED.html#group__CUDA__CTX__DEPRECATED#group__CUDA__CTX__DEPRECATED_1g2da7d6b2651b46896871a068e2860551\">Full Description</a>"
	},
	"CUmoduleLoadingMode":{
		"id": "CUmoduleLoadingMode",
		"value": "<p><b><code>enum CUmoduleLoadingMode</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g0e7bf7ad0d578861e15678997f74f789\">Full Description</a>"
	},
	"cuLinkAddData":{
		"id": "cuLinkAddData",
		"value": "<p><b><code>CUresult cuLinkAddData ( CUlinkState state, CUjitInputType type, void* data, size_t size, const char* name, unsigned int numOptions, CUjit_option* options, void** optionValues )</code></b></p>",
		"description": "<p>Add an input to a pending linker invocation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>state</code><br>&emsp;A pending linker action.<br><code>type</code><br>&emsp;The type of the input data.<br><code>data</code><br>&emsp;The input data. PTX must be NULL-terminated.<br><code>size</code><br>&emsp;The length of the input data.<br><code>name</code><br>&emsp;An optional name for this input in log messages.<br><code>numOptions</code><br>&emsp;Size of options.<br><code>options</code><br>&emsp;Options to be applied only for this input (overrides options from cuLinkCreate).<br><code>optionValues</code><br>&emsp;Array of option values, each cast to void *.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_IMAGE, CUDA_ERROR_INVALID_PTX, CUDA_ERROR_UNSUPPORTED_PTX_VERSION, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NO_BINARY_FOR_GPU<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g3ebcd2ccb772ba9c120937a2d2831b77\">Full Description</a>"
	},
	"cuLinkAddFile":{
		"id": "cuLinkAddFile",
		"value": "<p><b><code>CUresult cuLinkAddFile ( CUlinkState state, CUjitInputType type, const char* path, unsigned int numOptions, CUjit_option* options, void** optionValues )</code></b></p>",
		"description": "<p>Add a file input to a pending linker invocation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>state</code><br>&emsp;A pending linker action<br><code>type</code><br>&emsp;The type of the input data<br><code>path</code><br>&emsp;Path to the input file<br><code>numOptions</code><br>&emsp;Size of options<br><code>options</code><br>&emsp;Options to be applied only for this input (overrides options from cuLinkCreate)<br><code>optionValues</code><br>&emsp;Array of option values, each cast to void *<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_FILE_NOT_FOUNDCUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_IMAGE, CUDA_ERROR_INVALID_PTX, CUDA_ERROR_UNSUPPORTED_PTX_VERSION, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NO_BINARY_FOR_GPU<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g1224c0fd48d4a683f3ce19997f200a8c\">Full Description</a>"
	},
	"cuLinkComplete":{
		"id": "cuLinkComplete",
		"value": "<p><b><code>CUresult cuLinkComplete ( CUlinkState state, void** cubinOut, size_t* sizeOut )</code></b></p>",
		"description": "<p>Complete a pending linker invocation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>state</code><br>&emsp;A pending linker invocation<br><code>cubinOut</code><br>&emsp;On success, this will point to the output image<br><code>sizeOut</code><br>&emsp;Optional parameter to receive the size of the generated image<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g818fcd84a4150a997c0bba76fef4e716\">Full Description</a>"
	},
	"cuLinkCreate":{
		"id": "cuLinkCreate",
		"value": "<p><b><code>CUresult cuLinkCreate ( unsigned int numOptions, CUjit_option* options, void** optionValues, CUlinkState* stateOut )</code></b></p>",
		"description": "<p>Creates a pending JIT linker invocation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>numOptions</code><br>&emsp;Size of options arrays<br><code>options</code><br>&emsp;Array of linker and compiler options<br><code>optionValues</code><br>&emsp;Array of option values, each cast to void *<br><code>stateOut</code><br>&emsp;On success, this will contain a CUlinkState to specify and complete this action<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_JIT_COMPILER_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g86ca4052a2fab369cb943523908aa80d\">Full Description</a>"
	},
	"cuLinkDestroy":{
		"id": "cuLinkDestroy",
		"value": "<p><b><code>CUresult cuLinkDestroy ( CUlinkState state )</code></b></p>",
		"description": "<p>Destroys state for a JIT linker invocation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>state</code><br>&emsp;State object for the linker invocation<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g01b7ae2a34047b05716969af245ce2d9\">Full Description</a>"
	},
	"cuModuleGetFunction":{
		"id": "cuModuleGetFunction",
		"value": "<p><b><code>CUresult cuModuleGetFunction ( CUfunction* hfunc, CUmodule hmod, const char* name )</code></b></p>",
		"description": "<p>Returns a function handle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Returned function handle<br><code>hmod</code><br>&emsp;- Module to retrieve function from<br><code>name</code><br>&emsp;- Name of function to retrieve<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1ga52be009b0d4045811b30c965e1cb2cf\">Full Description</a>"
	},
	"cuModuleGetGlobal":{
		"id": "cuModuleGetGlobal",
		"value": "<p><b><code>CUresult cuModuleGetGlobal ( CUdeviceptr* dptr, size_t* bytes, CUmodule hmod, const char* name )</code></b></p>",
		"description": "<p>Returns a global pointer from a module.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned global device pointer<br><code>bytes</code><br>&emsp;- Returned global size in bytes<br><code>hmod</code><br>&emsp;- Module to retrieve global from<br><code>name</code><br>&emsp;- Name of global to retrieve<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1gf3e43672e26073b1081476dbf47a86ab\">Full Description</a>"
	},
	"cuModuleGetLoadingMode":{
		"id": "cuModuleGetLoadingMode",
		"value": "<p><b><code>CUresult cuModuleGetLoadingMode ( CUmoduleLoadingMode* mode )</code></b></p>",
		"description": "<p>Query lazy loading mode.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>mode</code><br>&emsp;- Returns the lazy loading mode<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g96de378a738ec46d9277c9c9df8f6fd6\">Full Description</a>"
	},
	"cuModuleLoad":{
		"id": "cuModuleLoad",
		"value": "<p><b><code>CUresult cuModuleLoad ( CUmodule* module, const char* fname )</code></b></p>",
		"description": "<p>Loads a compute module.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>module</code><br>&emsp;- Returned module<br><code>fname</code><br>&emsp;- Filename of module to load<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_PTX, CUDA_ERROR_UNSUPPORTED_PTX_VERSION, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_FILE_NOT_FOUND, CUDA_ERROR_NO_BINARY_FOR_GPU, CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, CUDA_ERROR_JIT_COMPILER_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g366093bd269dafd0af21f1c7d18115d3\">Full Description</a>"
	},
	"cuModuleLoadData":{
		"id": "cuModuleLoadData",
		"value": "<p><b><code>CUresult cuModuleLoadData ( CUmodule* module, const void* image )</code></b></p>",
		"description": "<p>Load a module's data.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>module</code><br>&emsp;- Returned module<br><code>image</code><br>&emsp;- Module data to load<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_PTX, CUDA_ERROR_UNSUPPORTED_PTX_VERSION, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NO_BINARY_FOR_GPU, CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, CUDA_ERROR_JIT_COMPILER_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g04ce266ce03720f479eab76136b90c0b\">Full Description</a>"
	},
	"cuModuleLoadDataEx":{
		"id": "cuModuleLoadDataEx",
		"value": "<p><b><code>CUresult cuModuleLoadDataEx ( CUmodule* module, const void* image, unsigned int numOptions, CUjit_option* options, void** optionValues )</code></b></p>",
		"description": "<p>Load a module's data with options.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>module</code><br>&emsp;- Returned module<br><code>image</code><br>&emsp;- Module data to load<br><code>numOptions</code><br>&emsp;- Number of options<br><code>options</code><br>&emsp;- Options for JIT<br><code>optionValues</code><br>&emsp;- Option values for JIT<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_PTX, CUDA_ERROR_UNSUPPORTED_PTX_VERSION, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NO_BINARY_FOR_GPU, CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, CUDA_ERROR_JIT_COMPILER_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g9e8047e9dbf725f0cd7cafd18bfd4d12\">Full Description</a>"
	},
	"cuModuleLoadFatBinary":{
		"id": "cuModuleLoadFatBinary",
		"value": "<p><b><code>CUresult cuModuleLoadFatBinary ( CUmodule* module, const void* fatCubin )</code></b></p>",
		"description": "<p>Load a module's data.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>module</code><br>&emsp;- Returned module<br><code>fatCubin</code><br>&emsp;- Fat binary to load<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_PTX, CUDA_ERROR_UNSUPPORTED_PTX_VERSION, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NO_BINARY_FOR_GPU, CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, CUDA_ERROR_JIT_COMPILER_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g13a2292b6819f8f86127768334436c3b\">Full Description</a>"
	},
	"cuModuleUnload":{
		"id": "cuModuleUnload",
		"value": "<p><b><code>CUresult cuModuleUnload ( CUmodule hmod )</code></b></p>",
		"description": "<p>Unloads a module.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hmod</code><br>&emsp;- Module to unload<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE.html#group__CUDA__MODULE#group__CUDA__MODULE_1g8ea3d716524369de3763104ced4ea57b\">Full Description</a>"
	},
	"cuModuleGetSurfRef":{
		"id": "cuModuleGetSurfRef",
		"value": "<p><b><code>CUresult cuModuleGetSurfRef ( CUsurfref* pSurfRef, CUmodule hmod, const char* name )</code></b></p>",
		"description": "<p>Returns a handle to a surface reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pSurfRef</code><br>&emsp;- Returned surface reference<br><code>hmod</code><br>&emsp;- Module to retrieve surface reference from<br><code>name</code><br>&emsp;- Name of surface reference to retrieve<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE__DEPRECATED.html#group__CUDA__MODULE__DEPRECATED#group__CUDA__MODULE__DEPRECATED_1g3c9cccfdfa65d6cf492b7ce1b93a4596\">Full Description</a>"
	},
	"cuModuleGetTexRef":{
		"id": "cuModuleGetTexRef",
		"value": "<p><b><code>CUresult cuModuleGetTexRef ( CUtexref* pTexRef, CUmodule hmod, const char* name )</code></b></p>",
		"description": "<p>Returns a handle to a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pTexRef</code><br>&emsp;- Returned texture reference<br><code>hmod</code><br>&emsp;- Module to retrieve texture reference from<br><code>name</code><br>&emsp;- Name of texture reference to retrieve<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MODULE__DEPRECATED.html#group__CUDA__MODULE__DEPRECATED#group__CUDA__MODULE__DEPRECATED_1g9965d238143354d573ef5789057be561\">Full Description</a>"
	},
	"cuKernelGetAttribute":{
		"id": "cuKernelGetAttribute",
		"value": "<p><b><code>CUresult cuKernelGetAttribute ( int* pi, CUfunction_attribute attrib, CUkernel kernel, CUdevice dev )</code></b></p>",
		"description": "<p>Returns information about a kernel.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pi</code><br>&emsp;- Returned attribute value<br><code>attrib</code><br>&emsp;- Attribute requested<br><code>kernel</code><br>&emsp;- Kernel to query attribute of<br><code>dev</code><br>&emsp;- Device to query attribute of<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1gd98317cb151b99fbd95767418122071f\">Full Description</a>"
	},
	"cuKernelGetFunction":{
		"id": "cuKernelGetFunction",
		"value": "<p><b><code>CUresult cuKernelGetFunction ( CUfunction* pFunc, CUkernel kernel )</code></b></p>",
		"description": "<p>Returns a function handle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pFunc</code><br>&emsp;- Returned function handle<br><code>kernel</code><br>&emsp;- Kernel to retrieve function for the requested context<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_CONTEXT_IS_DESTROYED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1ge4cf9abafaba338acb977585b0d7374a\">Full Description</a>"
	},
	"cuKernelSetAttribute":{
		"id": "cuKernelSetAttribute",
		"value": "<p><b><code>CUresult cuKernelSetAttribute ( CUfunction_attribute attrib, int val, CUkernel kernel, CUdevice dev )</code></b></p>",
		"description": "<p>Sets information about a kernel.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>attrib</code><br>&emsp;- Attribute requested<br><code>val</code><br>&emsp;- Value to set<br><code>kernel</code><br>&emsp;- Kernel to set attribute of<br><code>dev</code><br>&emsp;- Device to set attribute of<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1g1093ade718915249de3b14320d567067\">Full Description</a>"
	},
	"cuKernelSetCacheConfig":{
		"id": "cuKernelSetCacheConfig",
		"value": "<p><b><code>CUresult cuKernelSetCacheConfig ( CUkernel kernel, CUfunc_cache config, CUdevice dev )</code></b></p>",
		"description": "<p>Sets the preferred cache configuration for a device kernel.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>kernel</code><br>&emsp;- Kernel to configure cache for<br><code>config</code><br>&emsp;- Requested cache configuration<br><code>dev</code><br>&emsp;- Device to set attribute of<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1g8490476e5d3573c7ede78f29bd8cde51\">Full Description</a>"
	},
	"cuLibraryGetGlobal":{
		"id": "cuLibraryGetGlobal",
		"value": "<p><b><code>CUresult cuLibraryGetGlobal ( CUdeviceptr* dptr, size_t* bytes, CUlibrary library, const char* name )</code></b></p>",
		"description": "<p>Returns a global device pointer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned global device pointer for the requested context<br><code>bytes</code><br>&emsp;- Returned global size in bytes<br><code>library</code><br>&emsp;- Library to retrieve global from<br><code>name</code><br>&emsp;- Name of global to retrieve<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_CONTEXT_IS_DESTROYED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1g98708b50c11bc1c0addd6ecab96ae4ab\">Full Description</a>"
	},
	"cuLibraryGetKernel":{
		"id": "cuLibraryGetKernel",
		"value": "<p><b><code>CUresult cuLibraryGetKernel ( CUkernel* pKernel, CUlibrary library, const char* name )</code></b></p>",
		"description": "<p>Returns a kernel handle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pKernel</code><br>&emsp;- Returned kernel handle<br><code>library</code><br>&emsp;- Library to retrieve kernel from<br><code>name</code><br>&emsp;- Name of kernel to retrieve<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_FOUND,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1g15336d865f5abd63e3dc6004d5bc037a\">Full Description</a>"
	},
	"cuLibraryGetManaged":{
		"id": "cuLibraryGetManaged",
		"value": "<p><b><code>CUresult cuLibraryGetManaged ( CUdeviceptr* dptr, size_t* bytes, CUlibrary library, const char* name )</code></b></p>",
		"description": "<p>Returns a pointer to managed memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned pointer to the managed memory<br><code>bytes</code><br>&emsp;- Returned memory size in bytes<br><code>library</code><br>&emsp;- Library to retrieve managed memory from<br><code>name</code><br>&emsp;- Name of managed memory to retrieve<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_FOUND,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1ga03f44378227ea68e6decd9d11c28fdf\">Full Description</a>"
	},
	"cuLibraryGetModule":{
		"id": "cuLibraryGetModule",
		"value": "<p><b><code>CUresult cuLibraryGetModule ( CUmodule* pMod, CUlibrary library )</code></b></p>",
		"description": "<p>Returns a module handle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pMod</code><br>&emsp;- Returned module handle<br><code>library</code><br>&emsp;- Library to retrieve module from<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_CONTEXT_IS_DESTROYED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1g0d439597c77b64cf247de33f0609a5d8\">Full Description</a>"
	},
	"cuLibraryGetUnifiedFunction":{
		"id": "cuLibraryGetUnifiedFunction",
		"value": "<p><b><code>CUresult cuLibraryGetUnifiedFunction ( void** fptr, CUlibrary library, const char* symbol )</code></b></p>",
		"description": "<p>Returns a pointer to a unified function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>fptr</code><br>&emsp;- Returned pointer to a unified function<br><code>library</code><br>&emsp;- Library to retrieve function pointer memory from<br><code>symbol</code><br>&emsp;- Name of function pointer to retrieve<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_FOUND,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1gb1b0ea992d64345562b694fdcd2c0334\">Full Description</a>"
	},
	"cuLibraryLoadData":{
		"id": "cuLibraryLoadData",
		"value": "<p><b><code>CUresult cuLibraryLoadData ( CUlibrary* library, const void* code, CUjit_option* jitOptions, void** jitOptionsValues, unsigned int numJitOptions, CUlibraryOption* libraryOptions, void** libraryOptionValues, unsigned int numLibraryOptions )</code></b></p>",
		"description": "<p>Load a library with specified code and options.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>library</code><br>&emsp;- Returned library<br><code>code</code><br>&emsp;- Code to load<br><code>jitOptions</code><br>&emsp;- Options for JIT<br><code>jitOptionsValues</code><br>&emsp;- Option values for JIT<br><code>numJitOptions</code><br>&emsp;- Number of options<br><code>libraryOptions</code><br>&emsp;- Options for loading<br><code>libraryOptionValues</code><br>&emsp;- Option values for loading<br><code>numLibraryOptions</code><br>&emsp;- Number of options for loading<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_PTX, CUDA_ERROR_UNSUPPORTED_PTX_VERSION, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NO_BINARY_FOR_GPU, CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, CUDA_ERROR_JIT_COMPILER_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1g957f12ff5af4166f43c89d17cfb0a74d\">Full Description</a>"
	},
	"cuLibraryLoadFromFile":{
		"id": "cuLibraryLoadFromFile",
		"value": "<p><b><code>CUresult cuLibraryLoadFromFile ( CUlibrary* library, const char* fileName, CUjit_option* jitOptions, void** jitOptionsValues, unsigned int numJitOptions, CUlibraryOption* libraryOptions, void** libraryOptionValues, unsigned int numLibraryOptions )</code></b></p>",
		"description": "<p>Load a library with specified file and options.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>library</code><br>&emsp;- Returned library<br><code>fileName</code><br>&emsp;- File to load from<br><code>jitOptions</code><br>&emsp;- Options for JIT<br><code>jitOptionsValues</code><br>&emsp;- Option values for JIT<br><code>numJitOptions</code><br>&emsp;- Number of options<br><code>libraryOptions</code><br>&emsp;- Options for loading<br><code>libraryOptionValues</code><br>&emsp;- Option values for loading<br><code>numLibraryOptions</code><br>&emsp;- Number of options for loading<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_PTX, CUDA_ERROR_UNSUPPORTED_PTX_VERSION, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NO_BINARY_FOR_GPU, CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, CUDA_ERROR_JIT_COMPILER_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1g88cff489fab37c7fd1985ceb61023205\">Full Description</a>"
	},
	"cuLibraryUnload":{
		"id": "cuLibraryUnload",
		"value": "<p><b><code>CUresult cuLibraryUnload ( CUlibrary library )</code></b></p>",
		"description": "<p>Unloads a library.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>library</code><br>&emsp;- Library to unload<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__LIBRARY.html#group__CUDA__LIBRARY#group__CUDA__LIBRARY_1g24969cb24138171edf465bc8669d5914\">Full Description</a>"
	},
	"cuArray3DCreate":{
		"id": "cuArray3DCreate",
		"value": "<p><b><code>CUresult cuArray3DCreate ( CUarray* pHandle, const CUDA_ARRAY3D_DESCRIPTOR* pAllocateArray )</code></b></p>",
		"description": "<p>Creates a 3D CUDA array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pHandle</code><br>&emsp;- Returned array<br><code>pAllocateArray</code><br>&emsp;- 3D array descriptor<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gc2322c70b38c2984536c90ed118bb1d7\">Full Description</a>"
	},
	"cuArray3DGetDescriptor":{
		"id": "cuArray3DGetDescriptor",
		"value": "<p><b><code>CUresult cuArray3DGetDescriptor ( CUDA_ARRAY3D_DESCRIPTOR* pArrayDescriptor, CUarray hArray )</code></b></p>",
		"description": "<p>Get a 3D CUDA array descriptor.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pArrayDescriptor</code><br>&emsp;- Returned 3D array descriptor<br><code>hArray</code><br>&emsp;- 3D array to get descriptor of<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_CONTEXT_IS_DESTROYED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gb58549f2f3f390b9e0e7c8f3acd53857\">Full Description</a>"
	},
	"cuArrayCreate":{
		"id": "cuArrayCreate",
		"value": "<p><b><code>CUresult cuArrayCreate ( CUarray* pHandle, const CUDA_ARRAY_DESCRIPTOR* pAllocateArray )</code></b></p>",
		"description": "<p>Creates a 1D or 2D CUDA array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pHandle</code><br>&emsp;- Returned array<br><code>pAllocateArray</code><br>&emsp;- Array descriptor<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g4192ff387a81c3bd5ed8c391ed62ca24\">Full Description</a>"
	},
	"cuArrayDestroy":{
		"id": "cuArrayDestroy",
		"value": "<p><b><code>CUresult cuArrayDestroy ( CUarray hArray )</code></b></p>",
		"description": "<p>Destroys a CUDA array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hArray</code><br>&emsp;- Array to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ARRAY_IS_MAPPED, CUDA_ERROR_CONTEXT_IS_DESTROYED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g982878affbbc023de84874faac838b0b\">Full Description</a>"
	},
	"cuArrayGetDescriptor":{
		"id": "cuArrayGetDescriptor",
		"value": "<p><b><code>CUresult cuArrayGetDescriptor ( CUDA_ARRAY_DESCRIPTOR* pArrayDescriptor, CUarray hArray )</code></b></p>",
		"description": "<p>Get a 1D or 2D CUDA array descriptor.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pArrayDescriptor</code><br>&emsp;- Returned array descriptor<br><code>hArray</code><br>&emsp;- Array to get descriptor of<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g661fe823dbd37bf11f82a71bd4762acf\">Full Description</a>"
	},
	"cuArrayGetMemoryRequirements":{
		"id": "cuArrayGetMemoryRequirements",
		"value": "<p><b><code>CUresult cuArrayGetMemoryRequirements ( CUDA_ARRAY_MEMORY_REQUIREMENTS* memoryRequirements, CUarray array, CUdevice device )</code></b></p>",
		"description": "<p>Returns the memory requirements of a CUDA array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>memoryRequirements</code><br>&emsp;- Pointer to CUDA_ARRAY_MEMORY_REQUIREMENTS<br><code>array</code><br>&emsp;- CUDA array to get the memory requirements of<br><code>device</code><br>&emsp;- Device to get the memory requirements for<br></p><p><b>Returns</b><br>CUDA_SUCCESSCUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gac8761ced0fa462e4762f6528073d9f4\">Full Description</a>"
	},
	"cuArrayGetPlane":{
		"id": "cuArrayGetPlane",
		"value": "<p><b><code>CUresult cuArrayGetPlane ( CUarray* pPlaneArray, CUarray hArray, unsigned int planeIdx )</code></b></p>",
		"description": "<p>Gets a CUDA array plane from a CUDA array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pPlaneArray</code><br>&emsp;- Returned CUDA array referenced by the planeIdx<br><code>hArray</code><br>&emsp;- Multiplanar CUDA array<br><code>planeIdx</code><br>&emsp;- Plane index<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1ge66ce245a1e3802f9ccc3583cec6b71f\">Full Description</a>"
	},
	"cuArrayGetSparseProperties":{
		"id": "cuArrayGetSparseProperties",
		"value": "<p><b><code>CUresult cuArrayGetSparseProperties ( CUDA_ARRAY_SPARSE_PROPERTIES* sparseProperties, CUarray array )</code></b></p>",
		"description": "<p>Returns the layout properties of a sparse CUDA array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>sparseProperties</code><br>&emsp;- Pointer to CUDA_ARRAY_SPARSE_PROPERTIES<br><code>array</code><br>&emsp;- CUDA array to get the sparse properties of<br></p><p><b>Returns</b><br>CUDA_SUCCESSCUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gf74df88a07404ee051f0e5b36647d8c7\">Full Description</a>"
	},
	"cuDeviceGetByPCIBusId":{
		"id": "cuDeviceGetByPCIBusId",
		"value": "<p><b><code>CUresult cuDeviceGetByPCIBusId ( CUdevice* dev, const char* pciBusId )</code></b></p>",
		"description": "<p>Returns a handle to a compute device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dev</code><br>&emsp;- Returned device handle<br><code>pciBusId</code><br>&emsp;- String in one of the following forms: [domain]:[bus]:[device].[function] [domain]:[bus]:[device] [bus]:[device].[function] where domain, bus, device, and function are all hexadecimal values<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1ga89cd3fa06334ba7853ed1232c5ebe2a\">Full Description</a>"
	},
	"cuDeviceGetPCIBusId":{
		"id": "cuDeviceGetPCIBusId",
		"value": "<p><b><code>CUresult cuDeviceGetPCIBusId ( char* pciBusId, int len, CUdevice dev )</code></b></p>",
		"description": "<p>Returns a PCI Bus Id string for the device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pciBusId</code><br>&emsp;- Returned identifier string for the device in the following format [domain]:[bus]:[device].[function] where domain, bus, device, and function are all hexadecimal values. pciBusId should be large enough to store 13 characters including the NULL-terminator.<br><code>len</code><br>&emsp;- Maximum length of string to store in name<br><code>dev</code><br>&emsp;- Device to get identifier string for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g85295e7d9745ab8f0aa80dd1e172acfc\">Full Description</a>"
	},
	"cuIpcCloseMemHandle":{
		"id": "cuIpcCloseMemHandle",
		"value": "<p><b><code>CUresult cuIpcCloseMemHandle ( CUdeviceptr dptr )</code></b></p>",
		"description": "<p>Attempts to close memory mapped with cuIpcOpenMemHandle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Device pointer returned by cuIpcOpenMemHandle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_MAP_FAILED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gd6f5d5bcf6376c6853b64635b0157b9e\">Full Description</a>"
	},
	"cuIpcGetEventHandle":{
		"id": "cuIpcGetEventHandle",
		"value": "<p><b><code>CUresult cuIpcGetEventHandle ( CUipcEventHandle* pHandle, CUevent event )</code></b></p>",
		"description": "<p>Gets an interprocess handle for a previously allocated event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pHandle</code><br>&emsp;- Pointer to a user allocated CUipcEventHandle in which to return the opaque event handle<br><code>event</code><br>&emsp;- Event allocated with CU_EVENT_INTERPROCESS and CU_EVENT_DISABLE_TIMING flags.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_MAP_FAILED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gea02eadd12483de5305878b13288a86c\">Full Description</a>"
	},
	"cuIpcGetMemHandle":{
		"id": "cuIpcGetMemHandle",
		"value": "<p><b><code>CUresult cuIpcGetMemHandle ( CUipcMemHandle* pHandle, CUdeviceptr dptr )</code></b></p>",
		"description": "<p>Gets an interprocess memory handle for an existing device memory allocation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pHandle</code><br>&emsp;- Pointer to user allocated CUipcMemHandle to return the handle in.<br><code>dptr</code><br>&emsp;- Base pointer to previously allocated device memory<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_MAP_FAILED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g6f1b5be767b275f016523b2ac49ebec1\">Full Description</a>"
	},
	"cuIpcOpenEventHandle":{
		"id": "cuIpcOpenEventHandle",
		"value": "<p><b><code>CUresult cuIpcOpenEventHandle ( CUevent* phEvent, CUipcEventHandle handle )</code></b></p>",
		"description": "<p>Opens an interprocess event handle for use in the current process.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phEvent</code><br>&emsp;- Returns the imported event<br><code>handle</code><br>&emsp;- Interprocess handle to open<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_MAP_FAILED, CUDA_ERROR_PEER_ACCESS_UNSUPPORTED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gf1d525918b6c643b99ca8c8e42e36c2e\">Full Description</a>"
	},
	"cuIpcOpenMemHandle":{
		"id": "cuIpcOpenMemHandle",
		"value": "<p><b><code>CUresult cuIpcOpenMemHandle ( CUdeviceptr* pdptr, CUipcMemHandle handle, unsigned int Flags )</code></b></p>",
		"description": "<p>Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pdptr</code><br>&emsp;- Returned device pointer<br><code>handle</code><br>&emsp;- CUipcMemHandle to open<br><code>Flags</code><br>&emsp;- Flags for this operation. Must be specified as CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_MAP_FAILED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_TOO_MANY_PEERS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1ga8bd126fcff919a0c996b7640f197b79\">Full Description</a>"
	},
	"cuMemAlloc":{
		"id": "cuMemAlloc",
		"value": "<p><b><code>CUresult cuMemAlloc ( CUdeviceptr* dptr, size_t bytesize )</code></b></p>",
		"description": "<p>Allocates device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned device pointer<br><code>bytesize</code><br>&emsp;- Requested allocation size in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gb82d2a09844a58dd9e744dc31e8aa467\">Full Description</a>"
	},
	"cuMemAllocHost":{
		"id": "cuMemAllocHost",
		"value": "<p><b><code>CUresult cuMemAllocHost ( void** pp, size_t bytesize )</code></b></p>",
		"description": "<p>Allocates page-locked host memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pp</code><br>&emsp;- Returned host pointer to page-locked memory<br><code>bytesize</code><br>&emsp;- Requested allocation size in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gdd8311286d2c2691605362c689bc64e0\">Full Description</a>"
	},
	"cuMemAllocManaged":{
		"id": "cuMemAllocManaged",
		"value": "<p><b><code>CUresult cuMemAllocManaged ( CUdeviceptr* dptr, size_t bytesize, unsigned int flags )</code></b></p>",
		"description": "<p>Allocates memory that will be automatically managed by the Unified Memory system.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned device pointer<br><code>bytesize</code><br>&emsp;- Requested allocation size in bytes<br><code>flags</code><br>&emsp;- Must be one of CU_MEM_ATTACH_GLOBAL or CU_MEM_ATTACH_HOST<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gb347ded34dc326af404aa02af5388a32\">Full Description</a>"
	},
	"cuMemAllocPitch":{
		"id": "cuMemAllocPitch",
		"value": "<p><b><code>CUresult cuMemAllocPitch ( CUdeviceptr* dptr, size_t* pPitch, size_t WidthInBytes, size_t Height, unsigned int ElementSizeBytes )</code></b></p>",
		"description": "<p>Allocates pitched device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned device pointer<br><code>pPitch</code><br>&emsp;- Returned pitch of allocation in bytes<br><code>WidthInBytes</code><br>&emsp;- Requested allocation width in bytes<br><code>Height</code><br>&emsp;- Requested allocation height in rows<br><code>ElementSizeBytes</code><br>&emsp;- Size of largest reads/writes for range<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gcbe9b033f6c4de80f63cc6e58ed9a45a\">Full Description</a>"
	},
	"cuMemFree":{
		"id": "cuMemFree",
		"value": "<p><b><code>CUresult cuMemFree ( CUdeviceptr dptr )</code></b></p>",
		"description": "<p>Frees device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Pointer to memory to free<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g89b3f154e17cc89b6eea277dbdf5c93a\">Full Description</a>"
	},
	"cuMemFreeHost":{
		"id": "cuMemFreeHost",
		"value": "<p><b><code>CUresult cuMemFreeHost ( void* p )</code></b></p>",
		"description": "<p>Frees page-locked host memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>p</code><br>&emsp;- Pointer to memory to free<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g62e0fdbe181dab6b1c90fa1a51c7b92c\">Full Description</a>"
	},
	"cuMemGetAddressRange":{
		"id": "cuMemGetAddressRange",
		"value": "<p><b><code>CUresult cuMemGetAddressRange ( CUdeviceptr* pbase, size_t* psize, CUdeviceptr dptr )</code></b></p>",
		"description": "<p>Get information on memory allocations.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pbase</code><br>&emsp;- Returned base address<br><code>psize</code><br>&emsp;- Returned size of device memory allocation<br><code>dptr</code><br>&emsp;- Device pointer to query<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g64fee5711274a2a0573a789c94d8299b\">Full Description</a>"
	},
	"cuMemGetHandleForAddressRange":{
		"id": "cuMemGetHandleForAddressRange",
		"value": "<p><b><code>CUresult cuMemGetHandleForAddressRange ( void* handle, CUdeviceptr dptr, size_t size, CUmemRangeHandleType handleType, unsigned long long flags )</code></b></p>",
		"description": "<p>Retrieve handle for an address range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>handle</code><br>&emsp;- Pointer to the location where the returned handle will be stored.<br><code>dptr</code><br>&emsp;- Pointer to a valid CUDA device allocation. Must be aligned to host page size.<br><code>size</code><br>&emsp;- Length of the address range. Must be aligned to host page size.<br><code>handleType</code><br>&emsp;- Type of handle requested (defines type and size of the handle output parameter)<br><code>flags</code><br>&emsp;- Reserved, must be zero<br></p><p><b>Returns</b><br>CUDA_SUCCESS CUDA_ERROR_INVALID_VALUE CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g51e719462c04ee90a6b0f8b2a75fe031\">Full Description</a>"
	},
	"cuMemGetInfo":{
		"id": "cuMemGetInfo",
		"value": "<p><b><code>CUresult cuMemGetInfo ( size_t* free, size_t* total )</code></b></p>",
		"description": "<p>Gets free and total memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>free</code><br>&emsp;- Returned free memory in bytes<br><code>total</code><br>&emsp;- Returned total memory in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g808f555540d0143a331cc42aa98835c0\">Full Description</a>"
	},
	"cuMemHostAlloc":{
		"id": "cuMemHostAlloc",
		"value": "<p><b><code>CUresult cuMemHostAlloc ( void** pp, size_t bytesize, unsigned int Flags )</code></b></p>",
		"description": "<p>Allocates page-locked host memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pp</code><br>&emsp;- Returned host pointer to page-locked memory<br><code>bytesize</code><br>&emsp;- Requested allocation size in bytes<br><code>Flags</code><br>&emsp;- Flags for allocation request<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g572ca4011bfcb25034888a14d4e035b9\">Full Description</a>"
	},
	"cuMemHostGetDevicePointer":{
		"id": "cuMemHostGetDevicePointer",
		"value": "<p><b><code>CUresult cuMemHostGetDevicePointer ( CUdeviceptr* pdptr, void* p, unsigned int Flags )</code></b></p>",
		"description": "<p>Passes back device pointer of mapped pinned memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pdptr</code><br>&emsp;- Returned device pointer<br><code>p</code><br>&emsp;- Host pointer<br><code>Flags</code><br>&emsp;- Options (must be 0)<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g57a39e5cba26af4d06be67fc77cc62f0\">Full Description</a>"
	},
	"cuMemHostGetFlags":{
		"id": "cuMemHostGetFlags",
		"value": "<p><b><code>CUresult cuMemHostGetFlags ( unsigned int* pFlags, void* p )</code></b></p>",
		"description": "<p>Passes back flags that were used for a pinned allocation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pFlags</code><br>&emsp;- Returned flags word<br><code>p</code><br>&emsp;- Host pointer<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g42066246915fcb0400df2a17a851b35f\">Full Description</a>"
	},
	"cuMemHostRegister":{
		"id": "cuMemHostRegister",
		"value": "<p><b><code>CUresult cuMemHostRegister ( void* p, size_t bytesize, unsigned int Flags )</code></b></p>",
		"description": "<p>Registers an existing host memory range for use by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>p</code><br>&emsp;- Host pointer to memory to page-lock<br><code>bytesize</code><br>&emsp;- Size in bytes of the address range to page-lock<br><code>Flags</code><br>&emsp;- Flags for allocation request<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gf0a9fe11544326dabd743b7aa6b54223\">Full Description</a>"
	},
	"cuMemHostUnregister":{
		"id": "cuMemHostUnregister",
		"value": "<p><b><code>CUresult cuMemHostUnregister ( void* p )</code></b></p>",
		"description": "<p>Unregisters a memory range that was registered with cuMemHostRegister.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>p</code><br>&emsp;- Host pointer to memory to unregister<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g63f450c8125359be87b7623b1c0b2a14\">Full Description</a>"
	},
	"cuMemcpy":{
		"id": "cuMemcpy",
		"value": "<p><b><code>CUresult cuMemcpy ( CUdeviceptr dst, CUdeviceptr src, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination unified virtual address space pointer<br><code>src</code><br>&emsp;- Source unified virtual address space pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g8d0ff510f26d4b87bd3a51e731e7f698\">Full Description</a>"
	},
	"cuMemcpy2D":{
		"id": "cuMemcpy2D",
		"value": "<p><b><code>CUresult cuMemcpy2D ( const CUDA_MEMCPY2D* pCopy )</code></b></p>",
		"description": "<p>Copies memory for 2D arrays.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCopy</code><br>&emsp;- Parameters for the memory copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g27f885b30c34cc20a663a671dbf6fc27\">Full Description</a>"
	},
	"cuMemcpy2DAsync":{
		"id": "cuMemcpy2DAsync",
		"value": "<p><b><code>CUresult cuMemcpy2DAsync ( const CUDA_MEMCPY2D* pCopy, CUstream hStream )</code></b></p>",
		"description": "<p>Copies memory for 2D arrays.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCopy</code><br>&emsp;- Parameters for the memory copy<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g4acf155faeb969d9d21f5433d3d0f274\">Full Description</a>"
	},
	"cuMemcpy2DUnaligned":{
		"id": "cuMemcpy2DUnaligned",
		"value": "<p><b><code>CUresult cuMemcpy2DUnaligned ( const CUDA_MEMCPY2D* pCopy )</code></b></p>",
		"description": "<p>Copies memory for 2D arrays.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCopy</code><br>&emsp;- Parameters for the memory copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g2fa285d47fd7020e596bfeab3deb651b\">Full Description</a>"
	},
	"cuMemcpy3D":{
		"id": "cuMemcpy3D",
		"value": "<p><b><code>CUresult cuMemcpy3D ( const CUDA_MEMCPY3D* pCopy )</code></b></p>",
		"description": "<p>Copies memory for 3D arrays.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCopy</code><br>&emsp;- Parameters for the memory copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g4b5238975579f002c0199a3800ca44df\">Full Description</a>"
	},
	"cuMemcpy3DAsync":{
		"id": "cuMemcpy3DAsync",
		"value": "<p><b><code>CUresult cuMemcpy3DAsync ( const CUDA_MEMCPY3D* pCopy, CUstream hStream )</code></b></p>",
		"description": "<p>Copies memory for 3D arrays.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCopy</code><br>&emsp;- Parameters for the memory copy<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g79f4f3fde6ae0f529568d881d9e11987\">Full Description</a>"
	},
	"cuMemcpy3DPeer":{
		"id": "cuMemcpy3DPeer",
		"value": "<p><b><code>CUresult cuMemcpy3DPeer ( const CUDA_MEMCPY3D_PEER* pCopy )</code></b></p>",
		"description": "<p>Copies memory between contexts.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCopy</code><br>&emsp;- Parameters for the memory copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g11466fd70cde9329a4e16eb1f258c433\">Full Description</a>"
	},
	"cuMemcpy3DPeerAsync":{
		"id": "cuMemcpy3DPeerAsync",
		"value": "<p><b><code>CUresult cuMemcpy3DPeerAsync ( const CUDA_MEMCPY3D_PEER* pCopy, CUstream hStream )</code></b></p>",
		"description": "<p>Copies memory between contexts asynchronously.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCopy</code><br>&emsp;- Parameters for the memory copy<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gc4e4bfd9f627d3aa3695979e058f1bb8\">Full Description</a>"
	},
	"cuMemcpyAsync":{
		"id": "cuMemcpyAsync",
		"value": "<p><b><code>CUresult cuMemcpyAsync ( CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream )</code></b></p>",
		"description": "<p>Copies memory asynchronously.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;- Destination unified virtual address space pointer<br><code>src</code><br>&emsp;- Source unified virtual address space pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g5f26aaf5582ade791e5688727a178d78\">Full Description</a>"
	},
	"cuMemcpyAtoA":{
		"id": "cuMemcpyAtoA",
		"value": "<p><b><code>CUresult cuMemcpyAtoA ( CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies memory from Array to Array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstArray</code><br>&emsp;- Destination array<br><code>dstOffset</code><br>&emsp;- Offset in bytes of destination array<br><code>srcArray</code><br>&emsp;- Source array<br><code>srcOffset</code><br>&emsp;- Offset in bytes of source array<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gf81b218c984a31436ec9e23a85fb604a\">Full Description</a>"
	},
	"cuMemcpyAtoD":{
		"id": "cuMemcpyAtoD",
		"value": "<p><b><code>CUresult cuMemcpyAtoD ( CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies memory from Array to Device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>srcArray</code><br>&emsp;- Source array<br><code>srcOffset</code><br>&emsp;- Offset in bytes of source array<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g825b3f037f7f51382cae991bae8173fd\">Full Description</a>"
	},
	"cuMemcpyAtoH":{
		"id": "cuMemcpyAtoH",
		"value": "<p><b><code>CUresult cuMemcpyAtoH ( void* dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies memory from Array to Host.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstHost</code><br>&emsp;- Destination device pointer<br><code>srcArray</code><br>&emsp;- Source array<br><code>srcOffset</code><br>&emsp;- Offset in bytes of source array<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gf7ad1edb2539cccc352c6b8b76f657f4\">Full Description</a>"
	},
	"cuMemcpyAtoHAsync":{
		"id": "cuMemcpyAtoHAsync",
		"value": "<p><b><code>CUresult cuMemcpyAtoHAsync ( void* dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream )</code></b></p>",
		"description": "<p>Copies memory from Array to Host.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstHost</code><br>&emsp;- Destination pointer<br><code>srcArray</code><br>&emsp;- Source array<br><code>srcOffset</code><br>&emsp;- Offset in bytes of source array<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g64cbd2e60436699aebdd0bdbf14d0f01\">Full Description</a>"
	},
	"cuMemcpyDtoA":{
		"id": "cuMemcpyDtoA",
		"value": "<p><b><code>CUresult cuMemcpyDtoA ( CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies memory from Device to Array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstArray</code><br>&emsp;- Destination array<br><code>dstOffset</code><br>&emsp;- Offset in bytes of destination array<br><code>srcDevice</code><br>&emsp;- Source device pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gad6827247af91600b56ce6e2ddb802e1\">Full Description</a>"
	},
	"cuMemcpyDtoD":{
		"id": "cuMemcpyDtoD",
		"value": "<p><b><code>CUresult cuMemcpyDtoD ( CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies memory from Device to Device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>srcDevice</code><br>&emsp;- Source device pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g1725774abf8b51b91945f3336b778c8b\">Full Description</a>"
	},
	"cuMemcpyDtoDAsync":{
		"id": "cuMemcpyDtoDAsync",
		"value": "<p><b><code>CUresult cuMemcpyDtoDAsync ( CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream )</code></b></p>",
		"description": "<p>Copies memory from Device to Device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>srcDevice</code><br>&emsp;- Source device pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g39ea09ba682b8eccc9c3e0c04319b5c8\">Full Description</a>"
	},
	"cuMemcpyDtoH":{
		"id": "cuMemcpyDtoH",
		"value": "<p><b><code>CUresult cuMemcpyDtoH ( void* dstHost, CUdeviceptr srcDevice, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies memory from Device to Host.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstHost</code><br>&emsp;- Destination host pointer<br><code>srcDevice</code><br>&emsp;- Source device pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g3480368ee0208a98f75019c9a8450893\">Full Description</a>"
	},
	"cuMemcpyDtoHAsync":{
		"id": "cuMemcpyDtoHAsync",
		"value": "<p><b><code>CUresult cuMemcpyDtoHAsync ( void* dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream )</code></b></p>",
		"description": "<p>Copies memory from Device to Host.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstHost</code><br>&emsp;- Destination host pointer<br><code>srcDevice</code><br>&emsp;- Source device pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g56f30236c7c5247f8e061b59d3268362\">Full Description</a>"
	},
	"cuMemcpyHtoA":{
		"id": "cuMemcpyHtoA",
		"value": "<p><b><code>CUresult cuMemcpyHtoA ( CUarray dstArray, size_t dstOffset, const void* srcHost, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies memory from Host to Array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstArray</code><br>&emsp;- Destination array<br><code>dstOffset</code><br>&emsp;- Offset in bytes of destination array<br><code>srcHost</code><br>&emsp;- Source host pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g57d3d780d165ecc0e3b3ce08e141cd89\">Full Description</a>"
	},
	"cuMemcpyHtoAAsync":{
		"id": "cuMemcpyHtoAAsync",
		"value": "<p><b><code>CUresult cuMemcpyHtoAAsync ( CUarray dstArray, size_t dstOffset, const void* srcHost, size_t ByteCount, CUstream hStream )</code></b></p>",
		"description": "<p>Copies memory from Host to Array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstArray</code><br>&emsp;- Destination array<br><code>dstOffset</code><br>&emsp;- Offset in bytes of destination array<br><code>srcHost</code><br>&emsp;- Source host pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gb5c4863f64f132b4bc2661818b3fd188\">Full Description</a>"
	},
	"cuMemcpyHtoD":{
		"id": "cuMemcpyHtoD",
		"value": "<p><b><code>CUresult cuMemcpyHtoD ( CUdeviceptr dstDevice, const void* srcHost, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies memory from Host to Device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>srcHost</code><br>&emsp;- Source host pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g4d32266788c440b0220b1a9ba5795169\">Full Description</a>"
	},
	"cuMemcpyHtoDAsync":{
		"id": "cuMemcpyHtoDAsync",
		"value": "<p><b><code>CUresult cuMemcpyHtoDAsync ( CUdeviceptr dstDevice, const void* srcHost, size_t ByteCount, CUstream hStream )</code></b></p>",
		"description": "<p>Copies memory from Host to Device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>srcHost</code><br>&emsp;- Source host pointer<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g1572263fe2597d7ba4f6964597a354a3\">Full Description</a>"
	},
	"cuMemcpyPeer":{
		"id": "cuMemcpyPeer",
		"value": "<p><b><code>CUresult cuMemcpyPeer ( CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount )</code></b></p>",
		"description": "<p>Copies device memory between two contexts.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>dstContext</code><br>&emsp;- Destination context<br><code>srcDevice</code><br>&emsp;- Source device pointer<br><code>srcContext</code><br>&emsp;- Source context<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1ge1f5c7771544fee150ada8853c7cbf4a\">Full Description</a>"
	},
	"cuMemcpyPeerAsync":{
		"id": "cuMemcpyPeerAsync",
		"value": "<p><b><code>CUresult cuMemcpyPeerAsync ( CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream )</code></b></p>",
		"description": "<p>Copies device memory between two contexts asynchronously.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>dstContext</code><br>&emsp;- Destination context<br><code>srcDevice</code><br>&emsp;- Source device pointer<br><code>srcContext</code><br>&emsp;- Source context<br><code>ByteCount</code><br>&emsp;- Size of memory copy in bytes<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g82fcecb38018e64b98616a8ac30112f2\">Full Description</a>"
	},
	"cuMemsetD16":{
		"id": "cuMemsetD16",
		"value": "<p><b><code>CUresult cuMemsetD16 ( CUdeviceptr dstDevice, unsigned short us, size_t N )</code></b></p>",
		"description": "<p>Initializes device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>us</code><br>&emsp;- Value to set<br><code>N</code><br>&emsp;- Number of elements<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g7d805e610054392a4d11e8a8bf5eb35c\">Full Description</a>"
	},
	"cuMemsetD16Async":{
		"id": "cuMemsetD16Async",
		"value": "<p><b><code>CUresult cuMemsetD16Async ( CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream )</code></b></p>",
		"description": "<p>Sets device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>us</code><br>&emsp;- Value to set<br><code>N</code><br>&emsp;- Number of elements<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gf731438877dd8ec875e4c43d848c878c\">Full Description</a>"
	},
	"cuMemsetD2D16":{
		"id": "cuMemsetD2D16",
		"value": "<p><b><code>CUresult cuMemsetD2D16 ( CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height )</code></b></p>",
		"description": "<p>Initializes device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>dstPitch</code><br>&emsp;- Pitch of destination device pointer(Unused if Height is 1)<br><code>us</code><br>&emsp;- Value to set<br><code>Width</code><br>&emsp;- Width of row<br><code>Height</code><br>&emsp;- Number of rows<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g7f561a15a66144fa9f6ab5350edc8a30\">Full Description</a>"
	},
	"cuMemsetD2D16Async":{
		"id": "cuMemsetD2D16Async",
		"value": "<p><b><code>CUresult cuMemsetD2D16Async ( CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream )</code></b></p>",
		"description": "<p>Sets device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>dstPitch</code><br>&emsp;- Pitch of destination device pointer(Unused if Height is 1)<br><code>us</code><br>&emsp;- Value to set<br><code>Width</code><br>&emsp;- Width of row<br><code>Height</code><br>&emsp;- Number of rows<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g64ee197befac3d74d9fefedcf6ef6b10\">Full Description</a>"
	},
	"cuMemsetD2D32":{
		"id": "cuMemsetD2D32",
		"value": "<p><b><code>CUresult cuMemsetD2D32 ( CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height )</code></b></p>",
		"description": "<p>Initializes device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>dstPitch</code><br>&emsp;- Pitch of destination device pointer(Unused if Height is 1)<br><code>ui</code><br>&emsp;- Value to set<br><code>Width</code><br>&emsp;- Width of row<br><code>Height</code><br>&emsp;- Number of rows<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g74b359b2d026bfeb7c795b5038d07523\">Full Description</a>"
	},
	"cuMemsetD2D32Async":{
		"id": "cuMemsetD2D32Async",
		"value": "<p><b><code>CUresult cuMemsetD2D32Async ( CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream )</code></b></p>",
		"description": "<p>Sets device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>dstPitch</code><br>&emsp;- Pitch of destination device pointer(Unused if Height is 1)<br><code>ui</code><br>&emsp;- Value to set<br><code>Width</code><br>&emsp;- Width of row<br><code>Height</code><br>&emsp;- Number of rows<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g8a78d3147ac93fac955052c815d9ea3c\">Full Description</a>"
	},
	"cuMemsetD2D8":{
		"id": "cuMemsetD2D8",
		"value": "<p><b><code>CUresult cuMemsetD2D8 ( CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height )</code></b></p>",
		"description": "<p>Initializes device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>dstPitch</code><br>&emsp;- Pitch of destination device pointer(Unused if Height is 1)<br><code>uc</code><br>&emsp;- Value to set<br><code>Width</code><br>&emsp;- Width of row<br><code>Height</code><br>&emsp;- Number of rows<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1ge88b13e646e2be6ba0e0475ef5205974\">Full Description</a>"
	},
	"cuMemsetD2D8Async":{
		"id": "cuMemsetD2D8Async",
		"value": "<p><b><code>CUresult cuMemsetD2D8Async ( CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream )</code></b></p>",
		"description": "<p>Sets device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>dstPitch</code><br>&emsp;- Pitch of destination device pointer(Unused if Height is 1)<br><code>uc</code><br>&emsp;- Value to set<br><code>Width</code><br>&emsp;- Width of row<br><code>Height</code><br>&emsp;- Number of rows<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g3f7b6924a3e49c3265b328f534102e97\">Full Description</a>"
	},
	"cuMemsetD32":{
		"id": "cuMemsetD32",
		"value": "<p><b><code>CUresult cuMemsetD32 ( CUdeviceptr dstDevice, unsigned int ui, size_t N )</code></b></p>",
		"description": "<p>Initializes device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>ui</code><br>&emsp;- Value to set<br><code>N</code><br>&emsp;- Number of elements<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g983e8d8759acd1b64326317481fbf132\">Full Description</a>"
	},
	"cuMemsetD32Async":{
		"id": "cuMemsetD32Async",
		"value": "<p><b><code>CUresult cuMemsetD32Async ( CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream )</code></b></p>",
		"description": "<p>Sets device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>ui</code><br>&emsp;- Value to set<br><code>N</code><br>&emsp;- Number of elements<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g58229da5d30f1c0cdf667b320ec2c0f5\">Full Description</a>"
	},
	"cuMemsetD8":{
		"id": "cuMemsetD8",
		"value": "<p><b><code>CUresult cuMemsetD8 ( CUdeviceptr dstDevice, unsigned char uc, size_t N )</code></b></p>",
		"description": "<p>Initializes device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>uc</code><br>&emsp;- Value to set<br><code>N</code><br>&emsp;- Number of elements<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g6e582bf866e9e2fb014297bfaf354d7b\">Full Description</a>"
	},
	"cuMemsetD8Async":{
		"id": "cuMemsetD8Async",
		"value": "<p><b><code>CUresult cuMemsetD8Async ( CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream )</code></b></p>",
		"description": "<p>Sets device memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dstDevice</code><br>&emsp;- Destination device pointer<br><code>uc</code><br>&emsp;- Value to set<br><code>N</code><br>&emsp;- Number of elements<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1gaef08a7ccd61112f94e82f2b30d43627\">Full Description</a>"
	},
	"cuMipmappedArrayCreate":{
		"id": "cuMipmappedArrayCreate",
		"value": "<p><b><code>CUresult cuMipmappedArrayCreate ( CUmipmappedArray* pHandle, const CUDA_ARRAY3D_DESCRIPTOR* pMipmappedArrayDesc, unsigned int numMipmapLevels )</code></b></p>",
		"description": "<p>Creates a CUDA mipmapped array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pHandle</code><br>&emsp;- Returned mipmapped array<br><code>pMipmappedArrayDesc</code><br>&emsp;- mipmapped array descriptor<br><code>numMipmapLevels</code><br>&emsp;- Number of mipmap levels<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1ga5d2e311c7f9b0bc6d130af824a40bd3\">Full Description</a>"
	},
	"cuMipmappedArrayDestroy":{
		"id": "cuMipmappedArrayDestroy",
		"value": "<p><b><code>CUresult cuMipmappedArrayDestroy ( CUmipmappedArray hMipmappedArray )</code></b></p>",
		"description": "<p>Destroys a CUDA mipmapped array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hMipmappedArray</code><br>&emsp;- Mipmapped array to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ARRAY_IS_MAPPED, CUDA_ERROR_CONTEXT_IS_DESTROYED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1ge0d7c768b6a6963c4d4bde5bbc74f0ad\">Full Description</a>"
	},
	"cuMipmappedArrayGetLevel":{
		"id": "cuMipmappedArrayGetLevel",
		"value": "<p><b><code>CUresult cuMipmappedArrayGetLevel ( CUarray* pLevelArray, CUmipmappedArray hMipmappedArray, unsigned int level )</code></b></p>",
		"description": "<p>Gets a mipmap level of a CUDA mipmapped array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pLevelArray</code><br>&emsp;- Returned mipmap level CUDA array<br><code>hMipmappedArray</code><br>&emsp;- CUDA mipmapped array<br><code>level</code><br>&emsp;- Mipmap level<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g82f276659f05be14820e99346b0f86b7\">Full Description</a>"
	},
	"cuMipmappedArrayGetMemoryRequirements":{
		"id": "cuMipmappedArrayGetMemoryRequirements",
		"value": "<p><b><code>CUresult cuMipmappedArrayGetMemoryRequirements ( CUDA_ARRAY_MEMORY_REQUIREMENTS* memoryRequirements, CUmipmappedArray mipmap, CUdevice device )</code></b></p>",
		"description": "<p>Returns the memory requirements of a CUDA mipmapped array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>memoryRequirements</code><br>&emsp;- Pointer to CUDA_ARRAY_MEMORY_REQUIREMENTS<br><code>mipmap</code><br>&emsp;- CUDA mipmapped array to get the memory requirements of<br><code>device</code><br>&emsp;- Device to get the memory requirements for<br></p><p><b>Returns</b><br>CUDA_SUCCESSCUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g71b95168dd78c64cbca5b32b9cbf37e1\">Full Description</a>"
	},
	"cuMipmappedArrayGetSparseProperties":{
		"id": "cuMipmappedArrayGetSparseProperties",
		"value": "<p><b><code>CUresult cuMipmappedArrayGetSparseProperties ( CUDA_ARRAY_SPARSE_PROPERTIES* sparseProperties, CUmipmappedArray mipmap )</code></b></p>",
		"description": "<p>Returns the layout properties of a sparse CUDA mipmapped array.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>sparseProperties</code><br>&emsp;- Pointer to CUDA_ARRAY_SPARSE_PROPERTIES<br><code>mipmap</code><br>&emsp;- CUDA mipmapped array to get the sparse properties of<br></p><p><b>Returns</b><br>CUDA_SUCCESSCUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEM.html#group__CUDA__MEM#group__CUDA__MEM_1g55a16bd1780acb3cc94e8b88d5fe5e19\">Full Description</a>"
	},
	"cuMemAddressFree":{
		"id": "cuMemAddressFree",
		"value": "<p><b><code>CUresult cuMemAddressFree ( CUdeviceptr ptr, size_t size )</code></b></p>",
		"description": "<p>Free an address range reservation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Starting address of the virtual address range to free<br><code>size</code><br>&emsp;- Size of the virtual address region to free<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g6993ecea2ea03e1b802b8255edc2da5b\">Full Description</a>"
	},
	"cuMemAddressReserve":{
		"id": "cuMemAddressReserve",
		"value": "<p><b><code>CUresult cuMemAddressReserve ( CUdeviceptr* ptr, size_t size, size_t alignment, CUdeviceptr addr, unsigned long long flags )</code></b></p>",
		"description": "<p>Allocate an address range reservation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Resulting pointer to start of virtual address range allocated<br><code>size</code><br>&emsp;- Size of the reserved virtual address range requested<br><code>alignment</code><br>&emsp;- Alignment of the reserved virtual address range requested<br><code>addr</code><br>&emsp;- Fixed starting address range requested<br><code>flags</code><br>&emsp;- Currently unused, must be zero<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1ge489256c107df2a07ddf96d80c86cd9b\">Full Description</a>"
	},
	"cuMemCreate":{
		"id": "cuMemCreate",
		"value": "<p><b><code>CUresult cuMemCreate ( CUmemGenericAllocationHandle* handle, size_t size, const CUmemAllocationProp* prop, unsigned long long flags )</code></b></p>",
		"description": "<p>Create a CUDA memory handle representing a memory allocation of a given size described by the given properties.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>handle</code><br>&emsp;- Value of handle returned. All operations on this allocation are to be performed using this handle.<br><code>size</code><br>&emsp;- Size of the allocation requested<br><code>prop</code><br>&emsp;- Properties of the allocation to create.<br><code>flags</code><br>&emsp;- flags for future use, must be zero now.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g899d69a862bba36449789c64b430dc7c\">Full Description</a>"
	},
	"cuMemExportToShareableHandle":{
		"id": "cuMemExportToShareableHandle",
		"value": "<p><b><code>CUresult cuMemExportToShareableHandle ( void* shareableHandle, CUmemGenericAllocationHandle handle, CUmemAllocationHandleType handleType, unsigned long long flags )</code></b></p>",
		"description": "<p>Exports an allocation to a requested shareable handle type.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>shareableHandle</code><br>&emsp;- Pointer to the location in which to store the requested handle type<br><code>handle</code><br>&emsp;- CUDA handle for the memory allocation<br><code>handleType</code><br>&emsp;- Type of shareable handle requested (defines type and size of the shareableHandle output parameter)<br><code>flags</code><br>&emsp;- Reserved, must be zero<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g633f273b155815f23c1d70e7d9384c56\">Full Description</a>"
	},
	"cuMemGetAccess":{
		"id": "cuMemGetAccess",
		"value": "<p><b><code>CUresult cuMemGetAccess ( unsigned long long* flags, const CUmemLocation* location, CUdeviceptr ptr )</code></b></p>",
		"description": "<p>Get the access flags set for the given location and ptr.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>flags</code><br>&emsp;- Flags set for this location<br><code>location</code><br>&emsp;- Location in which to check the flags for<br><code>ptr</code><br>&emsp;- Address in which to check the access flags for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g4b5627b4f2d3972d0b62cc4ba1931125\">Full Description</a>"
	},
	"cuMemGetAllocationGranularity":{
		"id": "cuMemGetAllocationGranularity",
		"value": "<p><b><code>CUresult cuMemGetAllocationGranularity ( size_t* granularity, const CUmemAllocationProp* prop, CUmemAllocationGranularity_flags option )</code></b></p>",
		"description": "<p>Calculates either the minimal or recommended granularity.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>granularity</code><br>&emsp;Returned granularity.<br><code>prop</code><br>&emsp;Property for which to determine the granularity for<br><code>option</code><br>&emsp;Determines which granularity to return<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g30ee906c2cf66a0347b3dfec3d7eb31a\">Full Description</a>"
	},
	"cuMemGetAllocationPropertiesFromHandle":{
		"id": "cuMemGetAllocationPropertiesFromHandle",
		"value": "<p><b><code>CUresult cuMemGetAllocationPropertiesFromHandle ( CUmemAllocationProp* prop, CUmemGenericAllocationHandle handle )</code></b></p>",
		"description": "<p>Retrieve the contents of the property structure defining properties for this handle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>prop</code><br>&emsp;- Pointer to a properties structure which will hold the information about this handle<br><code>handle</code><br>&emsp;- Handle which to perform the query on<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1gc1c4c812caba5a21401c2cb4ab4512b1\">Full Description</a>"
	},
	"cuMemImportFromShareableHandle":{
		"id": "cuMemImportFromShareableHandle",
		"value": "<p><b><code>CUresult cuMemImportFromShareableHandle ( CUmemGenericAllocationHandle* handle, void* osHandle, CUmemAllocationHandleType shHandleType )</code></b></p>",
		"description": "<p>Imports an allocation from a requested shareable handle type.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>handle</code><br>&emsp;- CUDA Memory handle for the memory allocation.<br><code>osHandle</code><br>&emsp;- Shareable Handle representing the memory allocation that is to be imported.<br><code>shHandleType</code><br>&emsp;- handle type of the exported handle CUmemAllocationHandleType.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g1577822cc83ea896b4892f2d69630463\">Full Description</a>"
	},
	"cuMemMap":{
		"id": "cuMemMap",
		"value": "<p><b><code>CUresult cuMemMap ( CUdeviceptr ptr, size_t size, size_t offset, CUmemGenericAllocationHandle handle, unsigned long long flags )</code></b></p>",
		"description": "<p>Maps an allocation handle to a reserved virtual address range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Address where memory will be mapped.<br><code>size</code><br>&emsp;- Size of the memory mapping.<br><code>offset</code><br>&emsp;- Offset into the memory represented by handle from which to start mapping Note: currently must be zero.<br><code>handle</code><br>&emsp;- Handle to a shareable memory<br><code>flags</code><br>&emsp;- flags for future use, must be zero now.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1gff1d395423af5c5c75375516959dae56\">Full Description</a>"
	},
	"cuMemMapArrayAsync":{
		"id": "cuMemMapArrayAsync",
		"value": "<p><b><code>CUresult cuMemMapArrayAsync ( CUarrayMapInfo* mapInfoList, unsigned int count, CUstream hStream )</code></b></p>",
		"description": "<p>Maps or unmaps subregions of sparse CUDA arrays and sparse CUDA mipmapped arrays.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>mapInfoList</code><br>&emsp;- List of CUarrayMapInfo<br><code>count</code><br>&emsp;- Count of CUarrayMapInfo in mapInfoList<br><code>hStream</code><br>&emsp;- Stream identifier for the stream to use for map or unmap operations<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g5dc41a62a9feb68f2e943b438c83e5ab\">Full Description</a>"
	},
	"cuMemRelease":{
		"id": "cuMemRelease",
		"value": "<p><b><code>CUresult cuMemRelease ( CUmemGenericAllocationHandle handle )</code></b></p>",
		"description": "<p>Release a memory handle representing a memory allocation which was previously allocated through cuMemCreate.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>handle</code><br>&emsp;Value of handle which was returned previously by cuMemCreate.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g3014f0759f43a8d82db951b8e4b91d68\">Full Description</a>"
	},
	"cuMemRetainAllocationHandle":{
		"id": "cuMemRetainAllocationHandle",
		"value": "<p><b><code>CUresult cuMemRetainAllocationHandle ( CUmemGenericAllocationHandle* handle, void* addr )</code></b></p>",
		"description": "<p>Given an address addr, returns the allocation handle of the backing memory allocation.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>handle</code><br>&emsp;CUDA Memory handle for the backing memory allocation.<br><code>addr</code><br>&emsp;Memory address to query, that has been mapped previously.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g1ddca5437c502782155f95bf98e775c6\">Full Description</a>"
	},
	"cuMemSetAccess":{
		"id": "cuMemSetAccess",
		"value": "<p><b><code>CUresult cuMemSetAccess ( CUdeviceptr ptr, size_t size, const CUmemAccessDesc* desc, size_t count )</code></b></p>",
		"description": "<p>Set the access flags for each location specified in desc for the given virtual address range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Starting address for the virtual address range<br><code>size</code><br>&emsp;- Length of the virtual address range<br><code>desc</code><br>&emsp;- Array of CUmemAccessDesc that describe how to change the mapping for each location specified<br><code>count</code><br>&emsp;- Number of CUmemAccessDesc in desc<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1g1b6b12b10e8324bf462ecab4e7ef30e1\">Full Description</a>"
	},
	"cuMemUnmap":{
		"id": "cuMemUnmap",
		"value": "<p><b><code>CUresult cuMemUnmap ( CUdeviceptr ptr, size_t size )</code></b></p>",
		"description": "<p>Unmap the backing memory of a given address range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr</code><br>&emsp;- Starting address for the virtual address range to unmap<br><code>size</code><br>&emsp;- Size of the virtual address range to unmap<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_PERMITTED, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VA.html#group__CUDA__VA#group__CUDA__VA_1gfb50aac00c848fd7087e858f59bf7e2a\">Full Description</a>"
	},
	"cuMemAllocAsync":{
		"id": "cuMemAllocAsync",
		"value": "<p><b><code>CUresult cuMemAllocAsync ( CUdeviceptr* dptr, size_t bytesize, CUstream hStream )</code></b></p>",
		"description": "<p>Allocates memory with stream ordered semantics.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned device pointer<br><code>bytesize</code><br>&emsp;- Number of bytes to allocate<br><code>hStream</code><br>&emsp;- The stream establishing the stream ordering contract and the memory pool to allocate from<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT (default stream specified with no current context), CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1g13413273e84a641bce1929eae9e6501f\">Full Description</a>"
	},
	"cuMemAllocFromPoolAsync":{
		"id": "cuMemAllocFromPoolAsync",
		"value": "<p><b><code>CUresult cuMemAllocFromPoolAsync ( CUdeviceptr* dptr, size_t bytesize, CUmemoryPool pool, CUstream hStream )</code></b></p>",
		"description": "<p>Allocates memory from a specified pool with stream ordered semantics.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned device pointer<br><code>bytesize</code><br>&emsp;- Number of bytes to allocate<br><code>pool</code><br>&emsp;- The pool to allocate from<br><code>hStream</code><br>&emsp;- The stream establishing the stream ordering semantic<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT (default stream specified with no current context), CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1gf1dd6e1e2e8f767a5e0ea63f38ff260b\">Full Description</a>"
	},
	"cuMemFreeAsync":{
		"id": "cuMemFreeAsync",
		"value": "<p><b><code>CUresult cuMemFreeAsync ( CUdeviceptr dptr, CUstream hStream )</code></b></p>",
		"description": "<p>Frees memory with stream ordered semantics.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- memory to free<br><code>hStream</code><br>&emsp;- The stream establishing the stream ordering contract.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT (default stream specified with no current context), CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1g41acf4131f672a2a75cd93d3241f10cf\">Full Description</a>"
	},
	"cuMemPoolCreate":{
		"id": "cuMemPoolCreate",
		"value": "<p><b><code>CUresult cuMemPoolCreate ( CUmemoryPool* pool, const CUmemPoolProps* poolProps )</code></b></p>",
		"description": "<p>Creates a memory pool.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1g8aa4c143dbc20293659cd883232b95f2\">Full Description</a>"
	},
	"cuMemPoolDestroy":{
		"id": "cuMemPoolDestroy",
		"value": "<p><b><code>CUresult cuMemPoolDestroy ( CUmemoryPool pool )</code></b></p>",
		"description": "<p>Destroys the specified memory pool.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1ge0e211115e5ad1c79250b9dd425b77f7\">Full Description</a>"
	},
	"cuMemPoolExportPointer":{
		"id": "cuMemPoolExportPointer",
		"value": "<p><b><code>CUresult cuMemPoolExportPointer ( CUmemPoolPtrExportData* shareData_out, CUdeviceptr ptr )</code></b></p>",
		"description": "<p>Export data to share a memory pool allocation between processes.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>shareData_out</code><br>&emsp;- Returned export data<br><code>ptr</code><br>&emsp;- pointer to memory being exported<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1gfe89f0478d26edaa91eb8a2e0349329d\">Full Description</a>"
	},
	"cuMemPoolExportToShareableHandle":{
		"id": "cuMemPoolExportToShareableHandle",
		"value": "<p><b><code>CUresult cuMemPoolExportToShareableHandle ( void* handle_out, CUmemoryPool pool, CUmemAllocationHandleType handleType, unsigned long long flags )</code></b></p>",
		"description": "<p>Exports a memory pool to the requested handle type.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>handle_out</code><br>&emsp;- Returned OS handle<br><code>pool</code><br>&emsp;- pool to export<br><code>handleType</code><br>&emsp;- the type of handle to create<br><code>flags</code><br>&emsp;- must be 0<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1g79ed285fdfffb76932871fb96fbba8f8\">Full Description</a>"
	},
	"cuMemPoolGetAccess":{
		"id": "cuMemPoolGetAccess",
		"value": "<p><b><code>CUresult cuMemPoolGetAccess ( CUmemAccess_flags* flags, CUmemoryPool memPool, CUmemLocation* location )</code></b></p>",
		"description": "<p>Returns the accessibility of a pool from a device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>flags</code><br>&emsp;- the accessibility of the pool from the specified location<br><code>memPool</code><br>&emsp;- the pool being queried<br><code>location</code><br>&emsp;- the location accessing the pool<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1g838f28fd535a1cbd06c5f7fe0edbdcc7\">Full Description</a>"
	},
	"cuMemPoolGetAttribute":{
		"id": "cuMemPoolGetAttribute",
		"value": "<p><b><code>CUresult cuMemPoolGetAttribute ( CUmemoryPool pool, CUmemPool_attribute attr, void* value )</code></b></p>",
		"description": "<p>Gets attributes of a memory pool.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pool</code><br>&emsp;- The memory pool to get attributes of<br><code>attr</code><br>&emsp;- The attribute to get<br><code>value</code><br>&emsp;- Retrieved value<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1gd45ea7c43e4a1add4b971d06fa72eda4\">Full Description</a>"
	},
	"cuMemPoolImportFromShareableHandle":{
		"id": "cuMemPoolImportFromShareableHandle",
		"value": "<p><b><code>CUresult cuMemPoolImportFromShareableHandle ( CUmemoryPool* pool_out, void* handle, CUmemAllocationHandleType handleType, unsigned long long flags )</code></b></p>",
		"description": "<p>imports a memory pool from a shared handle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pool_out</code><br>&emsp;- Returned memory pool<br><code>handle</code><br>&emsp;- OS handle of the pool to open<br><code>handleType</code><br>&emsp;- The type of handle being imported<br><code>flags</code><br>&emsp;- must be 0<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1g02b4f18dd8a1c45b7f302800e90cec5b\">Full Description</a>"
	},
	"cuMemPoolImportPointer":{
		"id": "cuMemPoolImportPointer",
		"value": "<p><b><code>CUresult cuMemPoolImportPointer ( CUdeviceptr* ptr_out, CUmemoryPool pool, CUmemPoolPtrExportData* shareData )</code></b></p>",
		"description": "<p>Import a memory pool allocation from another process.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ptr_out</code><br>&emsp;- pointer to imported memory<br><code>pool</code><br>&emsp;- pool from which to import<br><code>shareData</code><br>&emsp;- data specifying the memory to import<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1g2620bb972ed5edcce312d3689454acbd\">Full Description</a>"
	},
	"cuMemPoolSetAccess":{
		"id": "cuMemPoolSetAccess",
		"value": "<p><b><code>CUresult cuMemPoolSetAccess ( CUmemoryPool pool, const CUmemAccessDesc* map, size_t count )</code></b></p>",
		"description": "<p>Controls visibility of pools between devices.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pool</code><br>&emsp;- The pool being modified<br><code>map</code><br>&emsp;- Array of access descriptors. Each descriptor instructs the access to enable for a single gpu.<br><code>count</code><br>&emsp;- Number of descriptors in the map array.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1gff3ce33e252443f4b087b94e42913406\">Full Description</a>"
	},
	"cuMemPoolSetAttribute":{
		"id": "cuMemPoolSetAttribute",
		"value": "<p><b><code>CUresult cuMemPoolSetAttribute ( CUmemoryPool pool, CUmemPool_attribute attr, void* value )</code></b></p>",
		"description": "<p>Sets attributes of a memory pool.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pool</code><br>&emsp;- The memory pool to modify<br><code>attr</code><br>&emsp;- The attribute to modify<br><code>value</code><br>&emsp;- Pointer to the value to assign<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1g223e786cb217709235a06e41bccaec00\">Full Description</a>"
	},
	"cuMemPoolTrimTo":{
		"id": "cuMemPoolTrimTo",
		"value": "<p><b><code>CUresult cuMemPoolTrimTo ( CUmemoryPool pool, size_t minBytesToKeep )</code></b></p>",
		"description": "<p>Tries to release memory back to the OS.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pool</code><br>&emsp;- The memory pool to trim<br><code>minBytesToKeep</code><br>&emsp;- If the pool has less than minBytesToKeep reserved, the TrimTo operation is a no-op. Otherwise the pool will be guaranteed to have at least minBytesToKeep bytes reserved after the operation.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MALLOC__ASYNC.html#group__CUDA__MALLOC__ASYNC#group__CUDA__MALLOC__ASYNC_1g9c7e267e3460945b0ca76c48314bb669\">Full Description</a>"
	},
	"cuMemAdvise":{
		"id": "cuMemAdvise",
		"value": "<p><b><code>CUresult cuMemAdvise ( CUdeviceptr devPtr, size_t count, CUmem_advise advice, CUdevice device )</code></b></p>",
		"description": "<p>Advise about the usage of a given memory range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to memory to set the advice for<br><code>count</code><br>&emsp;- Size in bytes of the memory range<br><code>advice</code><br>&emsp;- Advice to be applied for the specified memory range<br><code>device</code><br>&emsp;- Device to apply the advice for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__UNIFIED.html#group__CUDA__UNIFIED#group__CUDA__UNIFIED_1g27608c857a9254789c13f3e3b72029e2\">Full Description</a>"
	},
	"cuMemPrefetchAsync":{
		"id": "cuMemPrefetchAsync",
		"value": "<p><b><code>CUresult cuMemPrefetchAsync ( CUdeviceptr devPtr, size_t count, CUdevice dstDevice, CUstream hStream )</code></b></p>",
		"description": "<p>Prefetches memory to the specified destination device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Pointer to be prefetched<br><code>count</code><br>&emsp;- Size in bytes<br><code>dstDevice</code><br>&emsp;- Destination device to prefetch to<br><code>hStream</code><br>&emsp;- Stream to enqueue prefetch operation<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__UNIFIED.html#group__CUDA__UNIFIED#group__CUDA__UNIFIED_1gfe94f8b7fb56291ebcea44261aa4cb84\">Full Description</a>"
	},
	"cuMemRangeGetAttribute":{
		"id": "cuMemRangeGetAttribute",
		"value": "<p><b><code>CUresult cuMemRangeGetAttribute ( void* data, size_t dataSize, CUmem_range_attribute attribute, CUdeviceptr devPtr, size_t count )</code></b></p>",
		"description": "<p>Query an attribute of a given memory range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>data</code><br>&emsp;- A pointers to a memory location where the result of each attribute query will be written to.<br><code>dataSize</code><br>&emsp;- Array containing the size of data<br><code>attribute</code><br>&emsp;- The attribute to query<br><code>devPtr</code><br>&emsp;- Start of the range to query<br><code>count</code><br>&emsp;- Size of the range to query<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__UNIFIED.html#group__CUDA__UNIFIED#group__CUDA__UNIFIED_1g1c92408a7d0d8875e19b1a58af56f67d\">Full Description</a>"
	},
	"cuMemRangeGetAttributes":{
		"id": "cuMemRangeGetAttributes",
		"value": "<p><b><code>CUresult cuMemRangeGetAttributes ( void** data, size_t* dataSizes, CUmem_range_attribute* attributes, size_t numAttributes, CUdeviceptr devPtr, size_t count )</code></b></p>",
		"description": "<p>Query attributes of a given memory range.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>data</code><br>&emsp;- A two-dimensional array containing pointers to memory locations where the result of each attribute query will be written to.<br><code>dataSizes</code><br>&emsp;- Array containing the sizes of each result<br><code>attributes</code><br>&emsp;- An array of attributes to query (numAttributes and the number of attributes in this array should match)<br><code>numAttributes</code><br>&emsp;- Number of attributes to query<br><code>devPtr</code><br>&emsp;- Start of the range to query<br><code>count</code><br>&emsp;- Size of the range to query<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__UNIFIED.html#group__CUDA__UNIFIED#group__CUDA__UNIFIED_1gc7ce142e60f8613cfb7d722b87dc9d12\">Full Description</a>"
	},
	"cuPointerGetAttribute":{
		"id": "cuPointerGetAttribute",
		"value": "<p><b><code>CUresult cuPointerGetAttribute ( void* data, CUpointer_attribute attribute, CUdeviceptr ptr )</code></b></p>",
		"description": "<p>Returns information about a pointer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>data</code><br>&emsp;- Returned pointer attribute value<br><code>attribute</code><br>&emsp;- Pointer attribute to query<br><code>ptr</code><br>&emsp;- Pointer<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__UNIFIED.html#group__CUDA__UNIFIED#group__CUDA__UNIFIED_1g0c28ed0aff848042bc0533110e45820c\">Full Description</a>"
	},
	"cuPointerGetAttributes":{
		"id": "cuPointerGetAttributes",
		"value": "<p><b><code>CUresult cuPointerGetAttributes ( unsigned int numAttributes, CUpointer_attribute* attributes, void** data, CUdeviceptr ptr )</code></b></p>",
		"description": "<p>Returns information about a pointer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>numAttributes</code><br>&emsp;- Number of attributes to query<br><code>attributes</code><br>&emsp;- An array of attributes to query (numAttributes and the number of attributes in this array should match)<br><code>data</code><br>&emsp;- A two-dimensional array containing pointers to memory locations where the result of each attribute query will be written to.<br><code>ptr</code><br>&emsp;- Pointer to query<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__UNIFIED.html#group__CUDA__UNIFIED#group__CUDA__UNIFIED_1gf65e9ea532e311dd049166e4894955ad\">Full Description</a>"
	},
	"cuPointerSetAttribute":{
		"id": "cuPointerSetAttribute",
		"value": "<p><b><code>CUresult cuPointerSetAttribute ( const void* value, CUpointer_attribute attribute, CUdeviceptr ptr )</code></b></p>",
		"description": "<p>Set attributes on a previously allocated memory region.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>value</code><br>&emsp;- Pointer to memory containing the value to be set<br><code>attribute</code><br>&emsp;- Pointer attribute to set<br><code>ptr</code><br>&emsp;- Pointer to a memory region allocated using CUDA memory allocation APIs<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__UNIFIED.html#group__CUDA__UNIFIED#group__CUDA__UNIFIED_1g89f7ad29a657e574fdea2624b74d138e\">Full Description</a>"
	},
	"cuStreamAddCallback":{
		"id": "cuStreamAddCallback",
		"value": "<p><b><code>CUresult cuStreamAddCallback ( CUstream hStream, CUstreamCallback callback, void* userData, unsigned int flags )</code></b></p>",
		"description": "<p>Add a callback to a compute stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream to add callback to<br><code>callback</code><br>&emsp;- The function to call once preceding stream operations are complete<br><code>userData</code><br>&emsp;- User specified data to be passed to the callback function<br><code>flags</code><br>&emsp;- Reserved for future use, must be 0<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g613d97a277d7640f4cb1c03bd51c2483\">Full Description</a>"
	},
	"cuStreamAttachMemAsync":{
		"id": "cuStreamAttachMemAsync",
		"value": "<p><b><code>CUresult cuStreamAttachMemAsync ( CUstream hStream, CUdeviceptr dptr, size_t length, unsigned int flags )</code></b></p>",
		"description": "<p>Attach memory to a stream asynchronously.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream in which to enqueue the attach operation<br><code>dptr</code><br>&emsp;- Pointer to memory (must be a pointer to managed memory or to a valid host-accessible region of system-allocated pageable memory)<br><code>length</code><br>&emsp;- Length of memory<br><code>flags</code><br>&emsp;- Must be one of CUmemAttach_flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g6e468d680e263e7eba02a56643c50533\">Full Description</a>"
	},
	"cuStreamBeginCapture":{
		"id": "cuStreamBeginCapture",
		"value": "<p><b><code>CUresult cuStreamBeginCapture ( CUstream hStream, CUstreamCaptureMode mode )</code></b></p>",
		"description": "<p>Begins graph capture on a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream in which to initiate capture<br><code>mode</code><br>&emsp;- Controls the interaction of this capture sequence with other API calls that are potentially unsafe. For more details see cuThreadExchangeStreamCaptureMode.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g767167da0bbf07157dc20b6c258a2143\">Full Description</a>"
	},
	"cuStreamCopyAttributes":{
		"id": "cuStreamCopyAttributes",
		"value": "<p><b><code>CUresult cuStreamCopyAttributes ( CUstream dst, CUstream src )</code></b></p>",
		"description": "<p>Copies attributes from source stream to destination stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;Destination stream<br><code>src</code><br>&emsp;Source stream For list of attributes see CUstreamAttrID<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g680f5399f6126cc4a99bc5eee4c2eff0\">Full Description</a>"
	},
	"cuStreamCreate":{
		"id": "cuStreamCreate",
		"value": "<p><b><code>CUresult cuStreamCreate ( CUstream* phStream, unsigned int Flags )</code></b></p>",
		"description": "<p>Create a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phStream</code><br>&emsp;- Returned newly created stream<br><code>Flags</code><br>&emsp;- Parameters for stream creation<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1ga581f0c5833e21ded8b5a56594e243f4\">Full Description</a>"
	},
	"cuStreamCreateWithPriority":{
		"id": "cuStreamCreateWithPriority",
		"value": "<p><b><code>CUresult cuStreamCreateWithPriority ( CUstream* phStream, unsigned int flags, int priority )</code></b></p>",
		"description": "<p>Create a stream with the given priority.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phStream</code><br>&emsp;- Returned newly created stream<br><code>flags</code><br>&emsp;- Flags for stream creation. See cuStreamCreate for a list of valid flags<br><code>priority</code><br>&emsp;- Stream priority. Lower numbers represent higher priorities. See cuCtxGetStreamPriorityRange for more information about meaningful stream priorities that can be passed.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g95c1a8c7c3dacb13091692dd9c7f7471\">Full Description</a>"
	},
	"cuStreamDestroy":{
		"id": "cuStreamDestroy",
		"value": "<p><b><code>CUresult cuStreamDestroy ( CUstream hStream )</code></b></p>",
		"description": "<p>Destroys a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g244c8833de4596bcd31a06cdf21ee758\">Full Description</a>"
	},
	"cuStreamEndCapture":{
		"id": "cuStreamEndCapture",
		"value": "<p><b><code>CUresult cuStreamEndCapture ( CUstream hStream, CUgraph* phGraph )</code></b></p>",
		"description": "<p>Ends capture on a stream, returning the captured graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream to query<br><code>phGraph</code><br>&emsp;- The captured graph<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_STREAM_CAPTURE_WRONG_THREAD<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g03dab8b2ba76b00718955177a929970c\">Full Description</a>"
	},
	"cuStreamGetAttribute":{
		"id": "cuStreamGetAttribute",
		"value": "<p><b><code>CUresult cuStreamGetAttribute ( CUstream hStream, CUstreamAttrID attr, CUstreamAttrValue* value_out )</code></b></p>",
		"description": "<p>Queries stream attribute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br><code>attr</code><br><code>value_out</code><br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g0598bb5295f3a62761b93c2d63d2266c\">Full Description</a>"
	},
	"cuStreamGetCaptureInfo":{
		"id": "cuStreamGetCaptureInfo",
		"value": "<p><b><code>CUresult cuStreamGetCaptureInfo ( CUstream hStream, CUstreamCaptureStatus* captureStatus_out, cuuint64_t* id_out, CUgraph* graph_out, const CUgraphNode** dependencies_out, size_t* numDependencies_out )</code></b></p>",
		"description": "<p>Query a stream's capture state.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- The stream to query<br><code>captureStatus_out</code><br>&emsp;- Location to return the capture status of the stream; required<br><code>id_out</code><br>&emsp;- Optional location to return an id for the capture sequence, which is unique over the lifetime of the process<br><code>graph_out</code><br>&emsp;- Optional location to return the graph being captured into. All operations other than destroy and node removal are permitted on the graph while the capture sequence is in progress. This API does not transfer ownership of the graph, which is transferred or destroyed at cuStreamEndCapture. Note that the graph handle may be invalidated before end of capture for certain errors. Nodes that are or become unreachable from the original stream at cuStreamEndCapture due to direct actions on the graph do not trigger CUDA_ERROR_STREAM_CAPTURE_UNJOINED.<br><code>dependencies_out</code><br>&emsp;- Optional location to store a pointer to an array of nodes. The next node to be captured in the stream will depend on this set of nodes, absent operations such as event wait which modify this set. The array pointer is valid until the next API call which operates on the stream or until end of capture. The node handles may be copied out and are valid until they or the graph is destroyed. The driver-owned array may also be passed directly to APIs that operate on the graph (not the stream) without copying.<br><code>numDependencies_out</code><br>&emsp;- Optional location to store the size of the array returned in dependencies_out.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_STREAM_CAPTURE_IMPLICIT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1gb2f03349edaf802e0f54c84e2b6b603e\">Full Description</a>"
	},
	"cuStreamGetCtx":{
		"id": "cuStreamGetCtx",
		"value": "<p><b><code>CUresult cuStreamGetCtx ( CUstream hStream, CUcontext* pctx )</code></b></p>",
		"description": "<p>Query the context associated with a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Handle to the stream to be queried<br><code>pctx</code><br>&emsp;- Returned context associated with the stream<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g1107907025eaa3387fdc590a9379a681\">Full Description</a>"
	},
	"cuStreamGetFlags":{
		"id": "cuStreamGetFlags",
		"value": "<p><b><code>CUresult cuStreamGetFlags ( CUstream hStream, unsigned int* flags )</code></b></p>",
		"description": "<p>Query the flags of a given stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Handle to the stream to be queried<br><code>flags</code><br>&emsp;- Pointer to an unsigned integer in which the stream's flags are returned The value returned in flags is a logical 'OR' of all flags that were used while creating this stream. See cuStreamCreate for the list of valid flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g4d39786855a6bed01215c1907fbbfbb7\">Full Description</a>"
	},
	"cuStreamGetId":{
		"id": "cuStreamGetId",
		"value": "<p><b><code>CUresult cuStreamGetId ( CUstream hStream, unsigned long long* streamId )</code></b></p>",
		"description": "<p>Returns the unique Id associated with the stream handle supplied.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Handle to the stream to be queried<br><code>streamId</code><br>&emsp;- Pointer to store the Id of the stream<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g5dafd2b6f48caeb13d5110a7f21e60e3\">Full Description</a>"
	},
	"cuStreamGetPriority":{
		"id": "cuStreamGetPriority",
		"value": "<p><b><code>CUresult cuStreamGetPriority ( CUstream hStream, int* priority )</code></b></p>",
		"description": "<p>Query the priority of a given stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Handle to the stream to be queried<br><code>priority</code><br>&emsp;- Pointer to a signed integer in which the stream's priority is returned<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g5bd5cb26915a2ecf1921807339488484\">Full Description</a>"
	},
	"cuStreamIsCapturing":{
		"id": "cuStreamIsCapturing",
		"value": "<p><b><code>CUresult cuStreamIsCapturing ( CUstream hStream, CUstreamCaptureStatus* captureStatus )</code></b></p>",
		"description": "<p>Returns a stream's capture status.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream to query<br><code>captureStatus</code><br>&emsp;- Returns the stream's capture status<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_STREAM_CAPTURE_IMPLICIT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g37823c49206e3704ae23c7ad78560bca\">Full Description</a>"
	},
	"cuStreamQuery":{
		"id": "cuStreamQuery",
		"value": "<p><b><code>CUresult cuStreamQuery ( CUstream hStream )</code></b></p>",
		"description": "<p>Determine status of a compute stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream to query status of<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_READY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g1b0d24bbe97fa68e4bc511fb6adfeb0b\">Full Description</a>"
	},
	"cuStreamSetAttribute":{
		"id": "cuStreamSetAttribute",
		"value": "<p><b><code>CUresult cuStreamSetAttribute ( CUstream hStream, CUstreamAttrID attr, const CUstreamAttrValue* value )</code></b></p>",
		"description": "<p>Sets stream attribute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br><code>attr</code><br><code>value</code><br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1ga2c5fc0292861a42f264af6ca48be8c0\">Full Description</a>"
	},
	"cuStreamSynchronize":{
		"id": "cuStreamSynchronize",
		"value": "<p><b><code>CUresult cuStreamSynchronize ( CUstream hStream )</code></b></p>",
		"description": "<p>Wait until a stream's tasks are completed.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream to wait for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g15e49dd91ec15991eb7c0a741beb7dad\">Full Description</a>"
	},
	"cuStreamUpdateCaptureDependencies":{
		"id": "cuStreamUpdateCaptureDependencies",
		"value": "<p><b><code>CUresult cuStreamUpdateCaptureDependencies ( CUstream hStream, CUgraphNode* dependencies, size_t numDependencies, unsigned int flags )</code></b></p>",
		"description": "<p>Update the set of dependencies in a capturing stream (11.3+).</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_ILLEGAL_STATE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g010a97eb78a872d6c07abf1d6235af5d\">Full Description</a>"
	},
	"cuStreamWaitEvent":{
		"id": "cuStreamWaitEvent",
		"value": "<p><b><code>CUresult cuStreamWaitEvent ( CUstream hStream, CUevent hEvent, unsigned int Flags )</code></b></p>",
		"description": "<p>Make a compute stream wait on an event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream to wait<br><code>hEvent</code><br>&emsp;- Event to wait on (may not be NULL)<br><code>Flags</code><br>&emsp;- See CUevent_capture_flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g6a898b652dfc6aa1d5c8d97062618b2f\">Full Description</a>"
	},
	"cuThreadExchangeStreamCaptureMode":{
		"id": "cuThreadExchangeStreamCaptureMode",
		"value": "<p><b><code>CUresult cuThreadExchangeStreamCaptureMode ( CUstreamCaptureMode* mode )</code></b></p>",
		"description": "<p>Swaps the stream capture interaction mode for a thread.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>mode</code><br>&emsp;- Pointer to mode value to swap with the current mode<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__STREAM.html#group__CUDA__STREAM#group__CUDA__STREAM_1g378135b262f02a43a7caeab239ae493d\">Full Description</a>"
	},
	"cuEventCreate":{
		"id": "cuEventCreate",
		"value": "<p><b><code>CUresult cuEventCreate ( CUevent* phEvent, unsigned int Flags )</code></b></p>",
		"description": "<p>Creates an event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phEvent</code><br>&emsp;- Returns newly created event<br><code>Flags</code><br>&emsp;- Event creation flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EVENT.html#group__CUDA__EVENT#group__CUDA__EVENT_1g450687e75f3ff992fe01662a43d9d3db\">Full Description</a>"
	},
	"cuEventDestroy":{
		"id": "cuEventDestroy",
		"value": "<p><b><code>CUresult cuEventDestroy ( CUevent hEvent )</code></b></p>",
		"description": "<p>Destroys an event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hEvent</code><br>&emsp;- Event to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EVENT.html#group__CUDA__EVENT#group__CUDA__EVENT_1g593ec73a8ec5a5fc031311d3e4dca1ef\">Full Description</a>"
	},
	"cuEventElapsedTime":{
		"id": "cuEventElapsedTime",
		"value": "<p><b><code>CUresult cuEventElapsedTime ( float* pMilliseconds, CUevent hStart, CUevent hEnd )</code></b></p>",
		"description": "<p>Computes the elapsed time between two events.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pMilliseconds</code><br>&emsp;- Time between hStart and hEnd in ms<br><code>hStart</code><br>&emsp;- Starting event<br><code>hEnd</code><br>&emsp;- Ending event<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_READY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EVENT.html#group__CUDA__EVENT#group__CUDA__EVENT_1gdfb1178807353bbcaa9e245da497cf97\">Full Description</a>"
	},
	"cuEventQuery":{
		"id": "cuEventQuery",
		"value": "<p><b><code>CUresult cuEventQuery ( CUevent hEvent )</code></b></p>",
		"description": "<p>Queries an event's status.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hEvent</code><br>&emsp;- Event to query<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_READY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EVENT.html#group__CUDA__EVENT#group__CUDA__EVENT_1g6f0704d755066b0ee705749ae911deef\">Full Description</a>"
	},
	"cuEventRecord":{
		"id": "cuEventRecord",
		"value": "<p><b><code>CUresult cuEventRecord ( CUevent hEvent, CUstream hStream )</code></b></p>",
		"description": "<p>Records an event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hEvent</code><br>&emsp;- Event to record<br><code>hStream</code><br>&emsp;- Stream to record event for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EVENT.html#group__CUDA__EVENT#group__CUDA__EVENT_1g95424d3be52c4eb95d83861b70fb89d1\">Full Description</a>"
	},
	"cuEventRecordWithFlags":{
		"id": "cuEventRecordWithFlags",
		"value": "<p><b><code>CUresult cuEventRecordWithFlags ( CUevent hEvent, CUstream hStream, unsigned int flags )</code></b></p>",
		"description": "<p>Records an event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hEvent</code><br>&emsp;- Event to record<br><code>hStream</code><br>&emsp;- Stream to record event for<br><code>flags</code><br>&emsp;- See CUevent_capture_flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EVENT.html#group__CUDA__EVENT#group__CUDA__EVENT_1ge577e0c132d9c4961f220d79f6762c4b\">Full Description</a>"
	},
	"cuEventSynchronize":{
		"id": "cuEventSynchronize",
		"value": "<p><b><code>CUresult cuEventSynchronize ( CUevent hEvent )</code></b></p>",
		"description": "<p>Waits for an event to complete.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hEvent</code><br>&emsp;- Event to wait for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EVENT.html#group__CUDA__EVENT#group__CUDA__EVENT_1g9e520d34e51af7f5375610bca4add99c\">Full Description</a>"
	},
	"cuDestroyExternalMemory":{
		"id": "cuDestroyExternalMemory",
		"value": "<p><b><code>CUresult cuDestroyExternalMemory ( CUexternalMemory extMem )</code></b></p>",
		"description": "<p>Destroys an external memory object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extMem</code><br>&emsp;- External memory object to be destroyed<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXTRES__INTEROP.html#group__CUDA__EXTRES__INTEROP#group__CUDA__EXTRES__INTEROP_1g1b586dda86565617e7e0883b956c7052\">Full Description</a>"
	},
	"cuDestroyExternalSemaphore":{
		"id": "cuDestroyExternalSemaphore",
		"value": "<p><b><code>CUresult cuDestroyExternalSemaphore ( CUexternalSemaphore extSem )</code></b></p>",
		"description": "<p>Destroys an external semaphore.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extSem</code><br>&emsp;- External semaphore to be destroyed<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXTRES__INTEROP.html#group__CUDA__EXTRES__INTEROP#group__CUDA__EXTRES__INTEROP_1g7f13444973542fa50b7e75bcfb2f923d\">Full Description</a>"
	},
	"cuExternalMemoryGetMappedBuffer":{
		"id": "cuExternalMemoryGetMappedBuffer",
		"value": "<p><b><code>CUresult cuExternalMemoryGetMappedBuffer ( CUdeviceptr* devPtr, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_BUFFER_DESC* bufferDesc )</code></b></p>",
		"description": "<p>Maps a buffer onto an imported memory object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>devPtr</code><br>&emsp;- Returned device pointer to buffer<br><code>extMem</code><br>&emsp;- Handle to external memory object<br><code>bufferDesc</code><br>&emsp;- Buffer descriptor<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXTRES__INTEROP.html#group__CUDA__EXTRES__INTEROP#group__CUDA__EXTRES__INTEROP_1gb9fec33920400c70961b4e33d838da91\">Full Description</a>"
	},
	"cuExternalMemoryGetMappedMipmappedArray":{
		"id": "cuExternalMemoryGetMappedMipmappedArray",
		"value": "<p><b><code>CUresult cuExternalMemoryGetMappedMipmappedArray ( CUmipmappedArray* mipmap, CUexternalMemory extMem, const CUDA_EXTERNAL_MEMORY_MIPMAPPED_ARRAY_DESC* mipmapDesc )</code></b></p>",
		"description": "<p>Maps a CUDA mipmapped array onto an external memory object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>mipmap</code><br>&emsp;- Returned CUDA mipmapped array<br><code>extMem</code><br>&emsp;- Handle to external memory object<br><code>mipmapDesc</code><br>&emsp;- CUDA array descriptor<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXTRES__INTEROP.html#group__CUDA__EXTRES__INTEROP#group__CUDA__EXTRES__INTEROP_1g02debbfa1b997e4f0e05300a312c17cc\">Full Description</a>"
	},
	"cuImportExternalMemory":{
		"id": "cuImportExternalMemory",
		"value": "<p><b><code>CUresult cuImportExternalMemory ( CUexternalMemory* extMem_out, const CUDA_EXTERNAL_MEMORY_HANDLE_DESC* memHandleDesc )</code></b></p>",
		"description": "<p>Imports an external memory object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extMem_out</code><br>&emsp;- Returned handle to an external memory object<br><code>memHandleDesc</code><br>&emsp;- Memory import handle descriptor<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OPERATING_SYSTEM<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXTRES__INTEROP.html#group__CUDA__EXTRES__INTEROP#group__CUDA__EXTRES__INTEROP_1g52aba3a7f780157d8ba12972b2481735\">Full Description</a>"
	},
	"cuImportExternalSemaphore":{
		"id": "cuImportExternalSemaphore",
		"value": "<p><b><code>CUresult cuImportExternalSemaphore ( CUexternalSemaphore* extSem_out, const CUDA_EXTERNAL_SEMAPHORE_HANDLE_DESC* semHandleDesc )</code></b></p>",
		"description": "<p>Imports an external semaphore.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extSem_out</code><br>&emsp;- Returned handle to an external semaphore<br><code>semHandleDesc</code><br>&emsp;- Semaphore import handle descriptor<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OPERATING_SYSTEM<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXTRES__INTEROP.html#group__CUDA__EXTRES__INTEROP#group__CUDA__EXTRES__INTEROP_1ge593134f5f9650474af74db644c4a326\">Full Description</a>"
	},
	"cuSignalExternalSemaphoresAsync":{
		"id": "cuSignalExternalSemaphoresAsync",
		"value": "<p><b><code>CUresult cuSignalExternalSemaphoresAsync ( const CUexternalSemaphore* extSemArray, const CUDA_EXTERNAL_SEMAPHORE_SIGNAL_PARAMS* paramsArray, unsigned int numExtSems, CUstream stream )</code></b></p>",
		"description": "<p>Signals a set of external semaphore objects.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extSemArray</code><br>&emsp;- Set of external semaphores to be signaled<br><code>paramsArray</code><br>&emsp;- Array of semaphore parameters<br><code>numExtSems</code><br>&emsp;- Number of semaphores to signal<br><code>stream</code><br>&emsp;- Stream to enqueue the signal operations in<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXTRES__INTEROP.html#group__CUDA__EXTRES__INTEROP#group__CUDA__EXTRES__INTEROP_1g86cd6c4b3f439ba786f4e65d1b8107c3\">Full Description</a>"
	},
	"cuWaitExternalSemaphoresAsync":{
		"id": "cuWaitExternalSemaphoresAsync",
		"value": "<p><b><code>CUresult cuWaitExternalSemaphoresAsync ( const CUexternalSemaphore* extSemArray, const CUDA_EXTERNAL_SEMAPHORE_WAIT_PARAMS* paramsArray, unsigned int numExtSems, CUstream stream )</code></b></p>",
		"description": "<p>Waits on a set of external semaphore objects.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>extSemArray</code><br>&emsp;- External semaphores to be waited on<br><code>paramsArray</code><br>&emsp;- Array of semaphore parameters<br><code>numExtSems</code><br>&emsp;- Number of semaphores to wait on<br><code>stream</code><br>&emsp;- Stream to enqueue the wait operations in<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_TIMEOUT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXTRES__INTEROP.html#group__CUDA__EXTRES__INTEROP#group__CUDA__EXTRES__INTEROP_1g063f01a524818ac89bacf521c55a39f0\">Full Description</a>"
	},
	"cuStreamBatchMemOp":{
		"id": "cuStreamBatchMemOp",
		"value": "<p><b><code>CUresult cuStreamBatchMemOp ( CUstream stream, unsigned int count, CUstreamBatchMemOpParams* paramArray, unsigned int flags )</code></b></p>",
		"description": "<p>Batch operations to synchronize the stream via memory operations.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;The stream to enqueue the operations in.<br><code>count</code><br>&emsp;The number of operations in the array. Must be less than 256.<br><code>paramArray</code><br>&emsp;The types and parameters of the individual operations.<br><code>flags</code><br>&emsp;Reserved for future expansion; must be 0.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEMOP.html#group__CUDA__MEMOP#group__CUDA__MEMOP_1g764c442de9b671f9dec856e8ae531ed1\">Full Description</a>"
	},
	"cuStreamWaitValue32":{
		"id": "cuStreamWaitValue32",
		"value": "<p><b><code>CUresult cuStreamWaitValue32 ( CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags )</code></b></p>",
		"description": "<p>Wait on a memory location.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;The stream to synchronize on the memory location.<br><code>addr</code><br>&emsp;The memory location to wait on.<br><code>value</code><br>&emsp;The value to compare with the memory location.<br><code>flags</code><br>&emsp;See CUstreamWaitValue_flags.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEMOP.html#group__CUDA__MEMOP#group__CUDA__MEMOP_1g629856339de7bc6606047385addbb398\">Full Description</a>"
	},
	"cuStreamWaitValue64":{
		"id": "cuStreamWaitValue64",
		"value": "<p><b><code>CUresult cuStreamWaitValue64 ( CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned int flags )</code></b></p>",
		"description": "<p>Wait on a memory location.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;The stream to synchronize on the memory location.<br><code>addr</code><br>&emsp;The memory location to wait on.<br><code>value</code><br>&emsp;The value to compare with the memory location.<br><code>flags</code><br>&emsp;See CUstreamWaitValue_flags.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEMOP.html#group__CUDA__MEMOP#group__CUDA__MEMOP_1g6910c1258c5f15aa5d699f0fd60d6933\">Full Description</a>"
	},
	"cuStreamWriteValue32":{
		"id": "cuStreamWriteValue32",
		"value": "<p><b><code>CUresult cuStreamWriteValue32 ( CUstream stream, CUdeviceptr addr, cuuint32_t value, unsigned int flags )</code></b></p>",
		"description": "<p>Write a value to memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;The stream to do the write in.<br><code>addr</code><br>&emsp;The device address to write to.<br><code>value</code><br>&emsp;The value to write.<br><code>flags</code><br>&emsp;See CUstreamWriteValue_flags.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEMOP.html#group__CUDA__MEMOP#group__CUDA__MEMOP_1g091455366d56dc2f1f69726aafa369b0\">Full Description</a>"
	},
	"cuStreamWriteValue64":{
		"id": "cuStreamWriteValue64",
		"value": "<p><b><code>CUresult cuStreamWriteValue64 ( CUstream stream, CUdeviceptr addr, cuuint64_t value, unsigned int flags )</code></b></p>",
		"description": "<p>Write a value to memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>stream</code><br>&emsp;The stream to do the write in.<br><code>addr</code><br>&emsp;The device address to write to.<br><code>value</code><br>&emsp;The value to write.<br><code>flags</code><br>&emsp;See CUstreamWriteValue_flags.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__MEMOP.html#group__CUDA__MEMOP#group__CUDA__MEMOP_1gc8af1e8b96d7561840affd5217dd6830\">Full Description</a>"
	},
	"cuFuncGetAttribute":{
		"id": "cuFuncGetAttribute",
		"value": "<p><b><code>CUresult cuFuncGetAttribute ( int* pi, CUfunction_attribute attrib, CUfunction hfunc )</code></b></p>",
		"description": "<p>Returns information about a function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pi</code><br>&emsp;- Returned attribute value<br><code>attrib</code><br>&emsp;- Attribute requested<br><code>hfunc</code><br>&emsp;- Function to query attribute of<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1g5e92a1b0d8d1b82cb00dcfb2de15961b\">Full Description</a>"
	},
	"cuFuncGetModule":{
		"id": "cuFuncGetModule",
		"value": "<p><b><code>CUresult cuFuncGetModule ( CUmodule* hmod, CUfunction hfunc )</code></b></p>",
		"description": "<p>Returns a module handle.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hmod</code><br>&emsp;- Returned module handle<br><code>hfunc</code><br>&emsp;- Function to retrieve module for<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1g58f0fd1db9dadd3870440662622a27ef\">Full Description</a>"
	},
	"cuFuncSetAttribute":{
		"id": "cuFuncSetAttribute",
		"value": "<p><b><code>CUresult cuFuncSetAttribute ( CUfunction hfunc, CUfunction_attribute attrib, int value )</code></b></p>",
		"description": "<p>Sets information about a function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Function to query attribute of<br><code>attrib</code><br>&emsp;- Attribute requested<br><code>value</code><br>&emsp;- The value to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1g0e37dce0173bc883aa1e5b14dd747f26\">Full Description</a>"
	},
	"cuFuncSetCacheConfig":{
		"id": "cuFuncSetCacheConfig",
		"value": "<p><b><code>CUresult cuFuncSetCacheConfig ( CUfunction hfunc, CUfunc_cache config )</code></b></p>",
		"description": "<p>Sets the preferred cache configuration for a device function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Kernel to configure cache for<br><code>config</code><br>&emsp;- Requested cache configuration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1g40f8c11e81def95dc0072a375f965681\">Full Description</a>"
	},
	"cuFuncSetSharedMemConfig":{
		"id": "cuFuncSetSharedMemConfig",
		"value": "<p><b><code>CUresult cuFuncSetSharedMemConfig ( CUfunction hfunc, CUsharedconfig config )</code></b></p>",
		"description": "<p>Sets the shared memory configuration for a device function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- kernel to be given a shared memory config<br><code>config</code><br>&emsp;- requested shared memory configuration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1g430b913f24970e63869635395df6d9f5\">Full Description</a>"
	},
	"cuLaunchCooperativeKernel":{
		"id": "cuLaunchCooperativeKernel",
		"value": "<p><b><code>CUresult cuLaunchCooperativeKernel ( CUfunction f, unsigned int gridDimX, unsigned int gridDimY, unsigned int gridDimZ, unsigned int blockDimX, unsigned int blockDimY, unsigned int blockDimZ, unsigned int sharedMemBytes, CUstream hStream, void** kernelParams )</code></b></p>",
		"description": "<p>Launches a CUDA function CUfunction or a CUDA kernel CUkernel where thread blocks can cooperate and synchronize as they execute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>f</code><br>&emsp;- Function CUfunction or Kernel CUkernel to launch<br><code>gridDimX</code><br>&emsp;- Width of grid in blocks<br><code>gridDimY</code><br>&emsp;- Height of grid in blocks<br><code>gridDimZ</code><br>&emsp;- Depth of grid in blocks<br><code>blockDimX</code><br>&emsp;- X dimension of each thread block<br><code>blockDimY</code><br>&emsp;- Y dimension of each thread block<br><code>blockDimZ</code><br>&emsp;- Z dimension of each thread block<br><code>sharedMemBytes</code><br>&emsp;- Dynamic shared-memory size per thread block in bytes<br><code>hStream</code><br>&emsp;- Stream identifier<br><code>kernelParams</code><br>&emsp;- Array of pointers to kernel parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_IMAGE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_LAUNCH_FAILED, CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, CUDA_ERROR_LAUNCH_TIMEOUT, CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, CUDA_ERROR_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1g06d753134145c4584c0c62525c1894cb\">Full Description</a>"
	},
	"cuLaunchCooperativeKernelMultiDevice":{
		"id": "cuLaunchCooperativeKernelMultiDevice",
		"value": "<p><b><code>CUresult cuLaunchCooperativeKernelMultiDevice ( CUDA_LAUNCH_PARAMS* launchParamsList, unsigned int numDevices, unsigned int flags )</code></b></p>",
		"description": "<p>Launches CUDA functions on multiple devices where thread blocks can cooperate and synchronize as they execute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>launchParamsList</code><br>&emsp;- List of launch parameters, one per device<br><code>numDevices</code><br>&emsp;- Size of the launchParamsList array<br><code>flags</code><br>&emsp;- Flags to control launch behavior<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_IMAGE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_LAUNCH_FAILED, CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, CUDA_ERROR_LAUNCH_TIMEOUT, CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1g1d34025bc4f8fcec82fbcfc18d07a6e2\">Full Description</a>"
	},
	"cuLaunchHostFunc":{
		"id": "cuLaunchHostFunc",
		"value": "<p><b><code>CUresult cuLaunchHostFunc ( CUstream hStream, CUhostFn fn, void* userData )</code></b></p>",
		"description": "<p>Enqueues a host function call in a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hStream</code><br>&emsp;- Stream to enqueue function call in<br><code>fn</code><br>&emsp;- The function to call once preceding stream operations are complete<br><code>userData</code><br>&emsp;- User-specified data to be passed to the function<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1gab95a78143bae7f21eebb978f91e7f3f\">Full Description</a>"
	},
	"cuLaunchKernel":{
		"id": "cuLaunchKernel",
		"value": "<p><b><code>CUresult cuLaunchKernel ( CUfunction f, unsigned int gridDimX, unsigned int gridDimY, unsigned int gridDimZ, unsigned int blockDimX, unsigned int blockDimY, unsigned int blockDimZ, unsigned int sharedMemBytes, CUstream hStream, void** kernelParams, void** extra )</code></b></p>",
		"description": "<p>Launches a CUDA function CUfunction or a CUDA kernel CUkernel.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>f</code><br>&emsp;- Function CUfunction or Kernel CUkernel to launch<br><code>gridDimX</code><br>&emsp;- Width of grid in blocks<br><code>gridDimY</code><br>&emsp;- Height of grid in blocks<br><code>gridDimZ</code><br>&emsp;- Depth of grid in blocks<br><code>blockDimX</code><br>&emsp;- X dimension of each thread block<br><code>blockDimY</code><br>&emsp;- Y dimension of each thread block<br><code>blockDimZ</code><br>&emsp;- Z dimension of each thread block<br><code>sharedMemBytes</code><br>&emsp;- Dynamic shared-memory size per thread block in bytes<br><code>hStream</code><br>&emsp;- Stream identifier<br><code>kernelParams</code><br>&emsp;- Array of pointers to kernel parameters<br><code>extra</code><br>&emsp;- Extra options<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_IMAGE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_LAUNCH_FAILED, CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, CUDA_ERROR_LAUNCH_TIMEOUT, CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, CUDA_ERROR_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1gb8f3dc3031b40da29d5f9a7139e52e15\">Full Description</a>"
	},
	"cuLaunchKernelEx":{
		"id": "cuLaunchKernelEx",
		"value": "<p><b><code>CUresult cuLaunchKernelEx ( const CUlaunchConfig* config, CUfunction f, void** kernelParams, void** extra )</code></b></p>",
		"description": "<p>Launches a CUDA function CUfunction or a CUDA kernel CUkernel with launch-time configuration.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>config</code><br>&emsp;- Config to launch<br><code>f</code><br>&emsp;- Function CUfunction or Kernel CUkernel to launch<br><code>kernelParams</code><br>&emsp;- Array of pointers to kernel parameters<br><code>extra</code><br>&emsp;- Extra options<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_IMAGE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_LAUNCH_FAILED, CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, CUDA_ERROR_LAUNCH_TIMEOUT, CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, CUDA_ERROR_COOPERATIVE_LAUNCH_TOO_LARGE, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED, CUDA_ERROR_NOT_FOUND<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC.html#group__CUDA__EXEC#group__CUDA__EXEC_1gb9c891eb6bb8f4089758e64c9c976db9\">Full Description</a>"
	},
	"cuFuncSetBlockShape":{
		"id": "cuFuncSetBlockShape",
		"value": "<p><b><code>CUresult cuFuncSetBlockShape ( CUfunction hfunc, int x, int y, int z )</code></b></p>",
		"description": "<p>Sets the block-dimensions for the function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Kernel to specify dimensions of<br><code>x</code><br>&emsp;- X dimension<br><code>y</code><br>&emsp;- Y dimension<br><code>z</code><br>&emsp;- Z dimension<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1gd98ab7e00740f68145972deb6ddab271\">Full Description</a>"
	},
	"cuFuncSetSharedSize":{
		"id": "cuFuncSetSharedSize",
		"value": "<p><b><code>CUresult cuFuncSetSharedSize ( CUfunction hfunc, unsigned int bytes )</code></b></p>",
		"description": "<p>Sets the dynamic shared-memory size for the function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Kernel to specify dynamic shared-memory size for<br><code>bytes</code><br>&emsp;- Dynamic shared-memory size per thread in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1g9b5a3f121142f7b42aea48366c72bf8b\">Full Description</a>"
	},
	"cuLaunch":{
		"id": "cuLaunch",
		"value": "<p><b><code>CUresult cuLaunch ( CUfunction f )</code></b></p>",
		"description": "<p>Launches a CUDA function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>f</code><br>&emsp;- Kernel to launch<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_LAUNCH_FAILED, CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, CUDA_ERROR_LAUNCH_TIMEOUT, CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1gea7bd80835bcce59c73247120766f6ff\">Full Description</a>"
	},
	"cuLaunchGrid":{
		"id": "cuLaunchGrid",
		"value": "<p><b><code>CUresult cuLaunchGrid ( CUfunction f, int grid_width, int grid_height )</code></b></p>",
		"description": "<p>Launches a CUDA function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>f</code><br>&emsp;- Kernel to launch<br><code>grid_width</code><br>&emsp;- Width of grid in blocks<br><code>grid_height</code><br>&emsp;- Height of grid in blocks<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_LAUNCH_FAILED, CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, CUDA_ERROR_LAUNCH_TIMEOUT, CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1g0676b0afb5d5c63aa46801788e3d8ca5\">Full Description</a>"
	},
	"cuLaunchGridAsync":{
		"id": "cuLaunchGridAsync",
		"value": "<p><b><code>CUresult cuLaunchGridAsync ( CUfunction f, int grid_width, int grid_height, CUstream hStream )</code></b></p>",
		"description": "<p>Launches a CUDA function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>f</code><br>&emsp;- Kernel to launch<br><code>grid_width</code><br>&emsp;- Width of grid in blocks<br><code>grid_height</code><br>&emsp;- Height of grid in blocks<br><code>hStream</code><br>&emsp;- Stream identifier<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_LAUNCH_FAILED, CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES, CUDA_ERROR_LAUNCH_TIMEOUT, CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING, CUDA_ERROR_SHARED_OBJECT_INIT_FAILED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1gb0292382e6b0d059263acd2574aaf00b\">Full Description</a>"
	},
	"cuParamSetSize":{
		"id": "cuParamSetSize",
		"value": "<p><b><code>CUresult cuParamSetSize ( CUfunction hfunc, unsigned int numbytes )</code></b></p>",
		"description": "<p>Sets the parameter size for the function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Kernel to set parameter size for<br><code>numbytes</code><br>&emsp;- Size of parameter list in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1gf6896c37762d695f5d161ee56cf86e62\">Full Description</a>"
	},
	"cuParamSetTexRef":{
		"id": "cuParamSetTexRef",
		"value": "<p><b><code>CUresult cuParamSetTexRef ( CUfunction hfunc, int texunit, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Adds a texture-reference to the function's argument list.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Kernel to add texture-reference to<br><code>texunit</code><br>&emsp;- Texture unit (must be CU_PARAM_TR_DEFAULT)<br><code>hTexRef</code><br>&emsp;- Texture-reference to add to argument list<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1g10fad4a11f4f6d0422f4929ff348fce5\">Full Description</a>"
	},
	"cuParamSetf":{
		"id": "cuParamSetf",
		"value": "<p><b><code>CUresult cuParamSetf ( CUfunction hfunc, int offset, float value )</code></b></p>",
		"description": "<p>Adds a floating-point parameter to the function's argument list.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Kernel to add parameter to<br><code>offset</code><br>&emsp;- Offset to add parameter to argument list<br><code>value</code><br>&emsp;- Value of parameter<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1gd5e7679999e3792203d477abad2958c5\">Full Description</a>"
	},
	"cuParamSeti":{
		"id": "cuParamSeti",
		"value": "<p><b><code>CUresult cuParamSeti ( CUfunction hfunc, int offset, unsigned int value )</code></b></p>",
		"description": "<p>Adds an integer parameter to the function's argument list.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Kernel to add parameter to<br><code>offset</code><br>&emsp;- Offset to add parameter to argument list<br><code>value</code><br>&emsp;- Value of parameter<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1g07f1264a68f97f582353b0f5dd9ebd5c\">Full Description</a>"
	},
	"cuParamSetv":{
		"id": "cuParamSetv",
		"value": "<p><b><code>CUresult cuParamSetv ( CUfunction hfunc, int offset, void* ptr, unsigned int numbytes )</code></b></p>",
		"description": "<p>Adds arbitrary data to the function's argument list.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hfunc</code><br>&emsp;- Kernel to add data to<br><code>offset</code><br>&emsp;- Offset to add data to argument list<br><code>ptr</code><br>&emsp;- Pointer to arbitrary data<br><code>numbytes</code><br>&emsp;- Size of data to copy in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EXEC__DEPRECATED.html#group__CUDA__EXEC__DEPRECATED#group__CUDA__EXEC__DEPRECATED_1g24e5ceee66d1a84609b74e77672638b6\">Full Description</a>"
	},
	"cuDeviceGetGraphMemAttribute":{
		"id": "cuDeviceGetGraphMemAttribute",
		"value": "<p><b><code>CUresult cuDeviceGetGraphMemAttribute ( CUdevice device, CUgraphMem_attribute attr, void* value )</code></b></p>",
		"description": "<p>Query asynchronous allocation attributes related to graphs.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Specifies the scope of the query<br><code>attr</code><br>&emsp;- attribute to get<br><code>value</code><br>&emsp;- retrieved value<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g359903c2447ac22b4e1a0dce26adfef5\">Full Description</a>"
	},
	"cuDeviceGraphMemTrim":{
		"id": "cuDeviceGraphMemTrim",
		"value": "<p><b><code>CUresult cuDeviceGraphMemTrim ( CUdevice device )</code></b></p>",
		"description": "<p>Free unused memory that was cached on the specified device for use with graphs back to the OS.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- The device for which cached memory should be freed.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g57c87f4ba6af41825627cdd4e5a8c52b\">Full Description</a>"
	},
	"cuDeviceSetGraphMemAttribute":{
		"id": "cuDeviceSetGraphMemAttribute",
		"value": "<p><b><code>CUresult cuDeviceSetGraphMemAttribute ( CUdevice device, CUgraphMem_attribute attr, void* value )</code></b></p>",
		"description": "<p>Set asynchronous allocation attributes related to graphs.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>device</code><br>&emsp;- Specifies the scope of the query<br><code>attr</code><br>&emsp;- attribute to get<br><code>value</code><br>&emsp;- pointer to value to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g064bd5c6a773b83d145c281ebf5dbe34\">Full Description</a>"
	},
	"cuGraphAddBatchMemOpNode":{
		"id": "cuGraphAddBatchMemOpNode",
		"value": "<p><b><code>CUresult cuGraphAddBatchMemOpNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, const CUDA_BATCH_MEM_OP_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Creates a batch memory operation node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>nodeParams</code><br>&emsp;- Parameters for the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g5acb6914dbd18cb1ae15ea9437a73c96\">Full Description</a>"
	},
	"cuGraphAddChildGraphNode":{
		"id": "cuGraphAddChildGraphNode",
		"value": "<p><b><code>CUresult cuGraphAddChildGraphNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, CUgraph childGraph )</code></b></p>",
		"description": "<p>Creates a child graph node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>childGraph</code><br>&emsp;- The graph to clone into this node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gde52afbcf91a8c79d4d7efbe0e3b6844\">Full Description</a>"
	},
	"cuGraphAddDependencies":{
		"id": "cuGraphAddDependencies",
		"value": "<p><b><code>CUresult cuGraphAddDependencies ( CUgraph hGraph, const CUgraphNode* from, const CUgraphNode* to, size_t numDependencies )</code></b></p>",
		"description": "<p>Adds dependency edges to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraph</code><br>&emsp;- Graph to which dependencies are added<br><code>from</code><br>&emsp;- Array of nodes that provide the dependencies<br><code>to</code><br>&emsp;- Array of dependent nodes<br><code>numDependencies</code><br>&emsp;- Number of dependencies to be added<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gd1c190c2cc61352904062c3f8b6106c8\">Full Description</a>"
	},
	"cuGraphAddEmptyNode":{
		"id": "cuGraphAddEmptyNode",
		"value": "<p><b><code>CUresult cuGraphAddEmptyNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies )</code></b></p>",
		"description": "<p>Creates an empty node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g14b625984430cb2d574c63f29c9b9223\">Full Description</a>"
	},
	"cuGraphAddEventRecordNode":{
		"id": "cuGraphAddEventRecordNode",
		"value": "<p><b><code>CUresult cuGraphAddEventRecordNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, CUevent event )</code></b></p>",
		"description": "<p>Creates an event record node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>event</code><br>&emsp;- Event for the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ga7f6dcb109f4b7470ce6b067d39974a4\">Full Description</a>"
	},
	"cuGraphAddEventWaitNode":{
		"id": "cuGraphAddEventWaitNode",
		"value": "<p><b><code>CUresult cuGraphAddEventWaitNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, CUevent event )</code></b></p>",
		"description": "<p>Creates an event wait node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>event</code><br>&emsp;- Event for the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g7306f3bcbec3406d80e110cd13405c5e\">Full Description</a>"
	},
	"cuGraphAddExternalSemaphoresSignalNode":{
		"id": "cuGraphAddExternalSemaphoresSignalNode",
		"value": "<p><b><code>CUresult cuGraphAddExternalSemaphoresSignalNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Creates an external semaphore signal node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>nodeParams</code><br>&emsp;- Parameters for the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g6410d5401de205568457fba5e1862ad3\">Full Description</a>"
	},
	"cuGraphAddExternalSemaphoresWaitNode":{
		"id": "cuGraphAddExternalSemaphoresWaitNode",
		"value": "<p><b><code>CUresult cuGraphAddExternalSemaphoresWaitNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, const CUDA_EXT_SEM_WAIT_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Creates an external semaphore wait node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>nodeParams</code><br>&emsp;- Parameters for the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g49131c65fcef0b60b3939e008f7b467e\">Full Description</a>"
	},
	"cuGraphAddHostNode":{
		"id": "cuGraphAddHostNode",
		"value": "<p><b><code>CUresult cuGraphAddHostNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, const CUDA_HOST_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Creates a host execution node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>nodeParams</code><br>&emsp;- Parameters for the host node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g0809d65e85a3c052296373954a05b1d6\">Full Description</a>"
	},
	"cuGraphAddKernelNode":{
		"id": "cuGraphAddKernelNode",
		"value": "<p><b><code>CUresult cuGraphAddKernelNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, const CUDA_KERNEL_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Creates a kernel execution node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>nodeParams</code><br>&emsp;- Parameters for the GPU execution node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g50d871e3bd06c1b835e52f2966ef366b\">Full Description</a>"
	},
	"cuGraphAddMemAllocNode":{
		"id": "cuGraphAddMemAllocNode",
		"value": "<p><b><code>CUresult cuGraphAddMemAllocNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, CUDA_MEM_ALLOC_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Creates an allocation node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>nodeParams</code><br>&emsp;- Parameters for the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g73a351cb71b2945a0bcb913a93f69ec9\">Full Description</a>"
	},
	"cuGraphAddMemFreeNode":{
		"id": "cuGraphAddMemFreeNode",
		"value": "<p><b><code>CUresult cuGraphAddMemFreeNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, CUdeviceptr dptr )</code></b></p>",
		"description": "<p>Creates a memory free node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>dptr</code><br>&emsp;- Address of memory to free<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NOT_SUPPORTED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1geb7cdce5d9be2d28d9428e74eb00fa53\">Full Description</a>"
	},
	"cuGraphAddMemcpyNode":{
		"id": "cuGraphAddMemcpyNode",
		"value": "<p><b><code>CUresult cuGraphAddMemcpyNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, const CUDA_MEMCPY3D* copyParams, CUcontext ctx )</code></b></p>",
		"description": "<p>Creates a memcpy node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>copyParams</code><br>&emsp;- Parameters for the memory copy<br><code>ctx</code><br>&emsp;- Context on which to run the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g674da6ab54a677f13e0e0e8206ff5073\">Full Description</a>"
	},
	"cuGraphAddMemsetNode":{
		"id": "cuGraphAddMemsetNode",
		"value": "<p><b><code>CUresult cuGraphAddMemsetNode ( CUgraphNode* phGraphNode, CUgraph hGraph, const CUgraphNode* dependencies, size_t numDependencies, const CUDA_MEMSET_NODE_PARAMS* memsetParams, CUcontext ctx )</code></b></p>",
		"description": "<p>Creates a memset node and adds it to a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphNode</code><br>&emsp;- Returns newly created node<br><code>hGraph</code><br>&emsp;- Graph to which to add the node<br><code>dependencies</code><br>&emsp;- Dependencies of the node<br><code>numDependencies</code><br>&emsp;- Number of dependencies<br><code>memsetParams</code><br>&emsp;- Parameters for the memory set<br><code>ctx</code><br>&emsp;- Context on which to run the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g89dc8fc3743392777c0daa2c4aca40d3\">Full Description</a>"
	},
	"cuGraphBatchMemOpNodeGetParams":{
		"id": "cuGraphBatchMemOpNodeGetParams",
		"value": "<p><b><code>CUresult cuGraphBatchMemOpNodeGetParams ( CUgraphNode hNode, CUDA_BATCH_MEM_OP_NODE_PARAMS* nodeParams_out )</code></b></p>",
		"description": "<p>Returns a batch mem op node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>nodeParams_out</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g1d8039468b71285c61bc03ab3c302a28\">Full Description</a>"
	},
	"cuGraphBatchMemOpNodeSetParams":{
		"id": "cuGraphBatchMemOpNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphBatchMemOpNodeSetParams ( CUgraphNode hNode, const CUDA_BATCH_MEM_OP_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets a batch mem op node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the parameters for<br><code>nodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g625ca946b58df3d17221ff7db5cd7800\">Full Description</a>"
	},
	"cuGraphChildGraphNodeGetGraph":{
		"id": "cuGraphChildGraphNodeGetGraph",
		"value": "<p><b><code>CUresult cuGraphChildGraphNodeGetGraph ( CUgraphNode hNode, CUgraph* phGraph )</code></b></p>",
		"description": "<p>Gets a handle to the embedded graph of a child graph node.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the embedded graph for<br><code>phGraph</code><br>&emsp;- Location to store a handle to the graph<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gbe9fc9267316b3778ef0db507917b4fd\">Full Description</a>"
	},
	"cuGraphClone":{
		"id": "cuGraphClone",
		"value": "<p><b><code>CUresult cuGraphClone ( CUgraph* phGraphClone, CUgraph originalGraph )</code></b></p>",
		"description": "<p>Clones a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphClone</code><br>&emsp;- Returns newly created cloned graph<br><code>originalGraph</code><br>&emsp;- Graph to clone<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g3603974654e463f2231c71d9b9d1517e\">Full Description</a>"
	},
	"cuGraphCreate":{
		"id": "cuGraphCreate",
		"value": "<p><b><code>CUresult cuGraphCreate ( CUgraph* phGraph, unsigned int flags )</code></b></p>",
		"description": "<p>Creates a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraph</code><br>&emsp;- Returns newly created graph<br><code>flags</code><br>&emsp;- Graph creation flags, must be 0<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gd885f719186010727b75c3315f865fdf\">Full Description</a>"
	},
	"cuGraphDebugDotPrint":{
		"id": "cuGraphDebugDotPrint",
		"value": "<p><b><code>CUresult cuGraphDebugDotPrint ( CUgraph hGraph, const char* path, unsigned int flags )</code></b></p>",
		"description": "<p>Write a DOT file describing graph structure.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraph</code><br>&emsp;- The graph to create a DOT file from<br><code>path</code><br>&emsp;- The path to write the DOT file to<br><code>flags</code><br>&emsp;- Flags from CUgraphDebugDot_flags for specifying which additional node information to write<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OPERATING_SYSTEM<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g0fb0c4d319477a0a98da005fcb0dacc4\">Full Description</a>"
	},
	"cuGraphDestroy":{
		"id": "cuGraphDestroy",
		"value": "<p><b><code>CUresult cuGraphDestroy ( CUgraph hGraph )</code></b></p>",
		"description": "<p>Destroys a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraph</code><br>&emsp;- Graph to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g718cfd9681f078693d4be2426fd689c8\">Full Description</a>"
	},
	"cuGraphDestroyNode":{
		"id": "cuGraphDestroyNode",
		"value": "<p><b><code>CUresult cuGraphDestroyNode ( CUgraphNode hNode )</code></b></p>",
		"description": "<p>Remove a node from the graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to remove<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g00ed16434d983d8f0011683eacaf19b9\">Full Description</a>"
	},
	"cuGraphEventRecordNodeGetEvent":{
		"id": "cuGraphEventRecordNodeGetEvent",
		"value": "<p><b><code>CUresult cuGraphEventRecordNodeGetEvent ( CUgraphNode hNode, CUevent* event_out )</code></b></p>",
		"description": "<p>Returns the event associated with an event record node.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the event for<br><code>event_out</code><br>&emsp;- Pointer to return the event<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gb3608efc284aa2bbe5db61826d6e2259\">Full Description</a>"
	},
	"cuGraphEventRecordNodeSetEvent":{
		"id": "cuGraphEventRecordNodeSetEvent",
		"value": "<p><b><code>CUresult cuGraphEventRecordNodeSetEvent ( CUgraphNode hNode, CUevent event )</code></b></p>",
		"description": "<p>Sets an event record node's event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the event for<br><code>event</code><br>&emsp;- Event to use<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g8ad8006aa7865865bf4d8c475cb21d87\">Full Description</a>"
	},
	"cuGraphEventWaitNodeGetEvent":{
		"id": "cuGraphEventWaitNodeGetEvent",
		"value": "<p><b><code>CUresult cuGraphEventWaitNodeGetEvent ( CUgraphNode hNode, CUevent* event_out )</code></b></p>",
		"description": "<p>Returns the event associated with an event wait node.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the event for<br><code>event_out</code><br>&emsp;- Pointer to return the event<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g90b9d60f3f5f4156d1351a96ce92846e\">Full Description</a>"
	},
	"cuGraphEventWaitNodeSetEvent":{
		"id": "cuGraphEventWaitNodeSetEvent",
		"value": "<p><b><code>CUresult cuGraphEventWaitNodeSetEvent ( CUgraphNode hNode, CUevent event )</code></b></p>",
		"description": "<p>Sets an event wait node's event.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the event for<br><code>event</code><br>&emsp;- Event to use<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g2d6730d63efd399d3000952c54134930\">Full Description</a>"
	},
	"cuGraphExecBatchMemOpNodeSetParams":{
		"id": "cuGraphExecBatchMemOpNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExecBatchMemOpNodeSetParams ( CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_BATCH_MEM_OP_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for a batch mem op node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Batch mem op node from the graph from which graphExec was instantiated<br><code>nodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g23f51bb4e4c029bb32fac0146e38c076\">Full Description</a>"
	},
	"cuGraphExecChildGraphNodeSetParams":{
		"id": "cuGraphExecChildGraphNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExecChildGraphNodeSetParams ( CUgraphExec hGraphExec, CUgraphNode hNode, CUgraph childGraph )</code></b></p>",
		"description": "<p>Updates node parameters in the child graph node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Host node from the graph which was used to instantiate graphExec<br><code>childGraph</code><br>&emsp;- The graph supplying the updated parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g8f2d9893f6b899f992db1a2942ec03ff\">Full Description</a>"
	},
	"cuGraphExecDestroy":{
		"id": "cuGraphExecDestroy",
		"value": "<p><b><code>CUresult cuGraphExecDestroy ( CUgraphExec hGraphExec )</code></b></p>",
		"description": "<p>Destroys an executable graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- Executable graph to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ga32ad4944cc5d408158207c978bc43a7\">Full Description</a>"
	},
	"cuGraphExecEventRecordNodeSetEvent":{
		"id": "cuGraphExecEventRecordNodeSetEvent",
		"value": "<p><b><code>CUresult cuGraphExecEventRecordNodeSetEvent ( CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event )</code></b></p>",
		"description": "<p>Sets the event for an event record node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- event record node from the graph from which graphExec was instantiated<br><code>event</code><br>&emsp;- Updated event to use<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g62fea841fdc169c3ef18e9199f28a6a7\">Full Description</a>"
	},
	"cuGraphExecEventWaitNodeSetEvent":{
		"id": "cuGraphExecEventWaitNodeSetEvent",
		"value": "<p><b><code>CUresult cuGraphExecEventWaitNodeSetEvent ( CUgraphExec hGraphExec, CUgraphNode hNode, CUevent event )</code></b></p>",
		"description": "<p>Sets the event for an event wait node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- event wait node from the graph from which graphExec was instantiated<br><code>event</code><br>&emsp;- Updated event to use<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gfea9619d6ff228401613febae793f996\">Full Description</a>"
	},
	"cuGraphExecExternalSemaphoresSignalNodeSetParams":{
		"id": "cuGraphExecExternalSemaphoresSignalNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExecExternalSemaphoresSignalNodeSetParams ( CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for an external semaphore signal node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- semaphore signal node from the graph from which graphExec was instantiated<br><code>nodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g96aedf2977d0dce275fa3b3cf3700ade\">Full Description</a>"
	},
	"cuGraphExecExternalSemaphoresWaitNodeSetParams":{
		"id": "cuGraphExecExternalSemaphoresWaitNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExecExternalSemaphoresWaitNodeSetParams ( CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for an external semaphore wait node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- semaphore wait node from the graph from which graphExec was instantiated<br><code>nodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g98a93c41b057cc1b48c0498811f65ad3\">Full Description</a>"
	},
	"cuGraphExecGetFlags":{
		"id": "cuGraphExecGetFlags",
		"value": "<p><b><code>CUresult cuGraphExecGetFlags ( CUgraphExec hGraphExec, cuuint64_t* flags )</code></b></p>",
		"description": "<p>Query the instantiation flags of an executable graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph to query<br><code>flags</code><br>&emsp;- Returns the instantiation flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g5004de43ce63398a1a7d7a57edf17d9a\">Full Description</a>"
	},
	"cuGraphExecHostNodeSetParams":{
		"id": "cuGraphExecHostNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExecHostNodeSetParams ( CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for a host node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Host node from the graph which was used to instantiate graphExec<br><code>nodeParams</code><br>&emsp;- The updated parameters to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ga549b946cedb73dc2596314b2d52f8d8\">Full Description</a>"
	},
	"cuGraphExecKernelNodeSetParams":{
		"id": "cuGraphExecKernelNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExecKernelNodeSetParams ( CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets the parameters for a kernel node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- kernel node from the graph from which graphExec was instantiated<br><code>nodeParams</code><br>&emsp;- Updated Parameters to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gd84243569e4c3d6356b9f2eea20ed48c\">Full Description</a>"
	},
	"cuGraphExecMemcpyNodeSetParams":{
		"id": "cuGraphExecMemcpyNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExecMemcpyNodeSetParams ( CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMCPY3D* copyParams, CUcontext ctx )</code></b></p>",
		"description": "<p>Sets the parameters for a memcpy node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Memcpy node from the graph which was used to instantiate graphExec<br><code>copyParams</code><br>&emsp;- The updated parameters to set<br><code>ctx</code><br>&emsp;- Context on which to run the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g26186d58858ab32ccc7425b53786cce5\">Full Description</a>"
	},
	"cuGraphExecMemsetNodeSetParams":{
		"id": "cuGraphExecMemsetNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExecMemsetNodeSetParams ( CUgraphExec hGraphExec, CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS* memsetParams, CUcontext ctx )</code></b></p>",
		"description": "<p>Sets the parameters for a memset node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Memset node from the graph which was used to instantiate graphExec<br><code>memsetParams</code><br>&emsp;- The updated parameters to set<br><code>ctx</code><br>&emsp;- Context on which to run the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g5df5be09a0b7b3513e740ebbbcd59739\">Full Description</a>"
	},
	"cuGraphExecUpdate":{
		"id": "cuGraphExecUpdate",
		"value": "<p><b><code>CUresult cuGraphExecUpdate ( CUgraphExec hGraphExec, CUgraph hGraph, CUgraphExecUpdateResultInfo* resultInfo )</code></b></p>",
		"description": "<p>Check whether an executable graph can be updated with a graph and perform the update if possible.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;The instantiated graph to be updated<br><code>hGraph</code><br>&emsp;The graph containing the updated parameters<br><code>resultInfo</code><br>&emsp;the error info structure<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_GRAPH_EXEC_UPDATE_FAILURE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g96efefc56df46927da7297f122adfb9f\">Full Description</a>"
	},
	"cuGraphExternalSemaphoresSignalNodeGetParams":{
		"id": "cuGraphExternalSemaphoresSignalNodeGetParams",
		"value": "<p><b><code>CUresult cuGraphExternalSemaphoresSignalNodeGetParams ( CUgraphNode hNode, CUDA_EXT_SEM_SIGNAL_NODE_PARAMS* params_out )</code></b></p>",
		"description": "<p>Returns an external semaphore signal node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>params_out</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ga9f9b30ce6eb9f45d691190b20f34126\">Full Description</a>"
	},
	"cuGraphExternalSemaphoresSignalNodeSetParams":{
		"id": "cuGraphExternalSemaphoresSignalNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExternalSemaphoresSignalNodeSetParams ( CUgraphNode hNode, const CUDA_EXT_SEM_SIGNAL_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets an external semaphore signal node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the parameters for<br><code>nodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g7a344ed4c6a5fcaad7bc7c53b04c6099\">Full Description</a>"
	},
	"cuGraphExternalSemaphoresWaitNodeGetParams":{
		"id": "cuGraphExternalSemaphoresWaitNodeGetParams",
		"value": "<p><b><code>CUresult cuGraphExternalSemaphoresWaitNodeGetParams ( CUgraphNode hNode, CUDA_EXT_SEM_WAIT_NODE_PARAMS* params_out )</code></b></p>",
		"description": "<p>Returns an external semaphore wait node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>params_out</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g1430da6d26a58818a4712d135cf37a54\">Full Description</a>"
	},
	"cuGraphExternalSemaphoresWaitNodeSetParams":{
		"id": "cuGraphExternalSemaphoresWaitNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphExternalSemaphoresWaitNodeSetParams ( CUgraphNode hNode, const CUDA_EXT_SEM_WAIT_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets an external semaphore wait node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the parameters for<br><code>nodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ge8b93792930a21ec352d6efd2c21c8c0\">Full Description</a>"
	},
	"cuGraphGetEdges":{
		"id": "cuGraphGetEdges",
		"value": "<p><b><code>CUresult cuGraphGetEdges ( CUgraph hGraph, CUgraphNode* from, CUgraphNode* to, size_t* numEdges )</code></b></p>",
		"description": "<p>Returns a graph's dependency edges.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraph</code><br>&emsp;- Graph to get the edges from<br><code>from</code><br>&emsp;- Location to return edge endpoints<br><code>to</code><br>&emsp;- Location to return edge endpoints<br><code>numEdges</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g2b7bd71b0b2b8521f141996e0975a0d7\">Full Description</a>"
	},
	"cuGraphGetNodes":{
		"id": "cuGraphGetNodes",
		"value": "<p><b><code>CUresult cuGraphGetNodes ( CUgraph hGraph, CUgraphNode* nodes, size_t* numNodes )</code></b></p>",
		"description": "<p>Returns a graph's nodes.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraph</code><br>&emsp;- Graph to query<br><code>nodes</code><br>&emsp;- Pointer to return the nodes<br><code>numNodes</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gfa35a8e2d2fc32f48dbd67ba27cf27e5\">Full Description</a>"
	},
	"cuGraphGetRootNodes":{
		"id": "cuGraphGetRootNodes",
		"value": "<p><b><code>CUresult cuGraphGetRootNodes ( CUgraph hGraph, CUgraphNode* rootNodes, size_t* numRootNodes )</code></b></p>",
		"description": "<p>Returns a graph's root nodes.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraph</code><br>&emsp;- Graph to query<br><code>rootNodes</code><br>&emsp;- Pointer to return the root nodes<br><code>numRootNodes</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gf8517646bd8b39ab6359f8e7f0edffbd\">Full Description</a>"
	},
	"cuGraphHostNodeGetParams":{
		"id": "cuGraphHostNodeGetParams",
		"value": "<p><b><code>CUresult cuGraphHostNodeGetParams ( CUgraphNode hNode, CUDA_HOST_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Returns a host node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>nodeParams</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g2e3ea6000089fd5523c197ab5e73d5a2\">Full Description</a>"
	},
	"cuGraphHostNodeSetParams":{
		"id": "cuGraphHostNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphHostNodeSetParams ( CUgraphNode hNode, const CUDA_HOST_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets a host node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the parameters for<br><code>nodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gae021ae8f19ee51044339db9c24dd266\">Full Description</a>"
	},
	"cuGraphInstantiate":{
		"id": "cuGraphInstantiate",
		"value": "<p><b><code>CUresult cuGraphInstantiate ( CUgraphExec* phGraphExec, CUgraph hGraph, unsigned long long flags )</code></b></p>",
		"description": "<p>Creates an executable graph from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphExec</code><br>&emsp;- Returns instantiated graph<br><code>hGraph</code><br>&emsp;- Graph to instantiate<br><code>flags</code><br>&emsp;- Flags to control instantiation. See CUgraphInstantiate_flags.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gb53b435e178cccfa37ac87285d2c3fa1\">Full Description</a>"
	},
	"cuGraphInstantiateWithParams":{
		"id": "cuGraphInstantiateWithParams",
		"value": "<p><b><code>CUresult cuGraphInstantiateWithParams ( CUgraphExec* phGraphExec, CUgraph hGraph, CUDA_GRAPH_INSTANTIATE_PARAMS* instantiateParams )</code></b></p>",
		"description": "<p>Creates an executable graph from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phGraphExec</code><br>&emsp;- Returns instantiated graph<br><code>hGraph</code><br>&emsp;- Graph to instantiate<br><code>instantiateParams</code><br>&emsp;- Instantiation parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g8d9541e4df43ee8440e794634a0d1af8\">Full Description</a>"
	},
	"cuGraphKernelNodeCopyAttributes":{
		"id": "cuGraphKernelNodeCopyAttributes",
		"value": "<p><b><code>CUresult cuGraphKernelNodeCopyAttributes ( CUgraphNode dst, CUgraphNode src )</code></b></p>",
		"description": "<p>Copies attributes from source node to destination node.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dst</code><br>&emsp;Destination node<br><code>src</code><br>&emsp;Source node For list of attributes see CUkernelNodeAttrID<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ga5f4e6786704bf710b61a26146c51c9e\">Full Description</a>"
	},
	"cuGraphKernelNodeGetAttribute":{
		"id": "cuGraphKernelNodeGetAttribute",
		"value": "<p><b><code>CUresult cuGraphKernelNodeGetAttribute ( CUgraphNode hNode, CUkernelNodeAttrID attr, CUkernelNodeAttrValue* value_out )</code></b></p>",
		"description": "<p>Queries node attribute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br><code>attr</code><br><code>value_out</code><br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g9827e34c800e2f2cb4d9a6f4e186f796\">Full Description</a>"
	},
	"cuGraphKernelNodeGetParams":{
		"id": "cuGraphKernelNodeGetParams",
		"value": "<p><b><code>CUresult cuGraphKernelNodeGetParams ( CUgraphNode hNode, CUDA_KERNEL_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Returns a kernel node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>nodeParams</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gb8df3f99e8dd5e4f4a5a0f19a5518252\">Full Description</a>"
	},
	"cuGraphKernelNodeSetAttribute":{
		"id": "cuGraphKernelNodeSetAttribute",
		"value": "<p><b><code>CUresult cuGraphKernelNodeSetAttribute ( CUgraphNode hNode, CUkernelNodeAttrID attr, const CUkernelNodeAttrValue* value )</code></b></p>",
		"description": "<p>Sets node attribute.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br><code>attr</code><br><code>value</code><br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gd888774df6c1d0774bee49ec9442eefc\">Full Description</a>"
	},
	"cuGraphKernelNodeSetParams":{
		"id": "cuGraphKernelNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphKernelNodeSetParams ( CUgraphNode hNode, const CUDA_KERNEL_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets a kernel node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the parameters for<br><code>nodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ga268bf2fd520f5aa3a3d700005df6703\">Full Description</a>"
	},
	"cuGraphLaunch":{
		"id": "cuGraphLaunch",
		"value": "<p><b><code>CUresult cuGraphLaunch ( CUgraphExec hGraphExec, CUstream hStream )</code></b></p>",
		"description": "<p>Launches an executable graph in a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- Executable graph to launch<br><code>hStream</code><br>&emsp;- Stream in which to launch the graph<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g6b2dceb3901e71a390d2bd8b0491e471\">Full Description</a>"
	},
	"cuGraphMemAllocNodeGetParams":{
		"id": "cuGraphMemAllocNodeGetParams",
		"value": "<p><b><code>CUresult cuGraphMemAllocNodeGetParams ( CUgraphNode hNode, CUDA_MEM_ALLOC_NODE_PARAMS* params_out )</code></b></p>",
		"description": "<p>Returns a memory alloc node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>params_out</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gee2c7d66d3d96b1470c1d1a769f250a2\">Full Description</a>"
	},
	"cuGraphMemFreeNodeGetParams":{
		"id": "cuGraphMemFreeNodeGetParams",
		"value": "<p><b><code>CUresult cuGraphMemFreeNodeGetParams ( CUgraphNode hNode, CUdeviceptr* dptr_out )</code></b></p>",
		"description": "<p>Returns a memory free node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>dptr_out</code><br>&emsp;- Pointer to return the device address<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gd24d9fe5769222a2367e3f571fb2f28b\">Full Description</a>"
	},
	"cuGraphMemcpyNodeGetParams":{
		"id": "cuGraphMemcpyNodeGetParams",
		"value": "<p><b><code>CUresult cuGraphMemcpyNodeGetParams ( CUgraphNode hNode, CUDA_MEMCPY3D* nodeParams )</code></b></p>",
		"description": "<p>Returns a memcpy node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>nodeParams</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g572889131dbc31720eff94b130f4005b\">Full Description</a>"
	},
	"cuGraphMemcpyNodeSetParams":{
		"id": "cuGraphMemcpyNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphMemcpyNodeSetParams ( CUgraphNode hNode, const CUDA_MEMCPY3D* nodeParams )</code></b></p>",
		"description": "<p>Sets a memcpy node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the parameters for<br><code>nodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ga278a7ec0700c86abb0b2cfdf4d3dc1d\">Full Description</a>"
	},
	"cuGraphMemsetNodeGetParams":{
		"id": "cuGraphMemsetNodeGetParams",
		"value": "<p><b><code>CUresult cuGraphMemsetNodeGetParams ( CUgraphNode hNode, CUDA_MEMSET_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Returns a memset node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to get the parameters for<br><code>nodeParams</code><br>&emsp;- Pointer to return the parameters<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g18830edcfd982f952820a0d7f91b894a\">Full Description</a>"
	},
	"cuGraphMemsetNodeSetParams":{
		"id": "cuGraphMemsetNodeSetParams",
		"value": "<p><b><code>CUresult cuGraphMemsetNodeSetParams ( CUgraphNode hNode, const CUDA_MEMSET_NODE_PARAMS* nodeParams )</code></b></p>",
		"description": "<p>Sets a memset node's parameters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to set the parameters for<br><code>nodeParams</code><br>&emsp;- Parameters to copy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gc27f3fd83a6e33c74519066fbaa0de67\">Full Description</a>"
	},
	"cuGraphNodeFindInClone":{
		"id": "cuGraphNodeFindInClone",
		"value": "<p><b><code>CUresult cuGraphNodeFindInClone ( CUgraphNode* phNode, CUgraphNode hOriginalNode, CUgraph hClonedGraph )</code></b></p>",
		"description": "<p>Finds a cloned version of a node.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phNode</code><br>&emsp;- Returns handle to the cloned node<br><code>hOriginalNode</code><br>&emsp;- Handle to the original node<br><code>hClonedGraph</code><br>&emsp;- Cloned graph to query<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gf21f6c968e346f028737c1118bfd41c2\">Full Description</a>"
	},
	"cuGraphNodeGetDependencies":{
		"id": "cuGraphNodeGetDependencies",
		"value": "<p><b><code>CUresult cuGraphNodeGetDependencies ( CUgraphNode hNode, CUgraphNode* dependencies, size_t* numDependencies )</code></b></p>",
		"description": "<p>Returns a node's dependencies.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to query<br><code>dependencies</code><br>&emsp;- Pointer to return the dependencies<br><code>numDependencies</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g048f4c0babcbba64a933fc277cd45083\">Full Description</a>"
	},
	"cuGraphNodeGetDependentNodes":{
		"id": "cuGraphNodeGetDependentNodes",
		"value": "<p><b><code>CUresult cuGraphNodeGetDependentNodes ( CUgraphNode hNode, CUgraphNode* dependentNodes, size_t* numDependentNodes )</code></b></p>",
		"description": "<p>Returns a node's dependent nodes.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to query<br><code>dependentNodes</code><br>&emsp;- Pointer to return the dependent nodes<br><code>numDependentNodes</code><br>&emsp;- See description<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g4b73d9e3b386a9c0b094a452b8431f59\">Full Description</a>"
	},
	"cuGraphNodeGetEnabled":{
		"id": "cuGraphNodeGetEnabled",
		"value": "<p><b><code>CUresult cuGraphNodeGetEnabled ( CUgraphExec hGraphExec, CUgraphNode hNode, unsigned int* isEnabled )</code></b></p>",
		"description": "<p>Query whether a node in the given graphExec is enabled.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Node from the graph from which graphExec was instantiated<br><code>isEnabled</code><br>&emsp;- Location to return the enabled status of the node<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g428f51dceec6f6211bb9c1d710925a3d\">Full Description</a>"
	},
	"cuGraphNodeGetType":{
		"id": "cuGraphNodeGetType",
		"value": "<p><b><code>CUresult cuGraphNodeGetType ( CUgraphNode hNode, CUgraphNodeType* type )</code></b></p>",
		"description": "<p>Returns a node's type.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hNode</code><br>&emsp;- Node to query<br><code>type</code><br>&emsp;- Pointer to return the node type<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gdb1776d97aa1c9d5144774b29e4b8c3e\">Full Description</a>"
	},
	"cuGraphNodeSetEnabled":{
		"id": "cuGraphNodeSetEnabled",
		"value": "<p><b><code>CUresult cuGraphNodeSetEnabled ( CUgraphExec hGraphExec, CUgraphNode hNode, unsigned int isEnabled )</code></b></p>",
		"description": "<p>Enables or disables the specified node in the given graphExec.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- The executable graph in which to set the specified node<br><code>hNode</code><br>&emsp;- Node from the graph from which graphExec was instantiated<br><code>isEnabled</code><br>&emsp;- Node is enabled if != 0, otherwise the node is disabled<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g371b20eb0c0658731e38db7e68f12c78\">Full Description</a>"
	},
	"cuGraphReleaseUserObject":{
		"id": "cuGraphReleaseUserObject",
		"value": "<p><b><code>CUresult cuGraphReleaseUserObject ( CUgraph graph, CUuserObject object, unsigned int count )</code></b></p>",
		"description": "<p>Release a user object reference from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- The graph that will release the reference<br><code>object</code><br>&emsp;- The user object to release a reference for<br><code>count</code><br>&emsp;- The number of references to release, typically 1. Must be nonzero and not larger than INT_MAX.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g232c84cc31e13e4201a421e28561eebf\">Full Description</a>"
	},
	"cuGraphRemoveDependencies":{
		"id": "cuGraphRemoveDependencies",
		"value": "<p><b><code>CUresult cuGraphRemoveDependencies ( CUgraph hGraph, const CUgraphNode* from, const CUgraphNode* to, size_t numDependencies )</code></b></p>",
		"description": "<p>Removes dependency edges from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraph</code><br>&emsp;- Graph from which to remove dependencies<br><code>from</code><br>&emsp;- Array of nodes that provide the dependencies<br><code>to</code><br>&emsp;- Array of dependent nodes<br><code>numDependencies</code><br>&emsp;- Number of dependencies to be removed<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g1aaf3f3c332a4e728adce601f111505e\">Full Description</a>"
	},
	"cuGraphRetainUserObject":{
		"id": "cuGraphRetainUserObject",
		"value": "<p><b><code>CUresult cuGraphRetainUserObject ( CUgraph graph, CUuserObject object, unsigned int count, unsigned int flags )</code></b></p>",
		"description": "<p>Retain a reference to a user object from a graph.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>graph</code><br>&emsp;- The graph to associate the reference with<br><code>object</code><br>&emsp;- The user object to retain a reference for<br><code>count</code><br>&emsp;- The number of references to add to the graph, typically 1. Must be nonzero and not larger than INT_MAX.<br><code>flags</code><br>&emsp;- The optional flag CU_GRAPH_USER_OBJECT_MOVE transfers references from the calling thread, rather than create new references. Pass 0 to create new references.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1gaffd130c928e56740a2a5aaeb6125c8a\">Full Description</a>"
	},
	"cuGraphUpload":{
		"id": "cuGraphUpload",
		"value": "<p><b><code>CUresult cuGraphUpload ( CUgraphExec hGraphExec, CUstream hStream )</code></b></p>",
		"description": "<p>Uploads an executable graph in a stream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hGraphExec</code><br>&emsp;- Executable graph to upload<br><code>hStream</code><br>&emsp;- Stream in which to upload the graph<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ga7eb9849e6e4604864a482b38f25be48\">Full Description</a>"
	},
	"cuUserObjectCreate":{
		"id": "cuUserObjectCreate",
		"value": "<p><b><code>CUresult cuUserObjectCreate ( CUuserObject* object_out, void* ptr, CUhostFn destroy, unsigned int initialRefcount, unsigned int flags )</code></b></p>",
		"description": "<p>Create a user object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>object_out</code><br>&emsp;- Location to return the user object handle<br><code>ptr</code><br>&emsp;- The pointer to pass to the destroy function<br><code>destroy</code><br>&emsp;- Callback to free the user object when it is no longer in use<br><code>initialRefcount</code><br>&emsp;- The initial refcount to create the object with, typically 1. The initial references are owned by the calling thread.<br><code>flags</code><br>&emsp;- Currently it is required to pass CU_USER_OBJECT_NO_DESTRUCTOR_SYNC, which is the only defined flag. This indicates that the destroy callback cannot be waited on by any CUDA API. Users requiring synchronization of the callback should signal its completion manually.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1g58f04e0ac0ad23d2f15ea6e9f6c8a999\">Full Description</a>"
	},
	"cuUserObjectRelease":{
		"id": "cuUserObjectRelease",
		"value": "<p><b><code>CUresult cuUserObjectRelease ( CUuserObject object, unsigned int count )</code></b></p>",
		"description": "<p>Release a reference to a user object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>object</code><br>&emsp;- The object to release<br><code>count</code><br>&emsp;- The number of references to release, typically 1. Must be nonzero and not larger than INT_MAX.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ga2c16918341b8d020c9246e75658cc80\">Full Description</a>"
	},
	"cuUserObjectRetain":{
		"id": "cuUserObjectRetain",
		"value": "<p><b><code>CUresult cuUserObjectRetain ( CUuserObject object, unsigned int count )</code></b></p>",
		"description": "<p>Retain a reference to a user object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>object</code><br>&emsp;- The object to retain<br><code>count</code><br>&emsp;- The number of references to retain, typically 1. Must be nonzero and not larger than INT_MAX.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPH.html#group__CUDA__GRAPH#group__CUDA__GRAPH_1ge022bcecdeca2d14cc8f28afc6a2eaf6\">Full Description</a>"
	},
	"cuOccupancyAvailableDynamicSMemPerBlock":{
		"id": "cuOccupancyAvailableDynamicSMemPerBlock",
		"value": "<p><b><code>CUresult cuOccupancyAvailableDynamicSMemPerBlock ( size_t* dynamicSmemSize, CUfunction func, int numBlocks, int blockSize )</code></b></p>",
		"description": "<p>Returns dynamic shared memory available per block when launching numBlocks blocks on SM.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dynamicSmemSize</code><br>&emsp;- Returned maximum dynamic shared memory<br><code>func</code><br>&emsp;- Kernel function for which occupancy is calculated<br><code>numBlocks</code><br>&emsp;- Number of blocks to fit on SM<br><code>blockSize</code><br>&emsp;- Size of the blocks<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__OCCUPANCY.html#group__CUDA__OCCUPANCY#group__CUDA__OCCUPANCY_1gae02af6a9df9e1bbd51941af631bce69\">Full Description</a>"
	},
	"cuOccupancyMaxActiveBlocksPerMultiprocessor":{
		"id": "cuOccupancyMaxActiveBlocksPerMultiprocessor",
		"value": "<p><b><code>CUresult cuOccupancyMaxActiveBlocksPerMultiprocessor ( int* numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize )</code></b></p>",
		"description": "<p>Returns occupancy of a function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>numBlocks</code><br>&emsp;- Returned occupancy<br><code>func</code><br>&emsp;- Kernel for which occupancy is calculated<br><code>blockSize</code><br>&emsp;- Block size the kernel is intended to be launched with<br><code>dynamicSMemSize</code><br>&emsp;- Per-block dynamic shared memory usage intended, in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__OCCUPANCY.html#group__CUDA__OCCUPANCY#group__CUDA__OCCUPANCY_1gcc6e1094d05cba2cee17fe33ddd04a98\">Full Description</a>"
	},
	"cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags":{
		"id": "cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags",
		"value": "<p><b><code>CUresult cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags ( int* numBlocks, CUfunction func, int blockSize, size_t dynamicSMemSize, unsigned int flags )</code></b></p>",
		"description": "<p>Returns occupancy of a function.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>numBlocks</code><br>&emsp;- Returned occupancy<br><code>func</code><br>&emsp;- Kernel for which occupancy is calculated<br><code>blockSize</code><br>&emsp;- Block size the kernel is intended to be launched with<br><code>dynamicSMemSize</code><br>&emsp;- Per-block dynamic shared memory usage intended, in bytes<br><code>flags</code><br>&emsp;- Requested behavior for the occupancy calculator<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__OCCUPANCY.html#group__CUDA__OCCUPANCY#group__CUDA__OCCUPANCY_1g8f1da4d4983e5c3025447665423ae2c2\">Full Description</a>"
	},
	"cuOccupancyMaxActiveClusters":{
		"id": "cuOccupancyMaxActiveClusters",
		"value": "<p><b><code>CUresult cuOccupancyMaxActiveClusters ( int* numClusters, CUfunction func, const CUlaunchConfig* config )</code></b></p>",
		"description": "<p>Given the kernel function (func) and launch configuration (config), return the maximum number of clusters that could co-exist on the target device in *numClusters.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>numClusters</code><br>&emsp;- Returned maximum number of clusters that could co-exist on the target device<br><code>func</code><br>&emsp;- Kernel function for which maximum number of clusters are calculated<br><code>config</code><br>&emsp;- Launch configuration for the given kernel function<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_CLUSTER_SIZE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__OCCUPANCY.html#group__CUDA__OCCUPANCY#group__CUDA__OCCUPANCY_1g4f52cbf144d74ed20351a594dc26386b\">Full Description</a>"
	},
	"cuOccupancyMaxPotentialBlockSize":{
		"id": "cuOccupancyMaxPotentialBlockSize",
		"value": "<p><b><code>CUresult cuOccupancyMaxPotentialBlockSize ( int* minGridSize, int* blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit )</code></b></p>",
		"description": "<p>Suggest a launch configuration with reasonable occupancy.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>minGridSize</code><br>&emsp;- Returned minimum grid size needed to achieve the maximum occupancy<br><code>blockSize</code><br>&emsp;- Returned maximum block size that can achieve the maximum occupancy<br><code>func</code><br>&emsp;- Kernel for which launch configuration is calculated<br><code>blockSizeToDynamicSMemSize</code><br>&emsp;- A function that calculates how much per-block dynamic shared memory func uses based on the block size<br><code>dynamicSMemSize</code><br>&emsp;- Dynamic shared memory usage intended, in bytes<br><code>blockSizeLimit</code><br>&emsp;- The maximum block size func is designed to handle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__OCCUPANCY.html#group__CUDA__OCCUPANCY#group__CUDA__OCCUPANCY_1gf179c4ab78962a8468e41c3f57851f03\">Full Description</a>"
	},
	"cuOccupancyMaxPotentialBlockSizeWithFlags":{
		"id": "cuOccupancyMaxPotentialBlockSizeWithFlags",
		"value": "<p><b><code>CUresult cuOccupancyMaxPotentialBlockSizeWithFlags ( int* minGridSize, int* blockSize, CUfunction func, CUoccupancyB2DSize blockSizeToDynamicSMemSize, size_t dynamicSMemSize, int blockSizeLimit, unsigned int flags )</code></b></p>",
		"description": "<p>Suggest a launch configuration with reasonable occupancy.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>minGridSize</code><br>&emsp;- Returned minimum grid size needed to achieve the maximum occupancy<br><code>blockSize</code><br>&emsp;- Returned maximum block size that can achieve the maximum occupancy<br><code>func</code><br>&emsp;- Kernel for which launch configuration is calculated<br><code>blockSizeToDynamicSMemSize</code><br>&emsp;- A function that calculates how much per-block dynamic shared memory func uses based on the block size<br><code>dynamicSMemSize</code><br>&emsp;- Dynamic shared memory usage intended, in bytes<br><code>blockSizeLimit</code><br>&emsp;- The maximum block size func is designed to handle<br><code>flags</code><br>&emsp;- Options<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__OCCUPANCY.html#group__CUDA__OCCUPANCY#group__CUDA__OCCUPANCY_1g04c0bb65630f82d9b99a5ca0203ee5aa\">Full Description</a>"
	},
	"cuOccupancyMaxPotentialClusterSize":{
		"id": "cuOccupancyMaxPotentialClusterSize",
		"value": "<p><b><code>CUresult cuOccupancyMaxPotentialClusterSize ( int* clusterSize, CUfunction func, const CUlaunchConfig* config )</code></b></p>",
		"description": "<p>Given the kernel function (func) and launch configuration (config), return the maximum cluster size in *clusterSize.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>clusterSize</code><br>&emsp;- Returned maximum cluster size that can be launched for the given kernel function and launch configuration<br><code>func</code><br>&emsp;- Kernel function for which maximum cluster size is calculated<br><code>config</code><br>&emsp;- Launch configuration for the given kernel function<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__OCCUPANCY.html#group__CUDA__OCCUPANCY#group__CUDA__OCCUPANCY_1gd6f60814c1e3440145115ade3730365f\">Full Description</a>"
	},
	"cuTexRefCreate":{
		"id": "cuTexRefCreate",
		"value": "<p><b><code>CUresult cuTexRefCreate ( CUtexref* pTexRef )</code></b></p>",
		"description": "<p>Creates a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pTexRef</code><br>&emsp;- Returned texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g3b7632ddefba6033dc44bc149793619b\">Full Description</a>"
	},
	"cuTexRefDestroy":{
		"id": "cuTexRefDestroy",
		"value": "<p><b><code>CUresult cuTexRefDestroy ( CUtexref hTexRef )</code></b></p>",
		"description": "<p>Destroys a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g80c407e5759db31015f50fea94c10fa1\">Full Description</a>"
	},
	"cuTexRefGetAddress":{
		"id": "cuTexRefGetAddress",
		"value": "<p><b><code>CUresult cuTexRefGetAddress ( CUdeviceptr* pdptr, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the address associated with a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pdptr</code><br>&emsp;- Returned device address<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g56a175420c7fef8e547a66bc79671488\">Full Description</a>"
	},
	"cuTexRefGetAddressMode":{
		"id": "cuTexRefGetAddressMode",
		"value": "<p><b><code>CUresult cuTexRefGetAddressMode ( CUaddress_mode* pam, CUtexref hTexRef, int dim )</code></b></p>",
		"description": "<p>Gets the addressing mode used by a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pam</code><br>&emsp;- Returned addressing mode<br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>dim</code><br>&emsp;- Dimension<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1ga41ceb7f8a452d59ae7e874b1c8e0c67\">Full Description</a>"
	},
	"cuTexRefGetArray":{
		"id": "cuTexRefGetArray",
		"value": "<p><b><code>CUresult cuTexRefGetArray ( CUarray* phArray, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the array bound to a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phArray</code><br>&emsp;- Returned array<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g7f74aff0d999af6613dfc9aff3a21087\">Full Description</a>"
	},
	"cuTexRefGetBorderColor":{
		"id": "cuTexRefGetBorderColor",
		"value": "<p><b><code>CUresult cuTexRefGetBorderColor ( float* pBorderColor, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the border color used by a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pBorderColor</code><br>&emsp;- Returned Type and Value of RGBA color<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g04303cad6225620089ad34ffb50caf48\">Full Description</a>"
	},
	"cuTexRefGetFilterMode":{
		"id": "cuTexRefGetFilterMode",
		"value": "<p><b><code>CUresult cuTexRefGetFilterMode ( CUfilter_mode* pfm, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the filter-mode used by a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pfm</code><br>&emsp;- Returned filtering mode<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g941748b72fe9c6f9767be38b8d02c95d\">Full Description</a>"
	},
	"cuTexRefGetFlags":{
		"id": "cuTexRefGetFlags",
		"value": "<p><b><code>CUresult cuTexRefGetFlags ( unsigned int* pFlags, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the flags used by a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pFlags</code><br>&emsp;- Returned flags<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g0eb1b87656d661c4fbd4ddbbc0dd7b94\">Full Description</a>"
	},
	"cuTexRefGetFormat":{
		"id": "cuTexRefGetFormat",
		"value": "<p><b><code>CUresult cuTexRefGetFormat ( CUarray_format* pFormat, int* pNumChannels, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the format used by a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pFormat</code><br>&emsp;- Returned format<br><code>pNumChannels</code><br>&emsp;- Returned number of components<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g0453d286f81825e1d503d651f8b079d8\">Full Description</a>"
	},
	"cuTexRefGetMaxAnisotropy":{
		"id": "cuTexRefGetMaxAnisotropy",
		"value": "<p><b><code>CUresult cuTexRefGetMaxAnisotropy ( int* pmaxAniso, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the maximum anisotropy for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pmaxAniso</code><br>&emsp;- Returned maximum anisotropy<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g9e101cc5a0dcab4a9a7c709ab9ecfd1c\">Full Description</a>"
	},
	"cuTexRefGetMipmapFilterMode":{
		"id": "cuTexRefGetMipmapFilterMode",
		"value": "<p><b><code>CUresult cuTexRefGetMipmapFilterMode ( CUfilter_mode* pfm, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the mipmap filtering mode for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pfm</code><br>&emsp;- Returned mipmap filtering mode<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1ge2726d645a4d84df974f9da2f5a85b11\">Full Description</a>"
	},
	"cuTexRefGetMipmapLevelBias":{
		"id": "cuTexRefGetMipmapLevelBias",
		"value": "<p><b><code>CUresult cuTexRefGetMipmapLevelBias ( float* pbias, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the mipmap level bias for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pbias</code><br>&emsp;- Returned mipmap level bias<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g46dca9c5a96a5494b60499fe81c15f82\">Full Description</a>"
	},
	"cuTexRefGetMipmapLevelClamp":{
		"id": "cuTexRefGetMipmapLevelClamp",
		"value": "<p><b><code>CUresult cuTexRefGetMipmapLevelClamp ( float* pminMipmapLevelClamp, float* pmaxMipmapLevelClamp, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the min/max mipmap level clamps for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pminMipmapLevelClamp</code><br>&emsp;- Returned mipmap min level clamp<br><code>pmaxMipmapLevelClamp</code><br>&emsp;- Returned mipmap max level clamp<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g7e0b66c45535bd2b753d9860f212d848\">Full Description</a>"
	},
	"cuTexRefGetMipmappedArray":{
		"id": "cuTexRefGetMipmappedArray",
		"value": "<p><b><code>CUresult cuTexRefGetMipmappedArray ( CUmipmappedArray* phMipmappedArray, CUtexref hTexRef )</code></b></p>",
		"description": "<p>Gets the mipmapped array bound to a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phMipmappedArray</code><br>&emsp;- Returned mipmapped array<br><code>hTexRef</code><br>&emsp;- Texture reference<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g3bc191d80a7a6e1cf7405a00fde9131a\">Full Description</a>"
	},
	"cuTexRefSetAddress":{
		"id": "cuTexRefSetAddress",
		"value": "<p><b><code>CUresult cuTexRefSetAddress ( size_t* ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes )</code></b></p>",
		"description": "<p>Binds an address as a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ByteOffset</code><br>&emsp;- Returned byte offset<br><code>hTexRef</code><br>&emsp;- Texture reference to bind<br><code>dptr</code><br>&emsp;- Device pointer to bind<br><code>bytes</code><br>&emsp;- Size of memory to bind in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1ga6e288992f58e7a6e3350614bc9e813b\">Full Description</a>"
	},
	"cuTexRefSetAddress2D":{
		"id": "cuTexRefSetAddress2D",
		"value": "<p><b><code>CUresult cuTexRefSetAddress2D ( CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR* desc, CUdeviceptr dptr, size_t Pitch )</code></b></p>",
		"description": "<p>Binds an address as a 2D texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference to bind<br><code>desc</code><br>&emsp;- Descriptor of CUDA array<br><code>dptr</code><br>&emsp;- Device pointer to bind<br><code>Pitch</code><br>&emsp;- Line pitch in bytes<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1gbdec8983628f68bcde5db4b4c3f90851\">Full Description</a>"
	},
	"cuTexRefSetAddressMode":{
		"id": "cuTexRefSetAddressMode",
		"value": "<p><b><code>CUresult cuTexRefSetAddressMode ( CUtexref hTexRef, int dim, CUaddress_mode am )</code></b></p>",
		"description": "<p>Sets the addressing mode for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>dim</code><br>&emsp;- Dimension<br><code>am</code><br>&emsp;- Addressing mode to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1ga45732a5c4ec291c0682fffcbaa6d393\">Full Description</a>"
	},
	"cuTexRefSetArray":{
		"id": "cuTexRefSetArray",
		"value": "<p><b><code>CUresult cuTexRefSetArray ( CUtexref hTexRef, CUarray hArray, unsigned int Flags )</code></b></p>",
		"description": "<p>Binds an array as a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference to bind<br><code>hArray</code><br>&emsp;- Array to bind<br><code>Flags</code><br>&emsp;- Options (must be CU_TRSA_OVERRIDE_FORMAT)<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1gac3a34b4b10983433865fdadb83b9118\">Full Description</a>"
	},
	"cuTexRefSetBorderColor":{
		"id": "cuTexRefSetBorderColor",
		"value": "<p><b><code>CUresult cuTexRefSetBorderColor ( CUtexref hTexRef, float* pBorderColor )</code></b></p>",
		"description": "<p>Sets the border color for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>pBorderColor</code><br>&emsp;- RGBA color<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g1db39c355bedd9e7ffb00e2011784dea\">Full Description</a>"
	},
	"cuTexRefSetFilterMode":{
		"id": "cuTexRefSetFilterMode",
		"value": "<p><b><code>CUresult cuTexRefSetFilterMode ( CUtexref hTexRef, CUfilter_mode fm )</code></b></p>",
		"description": "<p>Sets the filtering mode for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>fm</code><br>&emsp;- Filtering mode to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g93819286c48db39afc253c0f10358d2e\">Full Description</a>"
	},
	"cuTexRefSetFlags":{
		"id": "cuTexRefSetFlags",
		"value": "<p><b><code>CUresult cuTexRefSetFlags ( CUtexref hTexRef, unsigned int Flags )</code></b></p>",
		"description": "<p>Sets the flags for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>Flags</code><br>&emsp;- Optional flags to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g9d4816a6561e1d09e0eef9f9c0cdbfa2\">Full Description</a>"
	},
	"cuTexRefSetFormat":{
		"id": "cuTexRefSetFormat",
		"value": "<p><b><code>CUresult cuTexRefSetFormat ( CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents )</code></b></p>",
		"description": "<p>Sets the format for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>fmt</code><br>&emsp;- Format to set<br><code>NumPackedComponents</code><br>&emsp;- Number of components per array element<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g2d57eabbd5ef6780307c008b0f4ce83d\">Full Description</a>"
	},
	"cuTexRefSetMaxAnisotropy":{
		"id": "cuTexRefSetMaxAnisotropy",
		"value": "<p><b><code>CUresult cuTexRefSetMaxAnisotropy ( CUtexref hTexRef, unsigned int maxAniso )</code></b></p>",
		"description": "<p>Sets the maximum anisotropy for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>maxAniso</code><br>&emsp;- Maximum anisotropy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g2b144345d6089ec4053c334fb7d04490\">Full Description</a>"
	},
	"cuTexRefSetMipmapFilterMode":{
		"id": "cuTexRefSetMipmapFilterMode",
		"value": "<p><b><code>CUresult cuTexRefSetMipmapFilterMode ( CUtexref hTexRef, CUfilter_mode fm )</code></b></p>",
		"description": "<p>Sets the mipmap filtering mode for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>fm</code><br>&emsp;- Filtering mode to set<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g82a54190706dd35d8923966b60f320eb\">Full Description</a>"
	},
	"cuTexRefSetMipmapLevelBias":{
		"id": "cuTexRefSetMipmapLevelBias",
		"value": "<p><b><code>CUresult cuTexRefSetMipmapLevelBias ( CUtexref hTexRef, float bias )</code></b></p>",
		"description": "<p>Sets the mipmap level bias for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>bias</code><br>&emsp;- Mipmap level bias<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g6d208de7a968f051fc54224883b1994c\">Full Description</a>"
	},
	"cuTexRefSetMipmapLevelClamp":{
		"id": "cuTexRefSetMipmapLevelClamp",
		"value": "<p><b><code>CUresult cuTexRefSetMipmapLevelClamp ( CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp )</code></b></p>",
		"description": "<p>Sets the mipmap min/max mipmap level clamps for a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference<br><code>minMipmapLevelClamp</code><br>&emsp;- Mipmap min level clamp<br><code>maxMipmapLevelClamp</code><br>&emsp;- Mipmap max level clamp<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1g9b39decf969353890454895e988e9018\">Full Description</a>"
	},
	"cuTexRefSetMipmappedArray":{
		"id": "cuTexRefSetMipmappedArray",
		"value": "<p><b><code>CUresult cuTexRefSetMipmappedArray ( CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned int Flags )</code></b></p>",
		"description": "<p>Binds a mipmapped array to a texture reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hTexRef</code><br>&emsp;- Texture reference to bind<br><code>hMipmappedArray</code><br>&emsp;- Mipmapped array to bind<br><code>Flags</code><br>&emsp;- Options (must be CU_TRSA_OVERRIDE_FORMAT)<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXREF__DEPRECATED.html#group__CUDA__TEXREF__DEPRECATED#group__CUDA__TEXREF__DEPRECATED_1gb35f38ee0738f00c988db5c1ed8c38ea\">Full Description</a>"
	},
	"cuSurfRefGetArray":{
		"id": "cuSurfRefGetArray",
		"value": "<p><b><code>CUresult cuSurfRefGetArray ( CUarray* phArray, CUsurfref hSurfRef )</code></b></p>",
		"description": "<p>Passes back the CUDA array bound to a surface reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phArray</code><br>&emsp;- Surface reference handle<br><code>hSurfRef</code><br>&emsp;- Surface reference handle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__SURFREF__DEPRECATED.html#group__CUDA__SURFREF__DEPRECATED#group__CUDA__SURFREF__DEPRECATED_1g9e46d47dce3ff21a0c6485c8613e391c\">Full Description</a>"
	},
	"cuSurfRefSetArray":{
		"id": "cuSurfRefSetArray",
		"value": "<p><b><code>CUresult cuSurfRefSetArray ( CUsurfref hSurfRef, CUarray hArray, unsigned int Flags )</code></b></p>",
		"description": "<p>Sets the CUDA array for a surface reference.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>hSurfRef</code><br>&emsp;- Surface reference handle<br><code>hArray</code><br>&emsp;- CUDA array handle<br><code>Flags</code><br>&emsp;- set to 0<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__SURFREF__DEPRECATED.html#group__CUDA__SURFREF__DEPRECATED#group__CUDA__SURFREF__DEPRECATED_1g68abcde159fa897b1dfb23387926dd66\">Full Description</a>"
	},
	"cuTexObjectCreate":{
		"id": "cuTexObjectCreate",
		"value": "<p><b><code>CUresult cuTexObjectCreate ( CUtexObject* pTexObject, const CUDA_RESOURCE_DESC* pResDesc, const CUDA_TEXTURE_DESC* pTexDesc, const CUDA_RESOURCE_VIEW_DESC* pResViewDesc )</code></b></p>",
		"description": "<p>Creates a texture object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pTexObject</code><br>&emsp;- Texture object to create<br><code>pResDesc</code><br>&emsp;- Resource descriptor<br><code>pTexDesc</code><br>&emsp;- Texture descriptor<br><code>pResViewDesc</code><br>&emsp;- Resource view descriptor<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXOBJECT.html#group__CUDA__TEXOBJECT#group__CUDA__TEXOBJECT_1g1f6dd0f9cbf56db725b1f45aa0a7218a\">Full Description</a>"
	},
	"cuTexObjectDestroy":{
		"id": "cuTexObjectDestroy",
		"value": "<p><b><code>CUresult cuTexObjectDestroy ( CUtexObject texObject )</code></b></p>",
		"description": "<p>Destroys a texture object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>texObject</code><br>&emsp;- Texture object to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXOBJECT.html#group__CUDA__TEXOBJECT#group__CUDA__TEXOBJECT_1gcd522ba5e2d1852aff8c0388f66247fd\">Full Description</a>"
	},
	"cuTexObjectGetResourceDesc":{
		"id": "cuTexObjectGetResourceDesc",
		"value": "<p><b><code>CUresult cuTexObjectGetResourceDesc ( CUDA_RESOURCE_DESC* pResDesc, CUtexObject texObject )</code></b></p>",
		"description": "<p>Returns a texture object's resource descriptor.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResDesc</code><br>&emsp;- Resource descriptor<br><code>texObject</code><br>&emsp;- Texture object<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXOBJECT.html#group__CUDA__TEXOBJECT#group__CUDA__TEXOBJECT_1g0cc8eb2fa1e584d2b04d631586d0921f\">Full Description</a>"
	},
	"cuTexObjectGetResourceViewDesc":{
		"id": "cuTexObjectGetResourceViewDesc",
		"value": "<p><b><code>CUresult cuTexObjectGetResourceViewDesc ( CUDA_RESOURCE_VIEW_DESC* pResViewDesc, CUtexObject texObject )</code></b></p>",
		"description": "<p>Returns a texture object's resource view descriptor.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResViewDesc</code><br>&emsp;- Resource view descriptor<br><code>texObject</code><br>&emsp;- Texture object<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXOBJECT.html#group__CUDA__TEXOBJECT#group__CUDA__TEXOBJECT_1g185fa4c933a1c3a7b6aebe3e4291a37b\">Full Description</a>"
	},
	"cuTexObjectGetTextureDesc":{
		"id": "cuTexObjectGetTextureDesc",
		"value": "<p><b><code>CUresult cuTexObjectGetTextureDesc ( CUDA_TEXTURE_DESC* pTexDesc, CUtexObject texObject )</code></b></p>",
		"description": "<p>Returns a texture object's texture descriptor.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pTexDesc</code><br>&emsp;- Texture descriptor<br><code>texObject</code><br>&emsp;- Texture object<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TEXOBJECT.html#group__CUDA__TEXOBJECT#group__CUDA__TEXOBJECT_1g688de37b844df7313c8fce30fc912645\">Full Description</a>"
	},
	"cuSurfObjectCreate":{
		"id": "cuSurfObjectCreate",
		"value": "<p><b><code>CUresult cuSurfObjectCreate ( CUsurfObject* pSurfObject, const CUDA_RESOURCE_DESC* pResDesc )</code></b></p>",
		"description": "<p>Creates a surface object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pSurfObject</code><br>&emsp;- Surface object to create<br><code>pResDesc</code><br>&emsp;- Resource descriptor<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__SURFOBJECT.html#group__CUDA__SURFOBJECT#group__CUDA__SURFOBJECT_1g6bc972c90c9590c9f720b2754e6d079d\">Full Description</a>"
	},
	"cuSurfObjectDestroy":{
		"id": "cuSurfObjectDestroy",
		"value": "<p><b><code>CUresult cuSurfObjectDestroy ( CUsurfObject surfObject )</code></b></p>",
		"description": "<p>Destroys a surface object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>surfObject</code><br>&emsp;- Surface object to destroy<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__SURFOBJECT.html#group__CUDA__SURFOBJECT#group__CUDA__SURFOBJECT_1g4c4ec48d203d1e0bb71750ddc4d7aef3\">Full Description</a>"
	},
	"cuSurfObjectGetResourceDesc":{
		"id": "cuSurfObjectGetResourceDesc",
		"value": "<p><b><code>CUresult cuSurfObjectGetResourceDesc ( CUDA_RESOURCE_DESC* pResDesc, CUsurfObject surfObject )</code></b></p>",
		"description": "<p>Returns a surface object's resource descriptor.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResDesc</code><br>&emsp;- Resource descriptor<br><code>surfObject</code><br>&emsp;- Surface object<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__SURFOBJECT.html#group__CUDA__SURFOBJECT#group__CUDA__SURFOBJECT_1g2472b7ea0b7e74600ed3d6c244b7ba21\">Full Description</a>"
	},
	"cuTensorMapEncodeIm2col":{
		"id": "cuTensorMapEncodeIm2col",
		"value": "<p><b><code>CUresult cuTensorMapEncodeIm2col ( CUtensorMap* tensorMap, CUtensorMapDataType tensorDataType, cuuint32_t tensorRank, void* globalAddress, const cuuint64_t* globalDim, const cuuint64_t* globalStrides, const int* pixelBoxLowerCorner, const int* pixelBoxUpperCorner, cuuint32_t channelsPerPixel, cuuint32_t pixelsPerColumn, const cuuint32_t* elementStrides, CUtensorMapInterleave interleave, CUtensorMapSwizzle swizzle, CUtensorMapL2promotion l2Promotion, CUtensorMapFloatOOBfill oobFill )</code></b></p>",
		"description": "<p>Create a tensor map descriptor object representing im2col memory region.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>tensorMap</code><br>&emsp;- Tensor map object to create<br><code>tensorDataType</code><br>&emsp;- Tensor data type<br><code>tensorRank</code><br>&emsp;- Dimensionality of tensor, needs to be at least of dimension 3<br><code>globalAddress</code><br>&emsp;- Starting address of memory region described by tensor<br><code>globalDim</code><br>&emsp;- Array containing tensor size (number of elements) along each of the tensorRank dimensions<br><code>globalStrides</code><br>&emsp;- Array containing stride size (in bytes) along each of the tensorRank - 1 dimensions<br><code>pixelBoxLowerCorner</code><br>&emsp;- Array containing DHW dimentions of lower box corner<br><code>pixelBoxUpperCorner</code><br>&emsp;- Array containing DHW dimentions of upper box corner<br><code>channelsPerPixel</code><br>&emsp;- Number of channels per pixel<br><code>pixelsPerColumn</code><br>&emsp;- Number of pixels per column<br><code>elementStrides</code><br>&emsp;- Array containing traversal stride in each of the tensorRank dimensions<br><code>interleave</code><br>&emsp;- Type of interleaved layout the tensor addresses<br><code>swizzle</code><br>&emsp;- Bank swizzling pattern inside shared memory<br><code>l2Promotion</code><br>&emsp;- L2 promotion size<br><code>oobFill</code><br>&emsp;- Indicate whether zero or special NaN constant must be used to fill out-of-bound elements<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TENSOR__MEMORY.html#group__CUDA__TENSOR__MEMORY#group__CUDA__TENSOR__MEMORY_1gb14d707a18d23fc0c3e22a67ceedc15a\">Full Description</a>"
	},
	"cuTensorMapEncodeTiled":{
		"id": "cuTensorMapEncodeTiled",
		"value": "<p><b><code>CUresult cuTensorMapEncodeTiled ( CUtensorMap* tensorMap, CUtensorMapDataType tensorDataType, cuuint32_t tensorRank, void* globalAddress, const cuuint64_t* globalDim, const cuuint64_t* globalStrides, const cuuint32_t* boxDim, const cuuint32_t* elementStrides, CUtensorMapInterleave interleave, CUtensorMapSwizzle swizzle, CUtensorMapL2promotion l2Promotion, CUtensorMapFloatOOBfill oobFill )</code></b></p>",
		"description": "<p>Create a tensor map descriptor object representing tiled memory region.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>tensorMap</code><br>&emsp;- Tensor map object to create<br><code>tensorDataType</code><br>&emsp;- Tensor data type<br><code>tensorRank</code><br>&emsp;- Dimensionality of tensor<br><code>globalAddress</code><br>&emsp;- Starting address of memory region described by tensor<br><code>globalDim</code><br>&emsp;- Array containing tensor size (number of elements) along each of the tensorRank dimensions<br><code>globalStrides</code><br>&emsp;- Array containing stride size (in bytes) along each of the tensorRank - 1 dimensions<br><code>boxDim</code><br>&emsp;- Array containing traversal box size (number of elments) along each of the tensorRank dimensions. Specifies how many elements to be traversed along each tensor dimension.<br><code>elementStrides</code><br>&emsp;- Array containing traversal stride in each of the tensorRank dimensions<br><code>interleave</code><br>&emsp;- Type of interleaved layout the tensor addresses<br><code>swizzle</code><br>&emsp;- Bank swizzling pattern inside shared memory<br><code>l2Promotion</code><br>&emsp;- L2 promotion size<br><code>oobFill</code><br>&emsp;- Indicate whether zero or special NaN constant must be used to fill out-of-bound elements<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TENSOR__MEMORY.html#group__CUDA__TENSOR__MEMORY#group__CUDA__TENSOR__MEMORY_1ga7c7d2aaac9e49294304e755e6f341d7\">Full Description</a>"
	},
	"cuTensorMapReplaceAddress":{
		"id": "cuTensorMapReplaceAddress",
		"value": "<p><b><code>CUresult cuTensorMapReplaceAddress ( CUtensorMap* tensorMap, void* globalAddress )</code></b></p>",
		"description": "<p>Modify an existing tensor map descriptor with an updated global address.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>tensorMap</code><br>&emsp;- Tensor map object to modify<br><code>globalAddress</code><br>&emsp;- Starting address of memory region described by tensor, must follow previous alignment requirements<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__TENSOR__MEMORY.html#group__CUDA__TENSOR__MEMORY#group__CUDA__TENSOR__MEMORY_1g8d54c0ff5c49b1b1a9baaac6fc796db3\">Full Description</a>"
	},
	"cuCtxDisablePeerAccess":{
		"id": "cuCtxDisablePeerAccess",
		"value": "<p><b><code>CUresult cuCtxDisablePeerAccess ( CUcontext peerContext )</code></b></p>",
		"description": "<p>Disables direct access to memory allocations in a peer context and unregisters any registered allocations.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>peerContext</code><br>&emsp;- Peer context to disable direct access to<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_PEER_ACCESS_NOT_ENABLED, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PEER__ACCESS.html#group__CUDA__PEER__ACCESS#group__CUDA__PEER__ACCESS_1g5b4b6936ea868d4954ce4d841a3b4810\">Full Description</a>"
	},
	"cuCtxEnablePeerAccess":{
		"id": "cuCtxEnablePeerAccess",
		"value": "<p><b><code>CUresult cuCtxEnablePeerAccess ( CUcontext peerContext, unsigned int Flags )</code></b></p>",
		"description": "<p>Enables direct access to memory allocations in a peer context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>peerContext</code><br>&emsp;- Peer context to enable direct access to from the current context<br><code>Flags</code><br>&emsp;- Reserved for future use and must be set to 0<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED, CUDA_ERROR_TOO_MANY_PEERS, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_PEER_ACCESS_UNSUPPORTED, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PEER__ACCESS.html#group__CUDA__PEER__ACCESS#group__CUDA__PEER__ACCESS_1g0889ec6728e61c05ed359551d67b3f5a\">Full Description</a>"
	},
	"cuDeviceCanAccessPeer":{
		"id": "cuDeviceCanAccessPeer",
		"value": "<p><b><code>CUresult cuDeviceCanAccessPeer ( int* canAccessPeer, CUdevice dev, CUdevice peerDev )</code></b></p>",
		"description": "<p>Queries if a device may directly access a peer device's memory.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>canAccessPeer</code><br>&emsp;- Returned access capability<br><code>dev</code><br>&emsp;- Device from which allocations on peerDev are to be directly accessed.<br><code>peerDev</code><br>&emsp;- Device on which the allocations to be directly accessed by dev reside.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_DEVICE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PEER__ACCESS.html#group__CUDA__PEER__ACCESS#group__CUDA__PEER__ACCESS_1g496bdaae1f632ebfb695b99d2c40f19e\">Full Description</a>"
	},
	"cuDeviceGetP2PAttribute":{
		"id": "cuDeviceGetP2PAttribute",
		"value": "<p><b><code>CUresult cuDeviceGetP2PAttribute ( int* value, CUdevice_P2PAttribute attrib, CUdevice srcDevice, CUdevice dstDevice )</code></b></p>",
		"description": "<p>Queries attributes of the link between two devices.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>value</code><br>&emsp;- Returned value of the requested attribute<br><code>attrib</code><br>&emsp;- The requested attribute of the link between srcDevice and dstDevice.<br><code>srcDevice</code><br>&emsp;- The source device of the target link.<br><code>dstDevice</code><br>&emsp;- The destination device of the target link.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_DEVICE, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PEER__ACCESS.html#group__CUDA__PEER__ACCESS#group__CUDA__PEER__ACCESS_1g4c55c60508f8eba4546b51f2ee545393\">Full Description</a>"
	},
	"cuGraphicsMapResources":{
		"id": "cuGraphicsMapResources",
		"value": "<p><b><code>CUresult cuGraphicsMapResources ( unsigned int count, CUgraphicsResource* resources, CUstream hStream )</code></b></p>",
		"description": "<p>Map graphics resources for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to map<br><code>resources</code><br>&emsp;- Resources to map for CUDA usage<br><code>hStream</code><br>&emsp;- Stream with which to synchronize<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPHICS.html#group__CUDA__GRAPHICS#group__CUDA__GRAPHICS_1gffcfd8e78d82cc4f6dd987e8bce4edb0\">Full Description</a>"
	},
	"cuGraphicsResourceGetMappedMipmappedArray":{
		"id": "cuGraphicsResourceGetMappedMipmappedArray",
		"value": "<p><b><code>CUresult cuGraphicsResourceGetMappedMipmappedArray ( CUmipmappedArray* pMipmappedArray, CUgraphicsResource resource )</code></b></p>",
		"description": "<p>Get a mipmapped array through which to access a mapped graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pMipmappedArray</code><br>&emsp;- Returned mipmapped array through which resource may be accessed<br><code>resource</code><br>&emsp;- Mapped resource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED, CUDA_ERROR_NOT_MAPPED_AS_ARRAY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPHICS.html#group__CUDA__GRAPHICS#group__CUDA__GRAPHICS_1g37680bbe89c7fe5c613563eaab9d14c1\">Full Description</a>"
	},
	"cuGraphicsResourceGetMappedPointer":{
		"id": "cuGraphicsResourceGetMappedPointer",
		"value": "<p><b><code>CUresult cuGraphicsResourceGetMappedPointer ( CUdeviceptr* pDevPtr, size_t* pSize, CUgraphicsResource resource )</code></b></p>",
		"description": "<p>Get a device pointer through which to access a mapped graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pDevPtr</code><br>&emsp;- Returned pointer through which resource may be accessed<br><code>pSize</code><br>&emsp;- Returned size of the buffer accessible starting at *pPointer<br><code>resource</code><br>&emsp;- Mapped resource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED, CUDA_ERROR_NOT_MAPPED_AS_POINTER<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPHICS.html#group__CUDA__GRAPHICS#group__CUDA__GRAPHICS_1g8a634cf4150d399f0018061580592457\">Full Description</a>"
	},
	"cuGraphicsResourceSetMapFlags":{
		"id": "cuGraphicsResourceSetMapFlags",
		"value": "<p><b><code>CUresult cuGraphicsResourceSetMapFlags ( CUgraphicsResource resource, unsigned int flags )</code></b></p>",
		"description": "<p>Set usage flags for mapping a graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Registered resource to set flags for<br><code>flags</code><br>&emsp;- Parameters for resource mapping<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPHICS.html#group__CUDA__GRAPHICS#group__CUDA__GRAPHICS_1gfe96aa7747f8b11d44a6fa6a851e1b39\">Full Description</a>"
	},
	"cuGraphicsSubResourceGetMappedArray":{
		"id": "cuGraphicsSubResourceGetMappedArray",
		"value": "<p><b><code>CUresult cuGraphicsSubResourceGetMappedArray ( CUarray* pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel )</code></b></p>",
		"description": "<p>Get an array through which to access a subresource of a mapped graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pArray</code><br>&emsp;- Returned array through which a subresource of resource may be accessed<br><code>resource</code><br>&emsp;- Mapped resource to access<br><code>arrayIndex</code><br>&emsp;- Array index for array textures or cubemap face index as defined by CUarray_cubemap_face for cubemap textures for the subresource to access<br><code>mipLevel</code><br>&emsp;- Mipmap level for the subresource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED, CUDA_ERROR_NOT_MAPPED_AS_ARRAY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPHICS.html#group__CUDA__GRAPHICS#group__CUDA__GRAPHICS_1g61c55e987e54558cce547240d6123078\">Full Description</a>"
	},
	"cuGraphicsUnmapResources":{
		"id": "cuGraphicsUnmapResources",
		"value": "<p><b><code>CUresult cuGraphicsUnmapResources ( unsigned int count, CUgraphicsResource* resources, CUstream hStream )</code></b></p>",
		"description": "<p>Unmap graphics resources.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to unmap<br><code>resources</code><br>&emsp;- Resources to unmap<br><code>hStream</code><br>&emsp;- Stream with which to synchronize<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPHICS.html#group__CUDA__GRAPHICS#group__CUDA__GRAPHICS_1g8e9ff25d071375a0df1cb5aee924af32\">Full Description</a>"
	},
	"cuGraphicsUnregisterResource":{
		"id": "cuGraphicsUnregisterResource",
		"value": "<p><b><code>CUresult cuGraphicsUnregisterResource ( CUgraphicsResource resource )</code></b></p>",
		"description": "<p>Unregisters a graphics resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>resource</code><br>&emsp;- Resource to unregister<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GRAPHICS.html#group__CUDA__GRAPHICS#group__CUDA__GRAPHICS_1ga7e5e97b74eaa13dfa6582e853e4c96d\">Full Description</a>"
	},
	"cuGetProcAddress":{
		"id": "cuGetProcAddress",
		"value": "<p><b><code>CUresult cuGetProcAddress ( const char* symbol, void** pfn, int cudaVersion, cuuint64_t flags, CUdriverProcAddressQueryResult* symbolStatus )</code></b></p>",
		"description": "<p>Returns the requested driver API function pointer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>symbol</code><br>&emsp;- The base name of the driver API function to look for. As an example, for the driver API cuMemAlloc_v2, symbol would be cuMemAlloc and cudaVersion would be the ABI compatible CUDA version for the _v2 variant.<br><code>pfn</code><br>&emsp;- Location to return the function pointer to the requested driver function<br><code>cudaVersion</code><br>&emsp;- The CUDA version to look for the requested driver symbol<br><code>flags</code><br>&emsp;- Flags to specify search options.<br><code>symbolStatus</code><br>&emsp;- Optional location to store the status of the search for symbol based on cudaVersion. See CUdriverProcAddressQueryResult for possible values.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__DRIVER__ENTRY__POINT.html#group__CUDA__DRIVER__ENTRY__POINT#group__CUDA__DRIVER__ENTRY__POINT_1gcae5adad00590572ab35b2508c2d6e0d\">Full Description</a>"
	},
	"cuProfilerInitialize":{
		"id": "cuProfilerInitialize",
		"value": "<p><b><code>CUresult cuProfilerInitialize ( const char* configFile, const char* outputFile, CUoutput_mode outputMode )</code></b></p>",
		"description": "<p>Initialize the profiling.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>configFile</code><br>&emsp;- Name of the config file that lists the counters/options for profiling.<br><code>outputFile</code><br>&emsp;- Name of the outputFile where the profiling results will be stored.<br><code>outputMode</code><br>&emsp;- outputMode, can be CU_OUT_KEY_VALUE_PAIR or CU_OUT_CSV.<br></p><p><b>Returns</b><br>CUDA_ERROR_NOT_SUPPORTED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PROFILER__DEPRECATED.html#group__CUDA__PROFILER__DEPRECATED#group__CUDA__PROFILER__DEPRECATED_1gd15d4f964bf948988679232a54ce9fc1\">Full Description</a>"
	},
	"cuProfilerStart":{
		"id": "cuProfilerStart",
		"value": "<p><b><code>CUresult cuProfilerStart ( void )</code></b></p>",
		"description": "<p>Enable profiling.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PROFILER.html#group__CUDA__PROFILER#group__CUDA__PROFILER_1g8a5314de2292c2efac83ac7fcfa9190e\">Full Description</a>"
	},
	"cuProfilerStop":{
		"id": "cuProfilerStop",
		"value": "<p><b><code>CUresult cuProfilerStop ( void )</code></b></p>",
		"description": "<p>Disable profiling.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__PROFILER.html#group__CUDA__PROFILER#group__CUDA__PROFILER_1g4d8edef6174fd90165e6ac838f320a5f\">Full Description</a>"
	},
	"CUGLDeviceList":{
		"id": "CUGLDeviceList",
		"value": "<p><b><code>enum CUGLDeviceList</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL.html#group__CUDA__GL#group__CUDA__GL_1g7676f0c02ef846176f6ef26accbb9e3b\">Full Description</a>"
	},
	"cuGLGetDevices":{
		"id": "cuGLGetDevices",
		"value": "<p><b><code>CUresult cuGLGetDevices ( unsigned int* pCudaDeviceCount, CUdevice* pCudaDevices, unsigned int cudaDeviceCount, CUGLDeviceList deviceList )</code></b></p>",
		"description": "<p>Gets the CUDA devices associated with the current OpenGL context.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDeviceCount</code><br>&emsp;- Returned number of CUDA devices.<br><code>pCudaDevices</code><br>&emsp;- Returned CUDA devices.<br><code>cudaDeviceCount</code><br>&emsp;- The size of the output device array pCudaDevices.<br><code>deviceList</code><br>&emsp;- The set of devices to return.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NO_DEVICE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_GRAPHICS_CONTEXT, CUDA_ERROR_OPERATING_SYSTEM<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL.html#group__CUDA__GL#group__CUDA__GL_1g98bb15525b04d2f6a817c21e07d8b7cd\">Full Description</a>"
	},
	"cuGraphicsGLRegisterBuffer":{
		"id": "cuGraphicsGLRegisterBuffer",
		"value": "<p><b><code>CUresult cuGraphicsGLRegisterBuffer ( CUgraphicsResource* pCudaResource, GLuint buffer, unsigned int Flags )</code></b></p>",
		"description": "<p>Registers an OpenGL buffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaResource</code><br>&emsp;- Pointer to the returned object handle<br><code>buffer</code><br>&emsp;- name of buffer object to be registered<br><code>Flags</code><br>&emsp;- Register flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_OPERATING_SYSTEM<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL.html#group__CUDA__GL#group__CUDA__GL_1gd530f66cc9ab43a31a98527e75f343a0\">Full Description</a>"
	},
	"cuGraphicsGLRegisterImage":{
		"id": "cuGraphicsGLRegisterImage",
		"value": "<p><b><code>CUresult cuGraphicsGLRegisterImage ( CUgraphicsResource* pCudaResource, GLuint image, GLenum target, unsigned int Flags )</code></b></p>",
		"description": "<p>Register an OpenGL texture or renderbuffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaResource</code><br>&emsp;- Pointer to the returned object handle<br><code>image</code><br>&emsp;- name of texture or renderbuffer object to be registered<br><code>target</code><br>&emsp;- Identifies the type of object specified by image<br><code>Flags</code><br>&emsp;- Register flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_OPERATING_SYSTEM<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL.html#group__CUDA__GL#group__CUDA__GL_1g52c3a36c4c92611b6fcf0662b2f74e40\">Full Description</a>"
	},
	"cuWGLGetDevice":{
		"id": "cuWGLGetDevice",
		"value": "<p><b><code>CUresult cuWGLGetDevice ( CUdevice* pDevice, HGPUNV hGpu )</code></b></p>",
		"description": "<p>Gets the CUDA device associated with hGpu.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pDevice</code><br>&emsp;- Device associated with hGpu<br><code>hGpu</code><br>&emsp;- Handle to a GPU, as queried via WGL_NV_gpu_affinity()<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL.html#group__CUDA__GL#group__CUDA__GL_1g21ff8296192dc38dff42ba3346078282\">Full Description</a>"
	},
	"CUGLmap_flags":{
		"id": "CUGLmap_flags",
		"value": "<p><b><code>enum CUGLmap_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1gd0d7e6d08165785f7f801feef8a71c9a\">Full Description</a>"
	},
	"cuGLCtxCreate":{
		"id": "cuGLCtxCreate",
		"value": "<p><b><code>CUresult cuGLCtxCreate ( CUcontext* pCtx, unsigned int Flags, CUdevice device )</code></b></p>",
		"description": "<p>Create a CUDA context for interoperability with OpenGL.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCtx</code><br>&emsp;- Returned CUDA context<br><code>Flags</code><br>&emsp;- Options for CUDA context creation<br><code>device</code><br>&emsp;- Device on which to create the context<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1g931f6d260d7db412b37497cb4b2fdf5d\">Full Description</a>"
	},
	"cuGLInit":{
		"id": "cuGLInit",
		"value": "<p><b><code>CUresult cuGLInit ( void )</code></b></p>",
		"description": "<p>Initializes OpenGL interoperability.</p>",
		"additional_information": "<p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1g393d6b6cc9bc93185c45bb6c3ec87fe9\">Full Description</a>"
	},
	"cuGLMapBufferObject":{
		"id": "cuGLMapBufferObject",
		"value": "<p><b><code>CUresult cuGLMapBufferObject ( CUdeviceptr* dptr, size_t* size, GLuint buffer )</code></b></p>",
		"description": "<p>Maps an OpenGL buffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned mapped base pointer<br><code>size</code><br>&emsp;- Returned size of mapping<br><code>buffer</code><br>&emsp;- The name of the buffer object to map<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_MAP_FAILED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1g68f705554e3630cabea768a7621689ee\">Full Description</a>"
	},
	"cuGLMapBufferObjectAsync":{
		"id": "cuGLMapBufferObjectAsync",
		"value": "<p><b><code>CUresult cuGLMapBufferObjectAsync ( CUdeviceptr* dptr, size_t* size, GLuint buffer, CUstream hStream )</code></b></p>",
		"description": "<p>Maps an OpenGL buffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>dptr</code><br>&emsp;- Returned mapped base pointer<br><code>size</code><br>&emsp;- Returned size of mapping<br><code>buffer</code><br>&emsp;- The name of the buffer object to map<br><code>hStream</code><br>&emsp;- Stream to synchronize<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_MAP_FAILED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1gc309e0c027b9fba9a65ba533ec5f834e\">Full Description</a>"
	},
	"cuGLRegisterBufferObject":{
		"id": "cuGLRegisterBufferObject",
		"value": "<p><b><code>CUresult cuGLRegisterBufferObject ( GLuint buffer )</code></b></p>",
		"description": "<p>Registers an OpenGL buffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>buffer</code><br>&emsp;- The name of the buffer object to register.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_ALREADY_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1gaeba53543521eec9ad519bf3fa5574c0\">Full Description</a>"
	},
	"cuGLSetBufferObjectMapFlags":{
		"id": "cuGLSetBufferObjectMapFlags",
		"value": "<p><b><code>CUresult cuGLSetBufferObjectMapFlags ( GLuint buffer, unsigned int Flags )</code></b></p>",
		"description": "<p>Set the map flags for an OpenGL buffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>buffer</code><br>&emsp;- Buffer object to unmap<br><code>Flags</code><br>&emsp;- Map flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1gb04334f5028a5ad24640949164bd5cc9\">Full Description</a>"
	},
	"cuGLUnmapBufferObject":{
		"id": "cuGLUnmapBufferObject",
		"value": "<p><b><code>CUresult cuGLUnmapBufferObject ( GLuint buffer )</code></b></p>",
		"description": "<p>Unmaps an OpenGL buffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>buffer</code><br>&emsp;- Buffer object to unmap<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1g83c72b84acd61fbdab204000b6daea0d\">Full Description</a>"
	},
	"cuGLUnmapBufferObjectAsync":{
		"id": "cuGLUnmapBufferObjectAsync",
		"value": "<p><b><code>CUresult cuGLUnmapBufferObjectAsync ( GLuint buffer, CUstream hStream )</code></b></p>",
		"description": "<p>Unmaps an OpenGL buffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>buffer</code><br>&emsp;- Name of the buffer object to unmap<br><code>hStream</code><br>&emsp;- Stream to synchronize<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1g901b90f8543042cf59f51b99a0c96f3b\">Full Description</a>"
	},
	"cuGLUnregisterBufferObject":{
		"id": "cuGLUnregisterBufferObject",
		"value": "<p><b><code>CUresult cuGLUnregisterBufferObject ( GLuint buffer )</code></b></p>",
		"description": "<p>Unregister an OpenGL buffer object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>buffer</code><br>&emsp;- Name of the buffer object to unregister<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__GL__DEPRECATED.html#group__CUDA__GL__DEPRECATED#group__CUDA__GL__DEPRECATED_1g5564309322313e2e5df222647227f3a6\">Full Description</a>"
	},
	"CUd3d9DeviceList":{
		"id": "CUd3d9DeviceList",
		"value": "<p><b><code>enum CUd3d9DeviceList</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9.html#group__CUDA__D3D9#group__CUDA__D3D9_1g2cf4b668539659fec0dba41bcc999f6d\">Full Description</a>"
	},
	"cuD3D9CtxCreate":{
		"id": "cuD3D9CtxCreate",
		"value": "<p><b><code>CUresult cuD3D9CtxCreate ( CUcontext* pCtx, CUdevice* pCudaDevice, unsigned int Flags, IDirect3DDevice9* pD3DDevice )</code></b></p>",
		"description": "<p>Create a CUDA context for interoperability with Direct3D 9.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCtx</code><br>&emsp;- Returned newly created CUDA context<br><code>pCudaDevice</code><br>&emsp;- Returned pointer to the device on which the context was created<br><code>Flags</code><br>&emsp;- Context creation flags (see cuCtxCreate() for details)<br><code>pD3DDevice</code><br>&emsp;- Direct3D device to create interoperability context with<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9.html#group__CUDA__D3D9#group__CUDA__D3D9_1gab201a2284d11b00cdb4d6bba492e520\">Full Description</a>"
	},
	"cuD3D9CtxCreateOnDevice":{
		"id": "cuD3D9CtxCreateOnDevice",
		"value": "<p><b><code>CUresult cuD3D9CtxCreateOnDevice ( CUcontext* pCtx, unsigned int flags, IDirect3DDevice9* pD3DDevice, CUdevice cudaDevice )</code></b></p>",
		"description": "<p>Create a CUDA context for interoperability with Direct3D 9.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCtx</code><br>&emsp;- Returned newly created CUDA context<br><code>flags</code><br>&emsp;- Context creation flags (see cuCtxCreate() for details)<br><code>pD3DDevice</code><br>&emsp;- Direct3D device to create interoperability context with<br><code>cudaDevice</code><br>&emsp;- The CUDA device on which to create the context. This device must be among the devices returned when querying CU_D3D9_DEVICES_ALL from cuD3D9GetDevices.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9.html#group__CUDA__D3D9#group__CUDA__D3D9_1gcaca5329caf0c0253a5a944ecc958742\">Full Description</a>"
	},
	"cuD3D9GetDevice":{
		"id": "cuD3D9GetDevice",
		"value": "<p><b><code>CUresult cuD3D9GetDevice ( CUdevice* pCudaDevice, const char* pszAdapterName )</code></b></p>",
		"description": "<p>Gets the CUDA device corresponding to a display adapter.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDevice</code><br>&emsp;- Returned CUDA device corresponding to pszAdapterName<br><code>pszAdapterName</code><br>&emsp;- Adapter name to query for device<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9.html#group__CUDA__D3D9#group__CUDA__D3D9_1ge293c667e76dafaaf47ce64d0bd91c4d\">Full Description</a>"
	},
	"cuD3D9GetDevices":{
		"id": "cuD3D9GetDevices",
		"value": "<p><b><code>CUresult cuD3D9GetDevices ( unsigned int* pCudaDeviceCount, CUdevice* pCudaDevices, unsigned int cudaDeviceCount, IDirect3DDevice9* pD3D9Device, CUd3d9DeviceList deviceList )</code></b></p>",
		"description": "<p>Gets the CUDA devices corresponding to a Direct3D 9 device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDeviceCount</code><br>&emsp;- Returned number of CUDA devices corresponding to pD3D9Device<br><code>pCudaDevices</code><br>&emsp;- Returned CUDA devices corresponding to pD3D9Device<br><code>cudaDeviceCount</code><br>&emsp;- The size of the output device array pCudaDevices<br><code>pD3D9Device</code><br>&emsp;- Direct3D 9 device to query for CUDA devices<br><code>deviceList</code><br>&emsp;- The set of devices to return. This set may be CU_D3D9_DEVICE_LIST_ALL for all devices, CU_D3D9_DEVICE_LIST_CURRENT_FRAME for the devices used to render the current frame (in SLI), or CU_D3D9_DEVICE_LIST_NEXT_FRAME for the devices used to render the next frame (in SLI).<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NO_DEVICE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9.html#group__CUDA__D3D9#group__CUDA__D3D9_1g2c53ac0b20c57738fa497d1f8992f7ad\">Full Description</a>"
	},
	"cuD3D9GetDirect3DDevice":{
		"id": "cuD3D9GetDirect3DDevice",
		"value": "<p><b><code>CUresult cuD3D9GetDirect3DDevice ( IDirect3DDevice9** ppD3DDevice )</code></b></p>",
		"description": "<p>Get the Direct3D 9 device against which the current CUDA context was created.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ppD3DDevice</code><br>&emsp;- Returned Direct3D device corresponding to CUDA context<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXTCUDA_ERROR_INVALID_GRAPHICS_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9.html#group__CUDA__D3D9#group__CUDA__D3D9_1g439e074e2b46156f859c40ddaaf3d3fb\">Full Description</a>"
	},
	"cuGraphicsD3D9RegisterResource":{
		"id": "cuGraphicsD3D9RegisterResource",
		"value": "<p><b><code>CUresult cuGraphicsD3D9RegisterResource ( CUgraphicsResource* pCudaResource, IDirect3DResource9* pD3DResource, unsigned int Flags )</code></b></p>",
		"description": "<p>Register a Direct3D 9 resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaResource</code><br>&emsp;- Returned graphics resource handle<br><code>pD3DResource</code><br>&emsp;- Direct3D resource to register<br><code>Flags</code><br>&emsp;- Parameters for resource registration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9.html#group__CUDA__D3D9#group__CUDA__D3D9_1g391835e0d3c5a34bdba99840157194bf\">Full Description</a>"
	},
	"CUd3d9map_flags":{
		"id": "CUd3d9map_flags",
		"value": "<p><b><code>enum CUd3d9map_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1ge689aa9141452e4048257aabe606d6bc\">Full Description</a>"
	},
	"CUd3d9register_flags":{
		"id": "CUd3d9register_flags",
		"value": "<p><b><code>enum CUd3d9register_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1g8300da18582a2d6b981e74b2348e4f77\">Full Description</a>"
	},
	"cuD3D9MapResources":{
		"id": "cuD3D9MapResources",
		"value": "<p><b><code>CUresult cuD3D9MapResources ( unsigned int count, IDirect3DResource9** ppResource )</code></b></p>",
		"description": "<p>Map Direct3D resources for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources in ppResource<br><code>ppResource</code><br>&emsp;- Resources to map for CUDA usage<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1g092c45dd723d9881c7c95b2fdbecb5d8\">Full Description</a>"
	},
	"cuD3D9RegisterResource":{
		"id": "cuD3D9RegisterResource",
		"value": "<p><b><code>CUresult cuD3D9RegisterResource ( IDirect3DResource9* pResource, unsigned int Flags )</code></b></p>",
		"description": "<p>Register a Direct3D resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Resource to register for CUDA access<br><code>Flags</code><br>&emsp;- Flags for resource registration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1g2797f46baff62444656115eae9c8e1de\">Full Description</a>"
	},
	"cuD3D9ResourceGetMappedArray":{
		"id": "cuD3D9ResourceGetMappedArray",
		"value": "<p><b><code>CUresult cuD3D9ResourceGetMappedArray ( CUarray* pArray, IDirect3DResource9* pResource, unsigned int Face, unsigned int Level )</code></b></p>",
		"description": "<p>Get an array through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pArray</code><br>&emsp;- Returned array corresponding to subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>Face</code><br>&emsp;- Face of resource to access<br><code>Level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1g23597dfa283062869d6e62e0c3c03d91\">Full Description</a>"
	},
	"cuD3D9ResourceGetMappedPitch":{
		"id": "cuD3D9ResourceGetMappedPitch",
		"value": "<p><b><code>CUresult cuD3D9ResourceGetMappedPitch ( size_t* pPitch, size_t* pPitchSlice, IDirect3DResource9* pResource, unsigned int Face, unsigned int Level )</code></b></p>",
		"description": "<p>Get the pitch of a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pPitch</code><br>&emsp;- Returned pitch of subresource<br><code>pPitchSlice</code><br>&emsp;- Returned Z-slice pitch of subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>Face</code><br>&emsp;- Face of resource to access<br><code>Level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1g22273146dd5681ccfc473bd9ef82f9f2\">Full Description</a>"
	},
	"cuD3D9ResourceGetMappedPointer":{
		"id": "cuD3D9ResourceGetMappedPointer",
		"value": "<p><b><code>CUresult cuD3D9ResourceGetMappedPointer ( CUdeviceptr* pDevPtr, IDirect3DResource9* pResource, unsigned int Face, unsigned int Level )</code></b></p>",
		"description": "<p>Get the pointer through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pDevPtr</code><br>&emsp;- Returned pointer corresponding to subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>Face</code><br>&emsp;- Face of resource to access<br><code>Level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1g7fb080fc9497d1f25fe1e3a226c56bdc\">Full Description</a>"
	},
	"cuD3D9ResourceGetMappedSize":{
		"id": "cuD3D9ResourceGetMappedSize",
		"value": "<p><b><code>CUresult cuD3D9ResourceGetMappedSize ( size_t* pSize, IDirect3DResource9* pResource, unsigned int Face, unsigned int Level )</code></b></p>",
		"description": "<p>Get the size of a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pSize</code><br>&emsp;- Returned size of subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>Face</code><br>&emsp;- Face of resource to access<br><code>Level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1g84dbbbfc3cbb9260e22fea8f632c40ac\">Full Description</a>"
	},
	"cuD3D9ResourceGetSurfaceDimensions":{
		"id": "cuD3D9ResourceGetSurfaceDimensions",
		"value": "<p><b><code>CUresult cuD3D9ResourceGetSurfaceDimensions ( size_t* pWidth, size_t* pHeight, size_t* pDepth, IDirect3DResource9* pResource, unsigned int Face, unsigned int Level )</code></b></p>",
		"description": "<p>Get the dimensions of a registered surface.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pWidth</code><br>&emsp;- Returned width of surface<br><code>pHeight</code><br>&emsp;- Returned height of surface<br><code>pDepth</code><br>&emsp;- Returned depth of surface<br><code>pResource</code><br>&emsp;- Registered resource to access<br><code>Face</code><br>&emsp;- Face of resource to access<br><code>Level</code><br>&emsp;- Level of resource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1gdf64c251f6fdc73869b7ccdf34befb1c\">Full Description</a>"
	},
	"cuD3D9ResourceSetMapFlags":{
		"id": "cuD3D9ResourceSetMapFlags",
		"value": "<p><b><code>CUresult cuD3D9ResourceSetMapFlags ( IDirect3DResource9* pResource, unsigned int Flags )</code></b></p>",
		"description": "<p>Set usage flags for mapping a Direct3D resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Registered resource to set flags for<br><code>Flags</code><br>&emsp;- Parameters for resource mapping<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1gbb78cc5147eaed89e0a9b86dbf2d7408\">Full Description</a>"
	},
	"cuD3D9UnmapResources":{
		"id": "cuD3D9UnmapResources",
		"value": "<p><b><code>CUresult cuD3D9UnmapResources ( unsigned int count, IDirect3DResource9** ppResource )</code></b></p>",
		"description": "<p>Unmaps Direct3D resources.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to unmap for CUDA<br><code>ppResource</code><br>&emsp;- Resources to unmap for CUDA<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1gb985949a449e21274dd346c538619afe\">Full Description</a>"
	},
	"cuD3D9UnregisterResource":{
		"id": "cuD3D9UnregisterResource",
		"value": "<p><b><code>CUresult cuD3D9UnregisterResource ( IDirect3DResource9* pResource )</code></b></p>",
		"description": "<p>Unregister a Direct3D resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Resource to unregister<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D9__DEPRECATED.html#group__CUDA__D3D9__DEPRECATED#group__CUDA__D3D9__DEPRECATED_1g4889264b5a904f2dcb0f739ee67c4ce6\">Full Description</a>"
	},
	"CUd3d10DeviceList":{
		"id": "CUd3d10DeviceList",
		"value": "<p><b><code>enum CUd3d10DeviceList</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10.html#group__CUDA__D3D10#group__CUDA__D3D10_1g6c6dadb6de5493a111271be299f62b99\">Full Description</a>"
	},
	"cuD3D10GetDevice":{
		"id": "cuD3D10GetDevice",
		"value": "<p><b><code>CUresult cuD3D10GetDevice ( CUdevice* pCudaDevice, IDXGIAdapter* pAdapter )</code></b></p>",
		"description": "<p>Gets the CUDA device corresponding to a display adapter.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDevice</code><br>&emsp;- Returned CUDA device corresponding to pAdapter<br><code>pAdapter</code><br>&emsp;- Adapter to query for CUDA device<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10.html#group__CUDA__D3D10#group__CUDA__D3D10_1g98e0c9dcac9771d45112053045e0c34f\">Full Description</a>"
	},
	"cuD3D10GetDevices":{
		"id": "cuD3D10GetDevices",
		"value": "<p><b><code>CUresult cuD3D10GetDevices ( unsigned int* pCudaDeviceCount, CUdevice* pCudaDevices, unsigned int cudaDeviceCount, ID3D10Device* pD3D10Device, CUd3d10DeviceList deviceList )</code></b></p>",
		"description": "<p>Gets the CUDA devices corresponding to a Direct3D 10 device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDeviceCount</code><br>&emsp;- Returned number of CUDA devices corresponding to pD3D10Device<br><code>pCudaDevices</code><br>&emsp;- Returned CUDA devices corresponding to pD3D10Device<br><code>cudaDeviceCount</code><br>&emsp;- The size of the output device array pCudaDevices<br><code>pD3D10Device</code><br>&emsp;- Direct3D 10 device to query for CUDA devices<br><code>deviceList</code><br>&emsp;- The set of devices to return. This set may be CU_D3D10_DEVICE_LIST_ALL for all devices, CU_D3D10_DEVICE_LIST_CURRENT_FRAME for the devices used to render the current frame (in SLI), or CU_D3D10_DEVICE_LIST_NEXT_FRAME for the devices used to render the next frame (in SLI).<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NO_DEVICE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10.html#group__CUDA__D3D10#group__CUDA__D3D10_1gdcc33dea972d5b834f45a0acefe5fe77\">Full Description</a>"
	},
	"cuGraphicsD3D10RegisterResource":{
		"id": "cuGraphicsD3D10RegisterResource",
		"value": "<p><b><code>CUresult cuGraphicsD3D10RegisterResource ( CUgraphicsResource* pCudaResource, ID3D10Resource* pD3DResource, unsigned int Flags )</code></b></p>",
		"description": "<p>Register a Direct3D 10 resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaResource</code><br>&emsp;- Returned graphics resource handle<br><code>pD3DResource</code><br>&emsp;- Direct3D resource to register<br><code>Flags</code><br>&emsp;- Parameters for resource registration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10.html#group__CUDA__D3D10#group__CUDA__D3D10_1g87fb2a189c27c4b63538d23f53b2c8e6\">Full Description</a>"
	},
	"CUD3D10map_flags":{
		"id": "CUD3D10map_flags",
		"value": "<p><b><code>enum CUD3D10map_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1g74452bd2ef8d2515e627a4b54ca44394\">Full Description</a>"
	},
	"CUD3D10register_flags":{
		"id": "CUD3D10register_flags",
		"value": "<p><b><code>enum CUD3D10register_flags</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1gbad99be7f2d194fda482bae2c34286ad\">Full Description</a>"
	},
	"cuD3D10CtxCreate":{
		"id": "cuD3D10CtxCreate",
		"value": "<p><b><code>CUresult cuD3D10CtxCreate ( CUcontext* pCtx, CUdevice* pCudaDevice, unsigned int Flags, ID3D10Device* pD3DDevice )</code></b></p>",
		"description": "<p>Create a CUDA context for interoperability with Direct3D 10.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCtx</code><br>&emsp;- Returned newly created CUDA context<br><code>pCudaDevice</code><br>&emsp;- Returned pointer to the device on which the context was created<br><code>Flags</code><br>&emsp;- Context creation flags (see cuCtxCreate() for details)<br><code>pD3DDevice</code><br>&emsp;- Direct3D device to create interoperability context with<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1gceb8ac9cabf2dae3f6185be772e36e95\">Full Description</a>"
	},
	"cuD3D10CtxCreateOnDevice":{
		"id": "cuD3D10CtxCreateOnDevice",
		"value": "<p><b><code>CUresult cuD3D10CtxCreateOnDevice ( CUcontext* pCtx, unsigned int flags, ID3D10Device* pD3DDevice, CUdevice cudaDevice )</code></b></p>",
		"description": "<p>Create a CUDA context for interoperability with Direct3D 10.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCtx</code><br>&emsp;- Returned newly created CUDA context<br><code>flags</code><br>&emsp;- Context creation flags (see cuCtxCreate() for details)<br><code>pD3DDevice</code><br>&emsp;- Direct3D device to create interoperability context with<br><code>cudaDevice</code><br>&emsp;- The CUDA device on which to create the context. This device must be among the devices returned when querying CU_D3D10_DEVICES_ALL from cuD3D10GetDevices.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1gcac8d5f82332089f34fee44831477ae4\">Full Description</a>"
	},
	"cuD3D10GetDirect3DDevice":{
		"id": "cuD3D10GetDirect3DDevice",
		"value": "<p><b><code>CUresult cuD3D10GetDirect3DDevice ( ID3D10Device** ppD3DDevice )</code></b></p>",
		"description": "<p>Get the Direct3D 10 device against which the current CUDA context was created.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ppD3DDevice</code><br>&emsp;- Returned Direct3D device corresponding to CUDA context<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1ga3b842b3a35adab2fec4febb44ed6251\">Full Description</a>"
	},
	"cuD3D10MapResources":{
		"id": "cuD3D10MapResources",
		"value": "<p><b><code>CUresult cuD3D10MapResources ( unsigned int count, ID3D10Resource** ppResources )</code></b></p>",
		"description": "<p>Map Direct3D resources for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to map for CUDA<br><code>ppResources</code><br>&emsp;- Resources to map for CUDA<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1g5c8ecc921f0830b3163a0f32ccd7511d\">Full Description</a>"
	},
	"cuD3D10RegisterResource":{
		"id": "cuD3D10RegisterResource",
		"value": "<p><b><code>CUresult cuD3D10RegisterResource ( ID3D10Resource* pResource, unsigned int Flags )</code></b></p>",
		"description": "<p>Register a Direct3D resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Resource to register<br><code>Flags</code><br>&emsp;- Parameters for resource registration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1g476a6f370797a72d0238898e5d3e93ce\">Full Description</a>"
	},
	"cuD3D10ResourceGetMappedArray":{
		"id": "cuD3D10ResourceGetMappedArray",
		"value": "<p><b><code>CUresult cuD3D10ResourceGetMappedArray ( CUarray* pArray, ID3D10Resource* pResource, unsigned int SubResource )</code></b></p>",
		"description": "<p>Get an array through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pArray</code><br>&emsp;- Returned array corresponding to subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>SubResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1ge10b1c832c2f8ac54cf72aa1dca8ad0f\">Full Description</a>"
	},
	"cuD3D10ResourceGetMappedPitch":{
		"id": "cuD3D10ResourceGetMappedPitch",
		"value": "<p><b><code>CUresult cuD3D10ResourceGetMappedPitch ( size_t* pPitch, size_t* pPitchSlice, ID3D10Resource* pResource, unsigned int SubResource )</code></b></p>",
		"description": "<p>Get the pitch of a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pPitch</code><br>&emsp;- Returned pitch of subresource<br><code>pPitchSlice</code><br>&emsp;- Returned Z-slice pitch of subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>SubResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1ga5c9af1165e0f783a123f4ae8ceb3379\">Full Description</a>"
	},
	"cuD3D10ResourceGetMappedPointer":{
		"id": "cuD3D10ResourceGetMappedPointer",
		"value": "<p><b><code>CUresult cuD3D10ResourceGetMappedPointer ( CUdeviceptr* pDevPtr, ID3D10Resource* pResource, unsigned int SubResource )</code></b></p>",
		"description": "<p>Get a pointer through which to access a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pDevPtr</code><br>&emsp;- Returned pointer corresponding to subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>SubResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1ged2d8b89638fb2355e1ba2d7b92e0ff1\">Full Description</a>"
	},
	"cuD3D10ResourceGetMappedSize":{
		"id": "cuD3D10ResourceGetMappedSize",
		"value": "<p><b><code>CUresult cuD3D10ResourceGetMappedSize ( size_t* pSize, ID3D10Resource* pResource, unsigned int SubResource )</code></b></p>",
		"description": "<p>Get the size of a subresource of a Direct3D resource which has been mapped for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pSize</code><br>&emsp;- Returned size of subresource<br><code>pResource</code><br>&emsp;- Mapped resource to access<br><code>SubResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1g1c0069e431c8f95fd85fd3379cf7cb0e\">Full Description</a>"
	},
	"cuD3D10ResourceGetSurfaceDimensions":{
		"id": "cuD3D10ResourceGetSurfaceDimensions",
		"value": "<p><b><code>CUresult cuD3D10ResourceGetSurfaceDimensions ( size_t* pWidth, size_t* pHeight, size_t* pDepth, ID3D10Resource* pResource, unsigned int SubResource )</code></b></p>",
		"description": "<p>Get the dimensions of a registered surface.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pWidth</code><br>&emsp;- Returned width of surface<br><code>pHeight</code><br>&emsp;- Returned height of surface<br><code>pDepth</code><br>&emsp;- Returned depth of surface<br><code>pResource</code><br>&emsp;- Registered resource to access<br><code>SubResource</code><br>&emsp;- Subresource of pResource to access<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1g7795faffd5e58e04f277263d310278fe\">Full Description</a>"
	},
	"cuD3D10ResourceSetMapFlags":{
		"id": "cuD3D10ResourceSetMapFlags",
		"value": "<p><b><code>CUresult cuD3D10ResourceSetMapFlags ( ID3D10Resource* pResource, unsigned int Flags )</code></b></p>",
		"description": "<p>Set usage flags for mapping a Direct3D resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Registered resource to set flags for<br><code>Flags</code><br>&emsp;- Parameters for resource mapping<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1gcbfee49e43deebbcde1deea91d8e48fa\">Full Description</a>"
	},
	"cuD3D10UnmapResources":{
		"id": "cuD3D10UnmapResources",
		"value": "<p><b><code>CUresult cuD3D10UnmapResources ( unsigned int count, ID3D10Resource** ppResources )</code></b></p>",
		"description": "<p>Unmap Direct3D resources.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>count</code><br>&emsp;- Number of resources to unmap for CUDA<br><code>ppResources</code><br>&emsp;- Resources to unmap for CUDA<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1gbe4c93d0d53f16e843c035b2dd144a46\">Full Description</a>"
	},
	"cuD3D10UnregisterResource":{
		"id": "cuD3D10UnregisterResource",
		"value": "<p><b><code>CUresult cuD3D10UnregisterResource ( ID3D10Resource* pResource )</code></b></p>",
		"description": "<p>Unregister a Direct3D resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pResource</code><br>&emsp;- Resources to unregister<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D10__DEPRECATED.html#group__CUDA__D3D10__DEPRECATED#group__CUDA__D3D10__DEPRECATED_1gb4bb733df68b54424ac0b575e113e4ca\">Full Description</a>"
	},
	"CUd3d11DeviceList":{
		"id": "CUd3d11DeviceList",
		"value": "<p><b><code>enum CUd3d11DeviceList</code></b></p>",
		"description": "",
		"additional_information": "",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D11.html#group__CUDA__D3D11#group__CUDA__D3D11_1gf590094e914ab0d2c6a5385711496500\">Full Description</a>"
	},
	"cuD3D11GetDevice":{
		"id": "cuD3D11GetDevice",
		"value": "<p><b><code>CUresult cuD3D11GetDevice ( CUdevice* pCudaDevice, IDXGIAdapter* pAdapter )</code></b></p>",
		"description": "<p>Gets the CUDA device corresponding to a display adapter.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDevice</code><br>&emsp;- Returned CUDA device corresponding to pAdapter<br><code>pAdapter</code><br>&emsp;- Adapter to query for CUDA device<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NO_DEVICE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D11.html#group__CUDA__D3D11#group__CUDA__D3D11_1ga1f1648cdf3bd5aef7a55af6dc1f42cd\">Full Description</a>"
	},
	"cuD3D11GetDevices":{
		"id": "cuD3D11GetDevices",
		"value": "<p><b><code>CUresult cuD3D11GetDevices ( unsigned int* pCudaDeviceCount, CUdevice* pCudaDevices, unsigned int cudaDeviceCount, ID3D11Device* pD3D11Device, CUd3d11DeviceList deviceList )</code></b></p>",
		"description": "<p>Gets the CUDA devices corresponding to a Direct3D 11 device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaDeviceCount</code><br>&emsp;- Returned number of CUDA devices corresponding to pD3D11Device<br><code>pCudaDevices</code><br>&emsp;- Returned CUDA devices corresponding to pD3D11Device<br><code>cudaDeviceCount</code><br>&emsp;- The size of the output device array pCudaDevices<br><code>pD3D11Device</code><br>&emsp;- Direct3D 11 device to query for CUDA devices<br><code>deviceList</code><br>&emsp;- The set of devices to return. This set may be CU_D3D11_DEVICE_LIST_ALL for all devices, CU_D3D11_DEVICE_LIST_CURRENT_FRAME for the devices used to render the current frame (in SLI), or CU_D3D11_DEVICE_LIST_NEXT_FRAME for the devices used to render the next frame (in SLI).<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_NO_DEVICE, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_NOT_FOUND, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D11.html#group__CUDA__D3D11#group__CUDA__D3D11_1g7fca109b0dba2050b58f6bac627ff441\">Full Description</a>"
	},
	"cuGraphicsD3D11RegisterResource":{
		"id": "cuGraphicsD3D11RegisterResource",
		"value": "<p><b><code>CUresult cuGraphicsD3D11RegisterResource ( CUgraphicsResource* pCudaResource, ID3D11Resource* pD3DResource, unsigned int Flags )</code></b></p>",
		"description": "<p>Register a Direct3D 11 resource for access by CUDA.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaResource</code><br>&emsp;- Returned graphics resource handle<br><code>pD3DResource</code><br>&emsp;- Direct3D resource to register<br><code>Flags</code><br>&emsp;- Parameters for resource registration<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D11.html#group__CUDA__D3D11#group__CUDA__D3D11_1g4c02792aa87c3acc255b9de15b0509da\">Full Description</a>"
	},
	"cuD3D11CtxCreate":{
		"id": "cuD3D11CtxCreate",
		"value": "<p><b><code>CUresult cuD3D11CtxCreate ( CUcontext* pCtx, CUdevice* pCudaDevice, unsigned int Flags, ID3D11Device* pD3DDevice )</code></b></p>",
		"description": "<p>Create a CUDA context for interoperability with Direct3D 11.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCtx</code><br>&emsp;- Returned newly created CUDA context<br><code>pCudaDevice</code><br>&emsp;- Returned pointer to the device on which the context was created<br><code>Flags</code><br>&emsp;- Context creation flags (see cuCtxCreate() for details)<br><code>pD3DDevice</code><br>&emsp;- Direct3D device to create interoperability context with<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D11__DEPRECATED.html#group__CUDA__D3D11__DEPRECATED#group__CUDA__D3D11__DEPRECATED_1gc81ef881bbd18ff5527f37e8a76fd761\">Full Description</a>"
	},
	"cuD3D11CtxCreateOnDevice":{
		"id": "cuD3D11CtxCreateOnDevice",
		"value": "<p><b><code>CUresult cuD3D11CtxCreateOnDevice ( CUcontext* pCtx, unsigned int flags, ID3D11Device* pD3DDevice, CUdevice cudaDevice )</code></b></p>",
		"description": "<p>Create a CUDA context for interoperability with Direct3D 11.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCtx</code><br>&emsp;- Returned newly created CUDA context<br><code>flags</code><br>&emsp;- Context creation flags (see cuCtxCreate() for details)<br><code>pD3DDevice</code><br>&emsp;- Direct3D device to create interoperability context with<br><code>cudaDevice</code><br>&emsp;- The CUDA device on which to create the context. This device must be among the devices returned when querying CU_D3D11_DEVICES_ALL from cuD3D11GetDevices.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY, CUDA_ERROR_UNKNOWN<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D11__DEPRECATED.html#group__CUDA__D3D11__DEPRECATED#group__CUDA__D3D11__DEPRECATED_1g9f5d54aa09837416a552b16d52479a02\">Full Description</a>"
	},
	"cuD3D11GetDirect3DDevice":{
		"id": "cuD3D11GetDirect3DDevice",
		"value": "<p><b><code>CUresult cuD3D11GetDirect3DDevice ( ID3D11Device** ppD3DDevice )</code></b></p>",
		"description": "<p>Get the Direct3D 11 device against which the current CUDA context was created.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>ppD3DDevice</code><br>&emsp;- Returned Direct3D device corresponding to CUDA context<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__D3D11__DEPRECATED.html#group__CUDA__D3D11__DEPRECATED#group__CUDA__D3D11__DEPRECATED_1g0b929512b51e56cfef54f2616bd33ed8\">Full Description</a>"
	},
	"cuGraphicsVDPAURegisterOutputSurface":{
		"id": "cuGraphicsVDPAURegisterOutputSurface",
		"value": "<p><b><code>CUresult cuGraphicsVDPAURegisterOutputSurface ( CUgraphicsResource* pCudaResource, VdpOutputSurface vdpSurface, unsigned int flags )</code></b></p>",
		"description": "<p>Registers a VDPAU VdpOutputSurface object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaResource</code><br>&emsp;- Pointer to the returned object handle<br><code>vdpSurface</code><br>&emsp;- The VdpOutputSurface to be registered<br><code>flags</code><br>&emsp;- Map flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VDPAU.html#group__CUDA__VDPAU#group__CUDA__VDPAU_1g54874c7f771e51f27292a562c92cee28\">Full Description</a>"
	},
	"cuGraphicsVDPAURegisterVideoSurface":{
		"id": "cuGraphicsVDPAURegisterVideoSurface",
		"value": "<p><b><code>CUresult cuGraphicsVDPAURegisterVideoSurface ( CUgraphicsResource* pCudaResource, VdpVideoSurface vdpSurface, unsigned int flags )</code></b></p>",
		"description": "<p>Registers a VDPAU VdpVideoSurface object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaResource</code><br>&emsp;- Pointer to the returned object handle<br><code>vdpSurface</code><br>&emsp;- The VdpVideoSurface to be registered<br><code>flags</code><br>&emsp;- Map flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VDPAU.html#group__CUDA__VDPAU#group__CUDA__VDPAU_1ga5e00ff2d3ff2f8b680a69f3bc5cd891\">Full Description</a>"
	},
	"cuVDPAUCtxCreate":{
		"id": "cuVDPAUCtxCreate",
		"value": "<p><b><code>CUresult cuVDPAUCtxCreate ( CUcontext* pCtx, unsigned int flags, CUdevice device, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress )</code></b></p>",
		"description": "<p>Create a CUDA context for interoperability with VDPAU.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCtx</code><br>&emsp;- Returned CUDA context<br><code>flags</code><br>&emsp;- Options for CUDA context creation<br><code>device</code><br>&emsp;- Device on which to create the context<br><code>vdpDevice</code><br>&emsp;- The VdpDevice to interop with<br><code>vdpGetProcAddress</code><br>&emsp;- VDPAU's VdpGetProcAddress function pointer<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VDPAU.html#group__CUDA__VDPAU#group__CUDA__VDPAU_1gbfca4396947b5f194901c279cc6973d4\">Full Description</a>"
	},
	"cuVDPAUGetDevice":{
		"id": "cuVDPAUGetDevice",
		"value": "<p><b><code>CUresult cuVDPAUGetDevice ( CUdevice* pDevice, VdpDevice vdpDevice, VdpGetProcAddress* vdpGetProcAddress )</code></b></p>",
		"description": "<p>Gets the CUDA device associated with a VDPAU device.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pDevice</code><br>&emsp;- Device associated with vdpDevice<br><code>vdpDevice</code><br>&emsp;- A VdpDevice handle<br><code>vdpGetProcAddress</code><br>&emsp;- VDPAU's VdpGetProcAddress function pointer<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__VDPAU.html#group__CUDA__VDPAU#group__CUDA__VDPAU_1g0cce87525545da2cf1e84e007d5fe230\">Full Description</a>"
	},
	"cuEGLStreamConsumerAcquireFrame":{
		"id": "cuEGLStreamConsumerAcquireFrame",
		"value": "<p><b><code>CUresult cuEGLStreamConsumerAcquireFrame ( CUeglStreamConnection* conn, CUgraphicsResource* pCudaResource, CUstream* pStream, unsigned int timeout )</code></b></p>",
		"description": "<p>Acquire an image frame from the EGLStream with CUDA as a consumer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Connection on which to acquire<br><code>pCudaResource</code><br>&emsp;- CUDA resource on which the stream frame will be mapped for use.<br><code>pStream</code><br>&emsp;- CUDA stream for synchronization and any data migrations implied by CUeglResourceLocationFlags.<br><code>timeout</code><br>&emsp;- Desired timeout in usec for a new frame to be acquired. If set as CUDA_EGL_INFINITE_TIMEOUT, acquire waits infinitely. After timeout occurs CUDA consumer tries to acquire an old frame if available and EGL_SUPPORT_REUSE_NV flag is set.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_LAUNCH_TIMEOUT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1g10507a0acb74a90136caacb363a3c6a7\">Full Description</a>"
	},
	"cuEGLStreamConsumerConnect":{
		"id": "cuEGLStreamConsumerConnect",
		"value": "<p><b><code>CUresult cuEGLStreamConsumerConnect ( CUeglStreamConnection* conn, EGLStreamKHR stream )</code></b></p>",
		"description": "<p>Connect CUDA to EGLStream as a consumer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Pointer to the returned connection handle<br><code>stream</code><br>&emsp;- EGLStreamKHR handle<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1g3f59b85a292d59c19c8b64b8ade8a658\">Full Description</a>"
	},
	"cuEGLStreamConsumerConnectWithFlags":{
		"id": "cuEGLStreamConsumerConnectWithFlags",
		"value": "<p><b><code>CUresult cuEGLStreamConsumerConnectWithFlags ( CUeglStreamConnection* conn, EGLStreamKHR stream, unsigned int flags )</code></b></p>",
		"description": "<p>Connect CUDA to EGLStream as a consumer with given flags.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Pointer to the returned connection handle<br><code>stream</code><br>&emsp;- EGLStreamKHR handle<br><code>flags</code><br>&emsp;- Flags denote intended location - system or video.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1g7be3b064ea600a7bac4906e5d61ba4b7\">Full Description</a>"
	},
	"cuEGLStreamConsumerDisconnect":{
		"id": "cuEGLStreamConsumerDisconnect",
		"value": "<p><b><code>CUresult cuEGLStreamConsumerDisconnect ( CUeglStreamConnection* conn )</code></b></p>",
		"description": "<p>Disconnect CUDA as a consumer to EGLStream .</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Conection to disconnect.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1g3ab15cff9be3b25447714101ecda6a61\">Full Description</a>"
	},
	"cuEGLStreamConsumerReleaseFrame":{
		"id": "cuEGLStreamConsumerReleaseFrame",
		"value": "<p><b><code>CUresult cuEGLStreamConsumerReleaseFrame ( CUeglStreamConnection* conn, CUgraphicsResource pCudaResource, CUstream* pStream )</code></b></p>",
		"description": "<p>Releases the last frame acquired from the EGLStream.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Connection on which to release<br><code>pCudaResource</code><br>&emsp;- CUDA resource whose corresponding frame is to be released<br><code>pStream</code><br>&emsp;- CUDA stream on which release will be done.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1g4dadfefc718210e91c8f44f6a8e4b233\">Full Description</a>"
	},
	"cuEGLStreamProducerConnect":{
		"id": "cuEGLStreamProducerConnect",
		"value": "<p><b><code>CUresult cuEGLStreamProducerConnect ( CUeglStreamConnection* conn, EGLStreamKHR stream, EGLint width, EGLint height )</code></b></p>",
		"description": "<p>Connect CUDA to EGLStream as a producer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Pointer to the returned connection handle<br><code>stream</code><br>&emsp;- EGLStreamKHR handle<br><code>width</code><br>&emsp;- width of the image to be submitted to the stream<br><code>height</code><br>&emsp;- height of the image to be submitted to the stream<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1g5d181803d994a06f1bf9b05f52757bef\">Full Description</a>"
	},
	"cuEGLStreamProducerDisconnect":{
		"id": "cuEGLStreamProducerDisconnect",
		"value": "<p><b><code>CUresult cuEGLStreamProducerDisconnect ( CUeglStreamConnection* conn )</code></b></p>",
		"description": "<p>Disconnect CUDA as a producer to EGLStream .</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Conection to disconnect.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1gbdc9664bfb17dd3fa1e0a3ca68a8cafd\">Full Description</a>"
	},
	"cuEGLStreamProducerPresentFrame":{
		"id": "cuEGLStreamProducerPresentFrame",
		"value": "<p><b><code>CUresult cuEGLStreamProducerPresentFrame ( CUeglStreamConnection* conn, CUeglFrame eglframe, CUstream* pStream )</code></b></p>",
		"description": "<p>Present a CUDA eglFrame to the EGLStream with CUDA as a producer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Connection on which to present the CUDA array<br><code>eglframe</code><br>&emsp;- CUDA Eglstream Proucer Frame handle to be sent to the consumer over EglStream.<br><code>pStream</code><br>&emsp;- CUDA stream on which to present the frame.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1g60dcaadeabcbaedb4a271d529306687b\">Full Description</a>"
	},
	"cuEGLStreamProducerReturnFrame":{
		"id": "cuEGLStreamProducerReturnFrame",
		"value": "<p><b><code>CUresult cuEGLStreamProducerReturnFrame ( CUeglStreamConnection* conn, CUeglFrame* eglframe, CUstream* pStream )</code></b></p>",
		"description": "<p>Return the CUDA eglFrame to the EGLStream released by the consumer.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>conn</code><br>&emsp;- Connection on which to return<br><code>eglframe</code><br>&emsp;- CUDA Eglstream Proucer Frame handle returned from the consumer over EglStream.<br><code>pStream</code><br>&emsp;- CUDA stream on which to return the frame.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_LAUNCH_TIMEOUT<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1g70c84d9d01f343fc07cd632f9cfc3a06\">Full Description</a>"
	},
	"cuEventCreateFromEGLSync":{
		"id": "cuEventCreateFromEGLSync",
		"value": "<p><b><code>CUresult cuEventCreateFromEGLSync ( CUevent* phEvent, EGLSyncKHR eglSync, unsigned int flags )</code></b></p>",
		"description": "<p>Creates an event from EGLSync object.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>phEvent</code><br>&emsp;- Returns newly created event<br><code>eglSync</code><br>&emsp;- Opaque handle to EGLSync object<br><code>flags</code><br>&emsp;- Event creation flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_OUT_OF_MEMORY<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1gc1f625de07ffc410973fcc9709e36342\">Full Description</a>"
	},
	"cuGraphicsEGLRegisterImage":{
		"id": "cuGraphicsEGLRegisterImage",
		"value": "<p><b><code>CUresult cuGraphicsEGLRegisterImage ( CUgraphicsResource* pCudaResource, EGLImageKHR image, unsigned int flags )</code></b></p>",
		"description": "<p>Registers an EGL image.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>pCudaResource</code><br>&emsp;- Pointer to the returned object handle<br><code>image</code><br>&emsp;- An EGLImageKHR image which can be used to create target resource.<br><code>flags</code><br>&emsp;- Map flags<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_ALREADY_MAPPED, CUDA_ERROR_INVALID_CONTEXT,<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1g9f9b026d175238be6f6e79048d6879c5\">Full Description</a>"
	},
	"cuGraphicsResourceGetMappedEglFrame":{
		"id": "cuGraphicsResourceGetMappedEglFrame",
		"value": "<p><b><code>CUresult cuGraphicsResourceGetMappedEglFrame ( CUeglFrame* eglFrame, CUgraphicsResource resource, unsigned int index, unsigned int mipLevel )</code></b></p>",
		"description": "<p>Get an eglFrame through which to access a registered EGL graphics resource.</p>",
		"additional_information": "<p><b>Parameters</b><br><code>eglFrame</code><br>&emsp;- Returned eglFrame.<br><code>resource</code><br>&emsp;- Registered resource to access.<br><code>index</code><br>&emsp;- Index for cubemap surfaces.<br><code>mipLevel</code><br>&emsp;- Mipmap level for the subresource to access.<br></p><p><b>Returns</b><br>CUDA_SUCCESS, CUDA_ERROR_DEINITIALIZED, CUDA_ERROR_NOT_INITIALIZED, CUDA_ERROR_INVALID_CONTEXT, CUDA_ERROR_INVALID_VALUE, CUDA_ERROR_INVALID_HANDLE, CUDA_ERROR_NOT_MAPPED<br></p>",
		"url": "<br><a href=\"https://docs.nvidia.com/cuda/cuda-driver-api/group__CUDA__EGL.html#group__CUDA__EGL#group__CUDA__EGL_1ge1e57193ad1dbf554af60d5b2d096ede\">Full Description</a>"
	}
}
